// This file is auto-generated by @hey-api/openapi-ts

export const $AccountChargesRequest = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        chargeId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $AccountData = {
    type: 'object'
} as const;

export const $AccountRequest = {
    type: 'object',
    properties: {
        allowDividendCalculationForInactiveClients: {
            type: 'string'
        },
        applicationDate: {
            type: 'string'
        },
        approvedDate: {
            type: 'string'
        },
        charges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountChargesRequest'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        currencyCode: {
            type: 'string'
        },
        dateFormat: {
            type: 'string'
        },
        digitsAfterDecimal: {
            type: 'integer',
            format: 'int32'
        },
        externalId: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        inMultiplesOf: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        lockinPeriodFrequency: {
            type: 'integer',
            format: 'int32'
        },
        lockinPeriodFrequencyType: {
            type: 'string'
        },
        minimumActivePeriod: {
            type: 'integer',
            format: 'int32'
        },
        minimumActivePeriodFrequencyType: {
            type: 'string'
        },
        numberOfShares: {
            type: 'integer',
            format: 'int64'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        purchasedDate: {
            type: 'string'
        },
        requestedShares: {
            type: 'integer',
            format: 'int64'
        },
        savingsAccountId: {
            type: 'integer',
            format: 'int64'
        },
        submittedDate: {
            type: 'string'
        },
        unitPrice: {
            type: 'number'
        }
    }
} as const;

export const $AccountRuleRequest = {
    type: 'object',
    properties: {
        accountToCredit: {
            type: 'integer',
            format: 'int64'
        },
        accountToDebit: {
            type: 'integer',
            format: 'int64'
        },
        description: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $AccountTransferData = {
    type: 'object',
    properties: {
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        fromAccount: {
            '$ref': '#/components/schemas/PortfolioAccountData'
        },
        fromAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PortfolioAccountData'
            }
        },
        fromAccountType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        fromAccountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        fromClient: {
            '$ref': '#/components/schemas/ClientData'
        },
        fromClientOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ClientData'
            }
        },
        fromOffice: {
            '$ref': '#/components/schemas/OfficeData'
        },
        fromOfficeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OfficeData'
            }
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        reversed: {
            type: 'boolean'
        },
        toAccount: {
            '$ref': '#/components/schemas/PortfolioAccountData'
        },
        toAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PortfolioAccountData'
            }
        },
        toAccountType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        toAccountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        toClient: {
            '$ref': '#/components/schemas/ClientData'
        },
        toClientOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ClientData'
            }
        },
        toOffice: {
            '$ref': '#/components/schemas/OfficeData'
        },
        toOfficeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OfficeData'
            }
        },
        transferAmount: {
            type: 'number'
        },
        transferDate: {
            type: 'string',
            format: 'date'
        },
        transferDescription: {
            type: 'string'
        }
    }
} as const;

export const $AccountTransferRequest = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string'
        },
        fromAccountId: {
            type: 'string'
        },
        fromAccountType: {
            type: 'string'
        },
        fromClientId: {
            type: 'string'
        },
        fromOfficeId: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        toAccountId: {
            type: 'string'
        },
        toAccountType: {
            type: 'string'
        },
        toClientId: {
            type: 'string'
        },
        toOfficeId: {
            type: 'string'
        },
        transferAmount: {
            type: 'string'
        },
        transferDate: {
            type: 'string'
        },
        transferDescription: {
            type: 'string'
        }
    }
} as const;

export const $AccountingRuleData = {
    type: 'object',
    properties: {
        allowMultipleCreditEntries: {
            type: 'boolean'
        },
        allowMultipleDebitEntries: {
            type: 'boolean'
        },
        allowedAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountData'
            }
        },
        allowedCreditTagOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        allowedDebitTagOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        allowedOffices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OfficeData'
            }
        },
        creditAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountDataForLookup'
            }
        },
        creditTags: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountingTagRuleData'
            }
        },
        debitAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountDataForLookup'
            }
        },
        debitTags: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountingTagRuleData'
            }
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        officeName: {
            type: 'string'
        },
        systemDefined: {
            type: 'boolean'
        }
    }
} as const;

export const $AccountingTagRuleData = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        tag: {
            '$ref': '#/components/schemas/CodeValueData'
        },
        transactionType: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;

export const $AdHocData = {
    type: 'object',
    properties: {
        createdBy: {
            type: 'string'
        },
        createdById: {
            type: 'integer',
            format: 'int64'
        },
        createdOn: {
            type: 'string',
            format: 'date-time'
        },
        email: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        isActive: {
            type: 'boolean'
        },
        lastRun: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        query: {
            type: 'string'
        },
        reportRunEvery: {
            type: 'integer',
            format: 'int64'
        },
        reportRunFrequencies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        reportRunFrequency: {
            type: 'integer',
            format: 'int64'
        },
        tableFields: {
            type: 'string'
        },
        tableName: {
            type: 'string'
        },
        updatedById: {
            type: 'integer',
            format: 'int64'
        },
        updatedOn: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $AdHocRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        isActive: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        query: {
            type: 'string'
        },
        reportRunEvery: {
            type: 'integer',
            format: 'int64'
        },
        reportRunFrequency: {
            type: 'integer',
            format: 'int64'
        },
        tableFields: {
            type: 'string'
        },
        tableName: {
            type: 'string'
        }
    }
} as const;

export const $AdHocSearchQueryData = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            format: 'int32'
        },
        loanOutStanding: {
            type: 'number'
        },
        loanProductName: {
            type: 'string'
        },
        loanProducts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductData'
            }
        },
        officeName: {
            type: 'string'
        },
        offices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OfficeData'
            }
        },
        percentage: {
            type: 'number',
            format: 'double'
        }
    }
} as const;

export const $AddressData = {
    type: 'object',
    properties: {
        addressId: {
            type: 'integer',
            format: 'int64'
        },
        addressLine1: {
            type: 'string'
        },
        addressLine2: {
            type: 'string'
        },
        addressLine3: {
            type: 'string'
        },
        addressType: {
            type: 'string'
        },
        addressTypeId: {
            type: 'integer',
            format: 'int64'
        },
        addressTypeIdOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        city: {
            type: 'string'
        },
        clientID: {
            type: 'integer',
            format: 'int64'
        },
        countryId: {
            type: 'integer',
            format: 'int64'
        },
        countryIdOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        countryName: {
            type: 'string'
        },
        countyDistrict: {
            type: 'string'
        },
        createdBy: {
            type: 'string'
        },
        createdOn: {
            type: 'string',
            format: 'date'
        },
        isActive: {
            type: 'boolean'
        },
        latitude: {
            type: 'number'
        },
        longitude: {
            type: 'number'
        },
        postalCode: {
            type: 'string'
        },
        stateName: {
            type: 'string'
        },
        stateProvinceId: {
            type: 'integer',
            format: 'int64'
        },
        stateProvinceIdOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        street: {
            type: 'string'
        },
        townVillage: {
            type: 'string'
        },
        updatedBy: {
            type: 'string'
        },
        updatedOn: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $AdvancedPaymentData = {
    type: 'object',
    properties: {
        futureInstallmentAllocationRule: {
            type: 'string'
        },
        paymentAllocationOrder: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaymentAllocationOrder'
            }
        },
        transactionType: {
            type: 'string'
        }
    }
} as const;

export const $AdvancedQueryData = {
    type: 'object',
    properties: {
        columnFilters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ColumnFilterData'
            }
        },
        nonNullFilters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ColumnFilterData'
            }
        },
        nonNullResultColumns: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        resultColumns: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $AdvancedQueryRequest = {
    type: 'object',
    properties: {
        baseQuery: {
            '$ref': '#/components/schemas/AdvancedQueryData'
        },
        datatableQueries: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TableQueryData'
            }
        }
    }
} as const;

export const $AllowAttributeOverrides = {
    type: 'object',
    properties: {
        amortizationType: {
            type: 'boolean',
            example: true
        },
        graceOnArrearsAgeing: {
            type: 'boolean',
            example: true
        },
        graceOnPrincipalAndInterestPayment: {
            type: 'boolean',
            example: true
        },
        inArrearsTolerance: {
            type: 'boolean',
            example: true
        },
        interestCalculationPeriodType: {
            type: 'boolean',
            example: true
        },
        interestType: {
            type: 'boolean',
            example: true
        },
        repaymentEvery: {
            type: 'boolean',
            example: true
        },
        transactionProcessingStrategyCode: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $AppUser = {
    type: 'object',
    properties: {
        accountNonExpired: {
            type: 'boolean'
        },
        accountNonLocked: {
            type: 'boolean'
        },
        appUserClientMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppUserClientMapping'
            },
            uniqueItems: true
        },
        authorities: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GrantedAuthority'
            }
        },
        bypassUser: {
            type: 'boolean'
        },
        checkerSuperUser: {
            type: 'boolean'
        },
        credentialsNonExpired: {
            type: 'boolean'
        },
        deleted: {
            type: 'boolean'
        },
        displayName: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        enabled: {
            type: 'boolean'
        },
        firstname: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastTimePasswordUpdated: {
            type: 'string',
            format: 'date'
        },
        lastname: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        notEnabled: {
            type: 'boolean'
        },
        office: {
            '$ref': '#/components/schemas/Office'
        },
        password: {
            type: 'string'
        },
        passwordNeverExpires: {
            type: 'boolean'
        },
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Role'
            },
            uniqueItems: true
        },
        selfServiceUser: {
            type: 'boolean'
        },
        staff: {
            '$ref': '#/components/schemas/Staff'
        },
        staffDisplayName: {
            type: 'string'
        },
        staffId: {
            type: 'integer',
            format: 'int64'
        },
        systemUser: {
            type: 'boolean'
        },
        username: {
            type: 'string'
        }
    }
} as const;

export const $AppUserClientMapping = {
    type: 'object',
    properties: {
        appUser: {
            '$ref': '#/components/schemas/AppUser'
        },
        client: {
            '$ref': '#/components/schemas/Client'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        new: {
            type: 'boolean'
        }
    }
} as const;

export const $AppUserData = {
    type: 'object',
    properties: {
        clients: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ClientData'
            },
            uniqueItems: true,
            writeOnly: true
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        },
        selfServiceUser: {
            type: 'boolean'
        }
    }
} as const;

export const $AuditData = {
    type: 'object',
    properties: {
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $AuditSearchData = {
    type: 'object',
    properties: {
        actionNames: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        appUsers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppUserData'
            }
        },
        entityNames: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        statuses: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProcessingResultLookup'
            }
        }
    }
} as const;

export const $BatchRequest = {
    type: 'object',
    properties: {
        body: {
            type: 'string'
        },
        headers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Header'
            },
            uniqueItems: true
        },
        method: {
            type: 'string'
        },
        reference: {
            type: 'integer',
            format: 'int64'
        },
        relativeUrl: {
            type: 'string'
        },
        requestId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $BatchResponse = {
    type: 'object',
    properties: {
        body: {
            type: 'string'
        },
        headers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Header'
            },
            uniqueItems: true
        },
        requestId: {
            type: 'integer',
            format: 'int64'
        },
        statusCode: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $BodyPart = {
    type: 'object',
    properties: {
        contentDisposition: {
            '$ref': '#/components/schemas/ContentDisposition'
        },
        entity: {
            type: 'object'
        },
        headers: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            properties: {
                empty: {
                    type: 'boolean'
                }
            }
        },
        mediaType: {
            '$ref': '#/components/schemas/MediaType'
        },
        messageBodyWorkers: {
            '$ref': '#/components/schemas/MessageBodyWorkers'
        },
        parameterizedHeaders: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/ParameterizedHeader'
                }
            },
            properties: {
                empty: {
                    type: 'boolean'
                }
            }
        },
        parent: {
            '$ref': '#/components/schemas/MultiPart'
        },
        providers: {
            '$ref': '#/components/schemas/Providers'
        }
    }
} as const;

export const $BusinessDateResponse = {
    type: 'object',
    properties: {
        date: {
            type: 'string',
            format: 'date'
        },
        description: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['BUSINESS_DATE', 'COB_DATE']
        }
    }
} as const;

export const $BusinessDateUpdateRequest = {
    type: 'object',
    properties: {
        date: {
            type: 'string'
        },
        dateFormat: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        type: {
            type: 'string',
            description: 'Type of business date',
            enum: ['BUSINESS_DATE', 'COB_DATE'],
            example: 'BUSINESS_DATE'
        }
    },
    required: ['date', 'dateFormat', 'locale', 'type']
} as const;

export const $BusinessDateUpdateResponse = {
    type: 'object',
    properties: {
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                format: 'date'
            }
        },
        date: {
            type: 'string',
            format: 'date'
        },
        description: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['BUSINESS_DATE', 'COB_DATE']
        }
    }
} as const;

export const $BusinessStep = {
    type: 'object',
    properties: {
        order: {
            type: 'integer',
            format: 'int64'
        },
        stepName: {
            type: 'string'
        }
    }
} as const;

export const $BusinessStepDetail = {
    type: 'object',
    properties: {
        stepDescription: {
            type: 'string'
        },
        stepName: {
            type: 'string'
        }
    }
} as const;

export const $BusinessStepRequest = {
    type: 'object',
    properties: {
        businessSteps: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BusinessStep'
            }
        }
    }
} as const;

export const $BuyDownFeeAmortizationDetails = {
    type: 'object',
    properties: {
        adjustedAmount: {
            type: 'number'
        },
        amortizedAmount: {
            type: 'number'
        },
        buyDownFeeAmount: {
            type: 'number'
        },
        buyDownFeeDate: {
            type: 'string',
            format: 'date'
        },
        chargedOffAmount: {
            type: 'number'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        notYetAmortizedAmount: {
            type: 'number'
        },
        transactionId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $CacheData = {
    type: 'object',
    properties: {
        cacheType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        enabled: {
            type: 'boolean'
        }
    }
} as const;

export const $CacheSwitchRequest = {
    type: 'object',
    properties: {
        cacheType: {
            type: 'integer',
            format: 'int32'
        }
    },
    required: ['cacheType']
} as const;

export const $CacheSwitchResponse = {
    type: 'object',
    properties: {
        cacheType: {
            type: 'integer',
            format: 'int32'
        },
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        }
    }
} as const;

export const $CalculateFixedDepositInterestResponse = {
    type: 'object',
    description: 'CalculateFixedDepositInterestResponse',
    properties: {
        maturityAmount: {
            type: 'number',
            example: 10511.61
        },
        warning: {
            type: 'string',
            example: 'Accuracy Warning'
        }
    }
} as const;

export const $CalendarData = {
    type: 'object',
    properties: {
        calendarInstanceId: {
            type: 'integer',
            format: 'int64'
        },
        calendarTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        centerId: {
            type: 'string'
        },
        createdByUserId: {
            type: 'integer',
            format: 'int64'
        },
        createdByUsername: {
            type: 'string'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        dateFormat: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        duration: {
            type: 'integer',
            format: 'int32'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        entityId: {
            type: 'integer',
            format: 'int64'
        },
        entityType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        entityTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        firstReminder: {
            type: 'integer',
            format: 'int32'
        },
        frequency: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        frequencyNthDayTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        frequencyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        humanReadable: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        interval: {
            type: 'integer',
            format: 'int32'
        },
        lastUpdatedByUserId: {
            type: 'integer',
            format: 'int64'
        },
        lastUpdatedByUsername: {
            type: 'string'
        },
        lastUpdatedDate: {
            type: 'string',
            format: 'date-time'
        },
        locale: {
            type: 'string'
        },
        location: {
            type: 'string'
        },
        meetingTime: {
            '$ref': '#/components/schemas/LocalTime'
        },
        nextTenRecurringDates: {
            type: 'array',
            items: {
                type: 'string',
                format: 'date'
            }
        },
        recentEligibleMeetingDate: {
            type: 'string',
            format: 'date'
        },
        recurrence: {
            type: 'string'
        },
        recurringDates: {
            type: 'array',
            items: {
                type: 'string',
                format: 'date'
            }
        },
        remindBy: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        remindByOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        repeating: {
            type: 'boolean'
        },
        repeatsOnDay: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        repeatsOnDayOfMonth: {
            type: 'integer',
            format: 'int32'
        },
        repeatsOnDayOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        repeatsOnNthDayOfMonth: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        },
        secondReminder: {
            type: 'integer',
            format: 'int32'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        title: {
            type: 'string'
        },
        type: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        typeId: {
            type: 'string'
        }
    }
} as const;

export const $CalendarRequest = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string'
        },
        frequency: {
            type: 'string'
        },
        interval: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        repeating: {
            type: 'string'
        },
        repeatsOnDay: {
            type: 'string'
        },
        startDate: {
            type: 'string'
        },
        title: {
            type: 'string'
        },
        typeId: {
            type: 'string'
        }
    }
} as const;

export const $CampaignPreviewData = {
    type: 'object',
    properties: {
        campaignMessage: {
            type: 'string'
        },
        totalNumberOfMessages: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $CapitalizedIncomeDetails = {
    type: 'object',
    properties: {
        amortizedAmount: {
            type: 'number'
        },
        amount: {
            type: 'number'
        },
        amountAdjustment: {
            type: 'number'
        },
        chargedOffAmount: {
            type: 'number'
        },
        unrecognizedAmount: {
            type: 'number'
        }
    }
} as const;

export const $CashierData = {
    type: 'object',
    properties: {
        description: {
            type: 'string'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        endTime: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        isFullDay: {
            type: 'boolean'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        officeName: {
            type: 'string'
        },
        staffId: {
            type: 'integer',
            format: 'int64'
        },
        staffName: {
            type: 'string'
        },
        staffOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StaffData'
            }
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        startTime: {
            type: 'string'
        },
        tellerId: {
            type: 'integer',
            format: 'int64'
        },
        tellerName: {
            type: 'string'
        }
    }
} as const;

export const $CashierTransactionData = {
    type: 'object',
    properties: {
        cashierData: {
            '$ref': '#/components/schemas/CashierData'
        },
        cashierId: {
            type: 'integer',
            format: 'int64'
        },
        cashierName: {
            type: 'string'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        currencyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CurrencyData'
            }
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        entityId: {
            type: 'integer',
            format: 'int64'
        },
        entityType: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        officeName: {
            type: 'string'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        tellerId: {
            type: 'integer',
            format: 'int64'
        },
        tellerName: {
            type: 'string'
        },
        txnAmount: {
            type: 'number'
        },
        txnDate: {
            type: 'string',
            format: 'date'
        },
        txnNote: {
            type: 'string'
        },
        txnType: {
            '$ref': '#/components/schemas/CashierTxnType'
        }
    }
} as const;

export const $CashierTransactionsWithSummaryData = {
    type: 'object',
    properties: {
        cashierId: {
            type: 'integer',
            format: 'int64'
        },
        cashierName: {
            type: 'string'
        },
        cashierTransactions: {
            '$ref': '#/components/schemas/PageCashierTransactionData'
        },
        netCash: {
            type: 'number'
        },
        officeName: {
            type: 'string'
        },
        sumCashAllocation: {
            type: 'number'
        },
        sumCashSettlement: {
            type: 'number'
        },
        sumInwardCash: {
            type: 'number'
        },
        sumOutwardCash: {
            type: 'number'
        },
        tellerId: {
            type: 'integer',
            format: 'int64'
        },
        tellerName: {
            type: 'string'
        }
    }
} as const;

export const $CashierTxnType = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $CashiersForTeller = {
    type: 'object',
    properties: {
        cashiers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CashierData'
            }
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        officeName: {
            type: 'string'
        },
        tellerId: {
            type: 'integer',
            format: 'int64'
        },
        tellerName: {
            type: 'string'
        }
    }
} as const;

export const $CenterData = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'string'
        },
        collectionMeetingCalendar: {
            '$ref': '#/components/schemas/CalendarData'
        },
        datatables: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DatatableData'
            },
            writeOnly: true
        },
        hierarchy: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        officeName: {
            type: 'string'
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        },
        staffName: {
            type: 'string'
        }
    }
} as const;

export const $ChangeInstanceModeRequest = {
    type: 'object',
    description: 'ChangeInstanceModeRequest',
    properties: {
        batchManagerEnabled: {
            type: 'boolean',
            example: true
        },
        batchWorkerEnabled: {
            type: 'boolean',
            example: true
        },
        readEnabled: {
            type: 'boolean',
            example: true
        },
        writeEnabled: {
            type: 'boolean',
            example: true
        }
    },
    required: ['batchManagerEnabled', 'batchWorkerEnabled', 'readEnabled', 'writeEnabled']
} as const;

export const $ChangePwdUsersUserIdRequest = {
    type: 'object',
    description: 'ChangePwdUsersUserIdRequest',
    properties: {
        password: {
            type: 'string',
            example: 'password'
        },
        repeatPassword: {
            type: 'string',
            example: 'repeatPassword'
        }
    }
} as const;

export const $ChangePwdUsersUserIdResponse = {
    type: 'object',
    description: 'ChangePwdUsersUserIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/ChangePwdUsersUserIdResponseChanges'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 11
        }
    }
} as const;

export const $ChangePwdUsersUserIdResponseChanges = {
    type: 'object',
    properties: {
        password: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $Charge = {
    type: 'object',
    properties: {
        account: {
            '$ref': '#/components/schemas/GLAccount'
        },
        active: {
            type: 'boolean'
        },
        allowedClientChargeCalculationType: {
            type: 'boolean'
        },
        allowedClientChargeTime: {
            type: 'boolean'
        },
        allowedLoanChargeTime: {
            type: 'boolean'
        },
        allowedSavingsChargeCalculationType: {
            type: 'boolean'
        },
        allowedSavingsChargeTime: {
            type: 'boolean'
        },
        amount: {
            type: 'number'
        },
        annualFee: {
            type: 'boolean'
        },
        chargeCalculation: {
            type: 'integer',
            format: 'int32'
        },
        chargePaymentMode: {
            type: 'integer',
            format: 'int32'
        },
        chargeTimeType: {
            type: 'integer',
            format: 'int32'
        },
        clientCharge: {
            type: 'boolean'
        },
        currencyCode: {
            type: 'string'
        },
        deleted: {
            type: 'boolean'
        },
        disbursementCharge: {
            type: 'boolean'
        },
        enableFreeWithdrawal: {
            type: 'boolean'
        },
        enablePaymentType: {
            type: 'boolean'
        },
        feeInterval: {
            type: 'integer',
            format: 'int32'
        },
        feeOnMonthDay: {
            type: 'object',
            properties: {
                dayOfMonth: {
                    type: 'integer',
                    format: 'int32'
                },
                month: {
                    type: 'string',
                    enum: ['JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE', 'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER']
                },
                monthValue: {
                    type: 'integer',
                    format: 'int32'
                }
            }
        },
        frequencyFreeWithdrawalCharge: {
            type: 'integer',
            format: 'int32'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        incomeAccountId: {
            type: 'integer',
            format: 'int64'
        },
        loanCharge: {
            type: 'boolean'
        },
        maxCap: {
            type: 'number'
        },
        minCap: {
            type: 'number'
        },
        monthlyFee: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        overdueInstallment: {
            type: 'boolean'
        },
        paymentType: {
            '$ref': '#/components/schemas/PaymentType'
        },
        penalty: {
            type: 'boolean'
        },
        percentageOfApprovedAmount: {
            type: 'boolean'
        },
        percentageOfDisbursementAmount: {
            type: 'boolean'
        },
        restartFrequency: {
            type: 'integer',
            format: 'int32'
        },
        restartFrequencyEnum: {
            type: 'integer',
            format: 'int32'
        },
        savingsCharge: {
            type: 'boolean'
        },
        taxGroup: {
            '$ref': '#/components/schemas/TaxGroup'
        }
    }
} as const;

export const $ChargeData = {
    type: 'object',
    properties: {
        accountMappingForChargeConfig: {
            type: 'string'
        },
        active: {
            type: 'boolean'
        },
        amount: {
            type: 'number'
        },
        assetAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountData'
            }
        },
        chargeAppliesTo: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        chargeAppliesToOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        chargeCalculationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        chargePaymentMode: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        chargePaymetModeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        chargeTimeTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        clientChargeCalculationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        clientChargeTimeTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        currencyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CurrencyData'
            }
        },
        expenseAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountData'
            }
        },
        feeFrequency: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        feeFrequencyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        feeInterval: {
            type: 'integer',
            format: 'int32'
        },
        feeOnMonthDay: {
            type: 'object',
            properties: {
                dayOfMonth: {
                    type: 'integer',
                    format: 'int32'
                },
                month: {
                    type: 'string',
                    enum: ['JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE', 'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER']
                },
                monthValue: {
                    type: 'integer',
                    format: 'int32'
                }
            }
        },
        freeWithdrawal: {
            type: 'boolean'
        },
        freeWithdrawalChargeFrequency: {
            type: 'integer',
            format: 'int32'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        incomeOrLiabilityAccount: {
            '$ref': '#/components/schemas/GLAccountData'
        },
        incomeOrLiabilityAccountOptions: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/GLAccountData'
                }
            }
        },
        isPaymentType: {
            type: 'boolean'
        },
        loanChargeCalculationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        loanChargeTimeTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        maxCap: {
            type: 'number'
        },
        minCap: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        overdueInstallmentCharge: {
            type: 'boolean'
        },
        paymentTypeOptions: {
            '$ref': '#/components/schemas/PaymentTypeData'
        },
        penalty: {
            type: 'boolean'
        },
        restartFrequency: {
            type: 'integer',
            format: 'int32'
        },
        restartFrequencyEnum: {
            type: 'integer',
            format: 'int32'
        },
        savingsChargeCalculationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        savingsChargeTimeTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        shareChargeCalculationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        shareChargeTimeTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        taxGroup: {
            '$ref': '#/components/schemas/TaxGroupData'
        },
        taxGroupOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaxGroupData'
            }
        }
    }
} as const;

export const $ChargeOffReasonToGLAccountMapper = {
    type: 'object',
    properties: {
        chargeOffReasonCodeValue: {
            '$ref': '#/components/schemas/CodeValueData'
        },
        expenseAccount: {
            '$ref': '#/components/schemas/GLAccountData'
        }
    }
} as const;

export const $ChargeRequest = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean'
        },
        amount: {
            type: 'number',
            format: 'double'
        },
        chargeAppliesTo: {
            type: 'integer',
            format: 'int32'
        },
        chargeCalculationType: {
            type: 'integer',
            format: 'int32'
        },
        chargePaymentMode: {
            type: 'integer',
            format: 'int32'
        },
        chargeTimeType: {
            type: 'integer',
            format: 'int32'
        },
        currencyCode: {
            type: 'string'
        },
        enablePaymentType: {
            type: 'boolean'
        },
        feeFrequency: {
            type: 'string'
        },
        feeInterval: {
            type: 'string'
        },
        feeOnMonthDay: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        maxCap: {
            type: 'number'
        },
        minCap: {
            type: 'number'
        },
        monthDayFormat: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int64'
        },
        penalty: {
            type: 'boolean'
        },
        taxGroupId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $ChargeToGLAccountMapper = {
    type: 'object',
    properties: {
        charge: {
            '$ref': '#/components/schemas/ChargeData'
        },
        incomeAccount: {
            '$ref': '#/components/schemas/GLAccountData'
        }
    }
} as const;

export const $Client = {
    type: 'object',
    properties: {
        accountNumber: {
            type: 'string'
        },
        activatedBy: {
            '$ref': '#/components/schemas/AppUser'
        },
        activationDate: {
            type: 'string',
            format: 'date'
        },
        active: {
            type: 'boolean'
        },
        clientClassification: {
            '$ref': '#/components/schemas/CodeValue'
        },
        clientType: {
            '$ref': '#/components/schemas/CodeValue'
        },
        closed: {
            type: 'boolean'
        },
        closedBy: {
            '$ref': '#/components/schemas/AppUser'
        },
        closureDate: {
            type: 'string',
            format: 'date'
        },
        closureReason: {
            '$ref': '#/components/schemas/CodeValue'
        },
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        dateOfBirth: {
            type: 'string',
            format: 'date'
        },
        displayName: {
            type: 'string'
        },
        emailAddress: {
            type: 'string'
        },
        externalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        firstname: {
            type: 'string'
        },
        fullname: {
            type: 'string'
        },
        gender: {
            '$ref': '#/components/schemas/CodeValue'
        },
        groups: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Group'
            },
            uniqueItems: true
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        identifiers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ClientIdentifier'
            },
            uniqueItems: true
        },
        image: {
            '$ref': '#/components/schemas/Image'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        },
        lastname: {
            type: 'string'
        },
        legalForm: {
            type: 'integer',
            format: 'int32'
        },
        middlename: {
            type: 'string'
        },
        mobileNo: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        notActive: {
            type: 'boolean'
        },
        notPending: {
            type: 'boolean'
        },
        notStaff: {
            type: 'boolean'
        },
        office: {
            '$ref': '#/components/schemas/Office'
        },
        officeJoiningDate: {
            type: 'string',
            format: 'date'
        },
        pending: {
            type: 'boolean'
        },
        proposedTransferDate: {
            type: 'string',
            format: 'date'
        },
        reactivateDate: {
            type: 'string',
            format: 'date'
        },
        reactivatedBy: {
            '$ref': '#/components/schemas/AppUser'
        },
        rejected: {
            type: 'boolean'
        },
        rejectedBy: {
            '$ref': '#/components/schemas/AppUser'
        },
        rejectedDate: {
            type: 'string',
            format: 'date'
        },
        rejectionDate: {
            type: 'string',
            format: 'date'
        },
        rejectionReason: {
            '$ref': '#/components/schemas/CodeValue'
        },
        reopenedBy: {
            '$ref': '#/components/schemas/AppUser'
        },
        reopenedDate: {
            type: 'string',
            format: 'date'
        },
        savingsAccountId: {
            type: 'integer',
            format: 'int64'
        },
        savingsProductId: {
            type: 'integer',
            format: 'int64'
        },
        staff: {
            '$ref': '#/components/schemas/Staff'
        },
        status: {
            type: 'integer',
            format: 'int32'
        },
        subStatus: {
            '$ref': '#/components/schemas/CodeValue'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        transferInProgress: {
            type: 'boolean'
        },
        transferInProgressOrOnHold: {
            type: 'boolean'
        },
        transferOnHold: {
            type: 'boolean'
        },
        transferToOffice: {
            '$ref': '#/components/schemas/Office'
        },
        withdrawalDate: {
            type: 'string',
            format: 'date'
        },
        withdrawalReason: {
            '$ref': '#/components/schemas/CodeValue'
        },
        withdrawn: {
            type: 'boolean'
        },
        withdrawnBy: {
            '$ref': '#/components/schemas/AppUser'
        }
    },
    required: ['createdBy', 'createdDate', 'lastModifiedBy', 'lastModifiedDate']
} as const;

export const $ClientAddressRequest = {
    type: 'object',
    description: 'Address requests',
    properties: {
        addressId: {
            type: 'integer',
            format: 'int64'
        },
        addressLine1: {
            type: 'string'
        },
        addressLine2: {
            type: 'string'
        },
        addressLine3: {
            type: 'string'
        },
        addressTypeId: {
            type: 'integer',
            format: 'int64'
        },
        city: {
            type: 'string'
        },
        countryId: {
            type: 'integer',
            format: 'int64'
        },
        countyDistrict: {
            type: 'string'
        },
        createdBy: {
            type: 'string'
        },
        createdOn: {
            type: 'string'
        },
        isActive: {
            type: 'boolean'
        },
        latitude: {
            type: 'number'
        },
        longitude: {
            type: 'number'
        },
        postalCode: {
            type: 'string'
        },
        stateProvinceId: {
            type: 'integer',
            format: 'int64'
        },
        townVillage: {
            type: 'string'
        },
        updatedBy: {
            type: 'string'
        },
        updatedOn: {
            type: 'string'
        }
    }
} as const;

export const $ClientCollateralManagementData = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        pctToBase: {
            type: 'number'
        },
        quantity: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        totalCollateral: {
            type: 'number'
        },
        unitPrice: {
            type: 'number'
        }
    }
} as const;

export const $ClientCollateralRequest = {
    type: 'object',
    properties: {
        collateralId: {
            type: 'integer',
            format: 'int64'
        },
        locale: {
            type: 'string'
        },
        quantity: {
            type: 'number'
        }
    }
} as const;

export const $ClientData = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'string'
        },
        activationDate: {
            type: 'string',
            format: 'date'
        },
        active: {
            type: 'boolean'
        },
        address: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AddressData'
            }
        },
        clientClassification: {
            '$ref': '#/components/schemas/CodeValueData'
        },
        clientClassificationId: {
            type: 'integer',
            format: 'int64'
        },
        clientClassificationOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        clientCollateralManagements: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ClientCollateralManagementData'
            },
            uniqueItems: true
        },
        clientLegalFormOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        clientNonPersonConstitutionOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        clientNonPersonDetails: {
            '$ref': '#/components/schemas/ClientNonPersonData'
        },
        clientNonPersonMainBusinessLineOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        clientType: {
            '$ref': '#/components/schemas/CodeValueData'
        },
        clientTypeId: {
            type: 'integer',
            format: 'int64'
        },
        clientTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        datatables: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DatatableData'
            }
        },
        dateFormat: {
            type: 'string'
        },
        dateOfBirth: {
            type: 'string',
            format: 'date'
        },
        displayName: {
            type: 'string'
        },
        emailAddress: {
            type: 'string'
        },
        externalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        familyMemberOptions: {
            '$ref': '#/components/schemas/ClientFamilyMembersData'
        },
        firstname: {
            type: 'string'
        },
        fullname: {
            type: 'string'
        },
        gender: {
            '$ref': '#/components/schemas/CodeValueData'
        },
        genderId: {
            type: 'integer',
            format: 'int64'
        },
        genderOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        groups: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GroupGeneralData'
            }
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        imageId: {
            type: 'integer',
            format: 'int64'
        },
        imagePresent: {
            type: 'boolean'
        },
        isAddressEnabled: {
            type: 'boolean'
        },
        isStaff: {
            type: 'boolean'
        },
        lastname: {
            type: 'string'
        },
        legalForm: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        legalFormId: {
            type: 'integer',
            format: 'int64'
        },
        locale: {
            type: 'string'
        },
        middlename: {
            type: 'string'
        },
        mobileNo: {
            type: 'string'
        },
        narrations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        officeName: {
            type: 'string'
        },
        officeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OfficeData'
            }
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        },
        savingAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SavingsAccountData'
            }
        },
        savingProductOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SavingsProductData'
            }
        },
        savingsAccountId: {
            type: 'integer',
            format: 'int64'
        },
        savingsProductId: {
            type: 'integer',
            format: 'int64'
        },
        savingsProductName: {
            type: 'string'
        },
        staffId: {
            type: 'integer',
            format: 'int64'
        },
        staffName: {
            type: 'string'
        },
        staffOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StaffData'
            }
        },
        status: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        subStatus: {
            '$ref': '#/components/schemas/CodeValueData'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        timeline: {
            '$ref': '#/components/schemas/ClientTimelineData'
        },
        transferToOfficeId: {
            type: 'integer',
            format: 'int64'
        },
        transferToOfficeName: {
            type: 'string'
        }
    }
} as const;

export const $ClientFamilyMemberRequest = {
    type: 'object',
    properties: {
        age: {
            type: 'integer',
            format: 'int64'
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        dateFormat: {
            type: 'string'
        },
        dateOfBirth: {
            type: 'string'
        },
        familyMembers: {
            type: 'string'
        },
        firstName: {
            type: 'string'
        },
        genderId: {
            type: 'integer',
            format: 'int64'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        isDependent: {
            type: 'boolean'
        },
        lastName: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        maritalStatusId: {
            type: 'integer',
            format: 'int64'
        },
        middleName: {
            type: 'string'
        },
        mobileNumber: {
            type: 'string'
        },
        professionId: {
            type: 'integer',
            format: 'int64'
        },
        qualification: {
            type: 'string'
        },
        relationshipId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $ClientFamilyMembersData = {
    type: 'object',
    properties: {
        age: {
            type: 'integer',
            format: 'int64'
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        dateOfBirth: {
            type: 'string',
            format: 'date'
        },
        firstName: {
            type: 'string'
        },
        gender: {
            type: 'string'
        },
        genderId: {
            type: 'integer',
            format: 'int64'
        },
        genderIdOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        isDependent: {
            type: 'boolean'
        },
        lastName: {
            type: 'string'
        },
        maritalStatus: {
            type: 'string'
        },
        maritalStatusId: {
            type: 'integer',
            format: 'int64'
        },
        maritalStatusIdOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        middleName: {
            type: 'string'
        },
        mobileNumber: {
            type: 'string'
        },
        profession: {
            type: 'string'
        },
        professionId: {
            type: 'integer',
            format: 'int64'
        },
        professionIdOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        qualification: {
            type: 'string'
        },
        relationship: {
            type: 'string'
        },
        relationshipId: {
            type: 'integer',
            format: 'int64'
        },
        relationshipIdOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        }
    }
} as const;

export const $ClientIdentifier = {
    type: 'object',
    properties: {
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        },
        new: {
            type: 'boolean'
        }
    },
    required: ['createdBy', 'createdDate', 'lastModifiedBy', 'lastModifiedDate']
} as const;

export const $ClientIdentifierData = {
    type: 'object',
    properties: {
        allowedDocumentTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        description: {
            type: 'string'
        },
        documentKey: {
            type: 'string'
        },
        documentType: {
            '$ref': '#/components/schemas/CodeValueData'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        status: {
            type: 'string'
        }
    }
} as const;

export const $ClientIdentifierRequest = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            example: 'Document has been verified'
        },
        documentKey: {
            type: 'string',
            example: 'KA-54677'
        },
        documentTypeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        status: {
            type: 'string',
            example: 'Active'
        }
    }
} as const;

export const $ClientNonPersonData = {
    type: 'object'
} as const;

export const $ClientSearchData = {
    type: 'object',
    properties: {
        accountNumber: {
            type: 'string'
        },
        activationDate: {
            type: 'string',
            format: 'date'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        displayName: {
            type: 'string'
        },
        externalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        mobileNo: {
            type: 'string'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        officeName: {
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;

export const $ClientTextSearch = {
    type: 'object',
    properties: {
        text: {
            type: 'string'
        }
    }
} as const;

export const $ClientTimelineData = {
    type: 'object',
    properties: {
        activatedByFirstname: {
            type: 'string'
        },
        activatedByLastname: {
            type: 'string'
        },
        activatedByUsername: {
            type: 'string'
        },
        activatedOnDate: {
            type: 'string',
            format: 'date'
        },
        closedByFirstname: {
            type: 'string'
        },
        closedByLastname: {
            type: 'string'
        },
        closedByUsername: {
            type: 'string'
        },
        closedOnDate: {
            type: 'string',
            format: 'date'
        },
        submittedByFirstname: {
            type: 'string'
        },
        submittedByLastname: {
            type: 'string'
        },
        submittedByUsername: {
            type: 'string'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $Code = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        systemDefined: {
            type: 'boolean'
        },
        values: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValue'
            },
            uniqueItems: true
        }
    }
} as const;

export const $CodeValue = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean'
        },
        code: {
            '$ref': '#/components/schemas/Code'
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        label: {
            type: 'string'
        },
        mandatory: {
            type: 'boolean'
        },
        new: {
            type: 'boolean'
        },
        position: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $CodeValueData = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean'
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        mandatory: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        position: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $CollateralData = {
    type: 'object',
    properties: {
        allowedCollateralTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        type: {
            '$ref': '#/components/schemas/CodeValueData'
        },
        value: {
            type: 'number'
        }
    }
} as const;

export const $CollateralManagementData = {
    type: 'object',
    properties: {
        basePrice: {
            type: 'number'
        },
        currency: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        pctToBase: {
            type: 'number'
        },
        quality: {
            type: 'string'
        },
        unitType: {
            type: 'string'
        }
    }
} as const;

export const $CollateralManagementProductRequest = {
    type: 'object',
    properties: {
        basePrice: {
            type: 'number'
        },
        currency: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        pctToBase: {
            type: 'number'
        },
        quality: {
            type: 'string'
        },
        unitType: {
            type: 'string'
        }
    }
} as const;

export const $CollateralProductRequest = {
    type: 'object',
    properties: {
        basePrice: {
            type: 'number'
        },
        currency: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        pctToBase: {
            type: 'number'
        },
        quality: {
            type: 'string'
        },
        unitType: {
            type: 'string'
        }
    }
} as const;

export const $CollectionSheetRequest = {
    type: 'object',
    properties: {
        actualDisbursementDate: {
            type: 'string'
        },
        bulkDisbursementTransactions: {
            '$ref': '#/components/schemas/DisbursementTransactionsRequest'
        },
        dateFormat: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        transactionDate: {
            type: 'string'
        }
    }
} as const;

export const $ColumnFilterData = {
    type: 'object',
    properties: {
        column: {
            type: 'string'
        },
        filters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FilterData'
            }
        }
    }
} as const;

export const $CommandProcessingResult = {
    type: 'object',
    properties: {
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        commandId: {
            type: 'integer',
            format: 'int64'
        },
        creditBureauReportData: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        externalIdOrNull: {
            '$ref': '#/components/schemas/ExternalId'
        },
        glimId: {
            type: 'integer',
            format: 'int64'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        gsimId: {
            type: 'integer',
            format: 'int64'
        },
        loanExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        resourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        resourceId: {
            type: 'integer',
            format: 'int64'
        },
        resourceIdentifier: {
            type: 'string'
        },
        rollbackTransaction: {
            type: 'boolean'
        },
        savingsId: {
            type: 'integer',
            format: 'int64'
        },
        subResourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64'
        },
        transactionId: {
            type: 'string'
        }
    }
} as const;

export const $CommandWrapper = {
    type: 'object',
    properties: {
        actionName: {
            type: 'string'
        },
        cacheResource: {
            type: 'boolean'
        },
        changePasswordOperation: {
            type: 'boolean'
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        commandId: {
            type: 'integer',
            format: 'int64'
        },
        create: {
            type: 'boolean'
        },
        createDatatable: {
            type: 'boolean'
        },
        creditBureauId: {
            type: 'integer',
            format: 'int64'
        },
        currencyResource: {
            type: 'boolean'
        },
        datatableResource: {
            type: 'boolean'
        },
        delete: {
            type: 'boolean'
        },
        deleteDatatable: {
            type: 'boolean'
        },
        deleteMultiple: {
            type: 'boolean'
        },
        deleteOneToOne: {
            type: 'boolean'
        },
        deleteOperation: {
            type: 'boolean'
        },
        entityId: {
            type: 'integer',
            format: 'int64'
        },
        entityName: {
            type: 'string'
        },
        fullFilSurvey: {
            type: 'boolean'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        href: {
            type: 'string'
        },
        idempotencyKey: {
            type: 'string'
        },
        interestPauseCreateResource: {
            type: 'boolean'
        },
        interestPauseDeleteResource: {
            type: 'boolean'
        },
        interestPauseResource: {
            type: 'boolean'
        },
        interestPauseUpdateResource: {
            type: 'boolean'
        },
        jobName: {
            type: 'string'
        },
        json: {
            type: 'string'
        },
        loanDisburseDetailResource: {
            type: 'boolean'
        },
        loanExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        noteResource: {
            type: 'boolean'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        organisationCreditBureauId: {
            type: 'integer',
            format: 'int64'
        },
        passwordPreferencesResource: {
            type: 'boolean'
        },
        permissionResource: {
            type: 'boolean'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        registerDatatable: {
            type: 'boolean'
        },
        registerSurvey: {
            type: 'boolean'
        },
        sanitizeJsonKeys: {
            type: 'array',
            items: {
                type: 'string'
            },
            uniqueItems: true
        },
        savingsId: {
            type: 'integer',
            format: 'int64'
        },
        subentityId: {
            type: 'integer',
            format: 'int64'
        },
        surveyResource: {
            type: 'boolean'
        },
        taskPermissionName: {
            type: 'string'
        },
        templateId: {
            type: 'integer',
            format: 'int64'
        },
        transactionId: {
            type: 'string'
        },
        update: {
            type: 'boolean'
        },
        updateDatatable: {
            type: 'boolean'
        },
        updateDisbursementDate: {
            type: 'boolean'
        },
        updateMultiple: {
            type: 'boolean'
        },
        updateOneToOne: {
            type: 'boolean'
        },
        updateOperation: {
            type: 'boolean'
        },
        userResource: {
            type: 'boolean'
        },
        workingDaysResource: {
            type: 'boolean'
        }
    }
} as const;

export const $Component = {
    type: 'object',
    properties: {
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        key: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        sequenceNo: {
            type: 'integer',
            format: 'int32'
        },
        survey: {
            '$ref': '#/components/schemas/Survey'
        },
        text: {
            type: 'string'
        }
    }
} as const;

export const $ComponentData = {
    type: 'object',
    properties: {
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        key: {
            type: 'string'
        },
        sequenceNo: {
            type: 'integer',
            format: 'int32'
        },
        text: {
            type: 'string'
        }
    }
} as const;

export const $ConfiguredJobNamesDTO = {
    type: 'object',
    properties: {
        businessJobs: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $ContentDisposition = {
    type: 'object',
    properties: {
        creationDate: {
            type: 'string',
            format: 'date-time'
        },
        fileName: {
            type: 'string'
        },
        modificationDate: {
            type: 'string',
            format: 'date-time'
        },
        parameters: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        readDate: {
            type: 'string',
            format: 'date-time'
        },
        size: {
            type: 'integer',
            format: 'int64'
        },
        type: {
            type: 'string'
        }
    }
} as const;

export const $CreateStaffResponse = {
    type: 'object',
    description: 'PostStaffResponse',
    properties: {
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $CreditAllocationData = {
    type: 'object',
    properties: {
        creditAllocationOrder: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreditAllocationOrder'
            }
        },
        transactionType: {
            type: 'string'
        }
    }
} as const;

export const $CreditAllocationOrder = {
    type: 'object',
    properties: {
        creditAllocationRule: {
            type: 'string'
        },
        order: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $CreditDebit = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        glAccountId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $CurrencyConfigurationData = {
    type: 'object',
    properties: {
        currencyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CurrencyData'
            }
        },
        selectedCurrencyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CurrencyData'
            }
        }
    }
} as const;

export const $CurrencyData = {
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32'
        },
        displayLabel: {
            type: 'string'
        },
        displaySymbol: {
            type: 'string'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string'
        },
        nameCode: {
            type: 'string'
        }
    }
} as const;

export const $CurrencyItem = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $CurrencyUpdateRequest = {
    type: 'object',
    properties: {
        currencies: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['currencies']
} as const;

export const $CurrencyUpdateResponse = {
    type: 'object',
    properties: {
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        currencies: {
            type: 'array',
            example: ['KES', 'BND', 'LBP', 'GHC', 'USD', 'XOF', 'AED', 'AMD'],
            items: {
                type: 'string',
                example: '["KES","BND","LBP","GHC","USD","XOF","AED","AMD"]'
            }
        }
    }
} as const;

export const $DatatableCheckStatusData = {
    type: 'object'
} as const;

export const $DatatableChecksData = {
    type: 'object'
} as const;

export const $DatatableData = {
    type: 'object',
    properties: {
        registeredTableName: {
            type: 'string'
        }
    }
} as const;

export const $DateParam = {
    type: 'object'
} as const;

export const $DeleteAccountNumberFormatsResponse = {
    type: 'object',
    description: 'DeleteAccountNumberFormatsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $DeleteAccountingRulesResponse = {
    type: 'object',
    description: 'DeleteAccountingRulesResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteCentersCenterIdResponse = {
    type: 'object',
    description: 'DeleteCentersCenterIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/DeleteCentersChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteCentersChanges = {
    type: 'object'
} as const;

export const $DeleteChargesChargeIdResponse = {
    type: 'object',
    description: 'DeleteChargesChargeIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteClientCollateralResponse = {
    type: 'object',
    description: 'DeleteClientCollateralResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 12
        }
    }
} as const;

export const $DeleteClientsClientIdChargesChargeIdResponse = {
    type: 'object',
    description: 'DeleteClientsClientIdChargesChargeIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 189
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 164
        }
    }
} as const;

export const $DeleteClientsClientIdIdentifiersIdentifierIdResponse = {
    type: 'object',
    description: 'DeleteClientsClientIdIdentifiersIdentifierIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $DeleteClientsClientIdResponse = {
    type: 'object',
    description: 'DeleteClientsClientIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceExternalId: {
            type: 'string',
            example: '123-456'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $DeleteCodeValueDataResponse = {
    type: 'object',
    description: 'DeleteCodeValueDataResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $DeleteCodesResponse = {
    type: 'object',
    description: 'DeleteCodesResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $DeleteCollateralProductResponse = {
    type: 'object',
    description: 'DeleteCollateralProductResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 12
        }
    }
} as const;

export const $DeleteDataTablesDatatableAppTableIdDatatableIdResponse = {
    type: 'object',
    description: 'DeleteDataTablesDatatableAppTableIdDatatableIdResponse ',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteDataTablesDatatableAppTableIdResponse = {
    type: 'object',
    description: 'DeleteDataTablesDatatableAppTableIdResponse ',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteDataTablesResponse = {
    type: 'object',
    description: 'DeleteDataTablesResponse',
    properties: {
        resourceIdentifier: {
            type: 'string',
            example: 'extra_client_details'
        }
    }
} as const;

export const $DeleteDelinquencyBucketResponse = {
    type: 'object',
    description: 'DeleteDelinquencyBucketResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteDelinquencyRangeResponse = {
    type: 'object',
    description: 'DeleteDelinquencyRangeResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteEntityDatatableChecksTemplateResponse = {
    type: 'object',
    description: 'DeleteEntityDatatableChecksTemplateResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteEntityTypeEntityIdDocumentsResponse = {
    type: 'object',
    description: 'DeleteEntityTypeEntityIdDocumentsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        resourceIdentifier: {
            type: 'string',
            example: '3'
        }
    }
} as const;

export const $DeleteFinancialActivityAccountsResponse = {
    type: 'object',
    description: 'DeleteFinancialActivityAccountsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteFixedDepositAccountsAccountIdResponse = {
    type: 'object',
    description: 'DeleteFixedDepositAccountsAccountIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteFixedDepositProductsProductIdResponse = {
    type: 'object',
    description: 'DeleteFixedDepositProductsProductIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteGLAccountsResponse = {
    type: 'object',
    description: 'DeleteGLAccountsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteGlClosuresResponse = {
    type: 'object',
    description: 'DeleteGlClosuresResponse',
    properties: {
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 9
        }
    }
} as const;

export const $DeleteGroupsGroupIdResponse = {
    type: 'object',
    description: 'DeleteGroupsGroupIdResponse',
    properties: {
        groupId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $DeleteHolidaysHolidayIdResponse = {
    type: 'object',
    description: 'DeleteHolidaysHolidayIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteHookResponse = {
    type: 'object',
    description: 'DeleteHookResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $DeleteInterestRateChartsChartIdChartSlabsResponse = {
    type: 'object',
    description: 'DeleteInterestRateChartsChartIdChartSlabsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteInterestRateChartsChartIdResponse = {
    type: 'object',
    description: 'DeleteInterestRateChartsChartIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteLoansLoanIdChargesChargeIdResponse = {
    type: 'object',
    description: 'DeleteLoansLoanIdChargesChargeIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $DeleteLoansLoanIdCollateralsCollateralIdResponse = {
    type: 'object',
    description: 'DeleteLoansLoanIdCollateralsCollateralIdResponse',
    properties: {
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 12
        }
    }
} as const;

export const $DeleteLoansLoanIdResponse = {
    type: 'object',
    description: 'DeleteLoansLoanIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeletePaymentTypesPaymentTypeIdResponse = {
    type: 'object',
    description: 'DeletePaymentTypesPaymentTypeIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 13
        }
    }
} as const;

export const $DeletePostDatedCheck = {
    type: 'object',
    description: 'DeletePostDatedCheck',
    properties: {
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $DeleteProvisioningCriteriaResponse = {
    type: 'object',
    description: 'DeleteProvisioningCriteriaResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteRecurringDepositAccountsResponse = {
    type: 'object',
    description: 'DeleteRecurringDepositAccountsResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteRecurringDepositProductsProductIdResponse = {
    type: 'object',
    description: 'DeleteRecurringDepositProductsProductIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteReportMailingJobsResponse = {
    type: 'object',
    description: 'DeleteReportMailingJobsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteReportsResponse = {
    type: 'object',
    description: 'DeleteReportsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 132
        }
    }
} as const;

export const $DeleteResourceTypeResourceIdNotesNoteIdResponse = {
    type: 'object',
    description: 'DeleteResourceTypeResourceIdNotesNoteIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 76
        }
    }
} as const;

export const $DeleteRolesRoleIdResponse = {
    type: 'object',
    description: 'DeleteRolesRoleIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteSavingsAccountsAccountIdResponse = {
    type: 'object',
    description: 'DeleteSavingsAccountsAccountIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse = {
    type: 'object',
    description: 'DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteSavingsProductsProductIdResponse = {
    type: 'object',
    description: 'DeleteSavingsProductsProductIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteSelfBeneficiariesTPTBeneficiaryIdResponse = {
    type: 'object',
    description: 'DeleteSelfBeneficiariesTPTBeneficiaryIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 5
        }
    }
} as const;

export const $DeleteTellersTellerIdCashiersCashierIdResponse = {
    type: 'object',
    description: 'DeleteTellersTellerIdCashiersCashierIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteTemplatesTemplateIdResponse = {
    type: 'object',
    description: 'DeleteTemplatesTemplateIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $DeleteUsersUserIdResponse = {
    type: 'object',
    description: 'DeleteUsersUserIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/DeleteUsersUserIdResponseChanges'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 11
        }
    }
} as const;

export const $DeleteUsersUserIdResponseChanges = {
    type: 'object'
} as const;

export const $DelinquencyBucket = {
    type: 'object',
    properties: {
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        ranges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DelinquencyRange'
            }
        },
        version: {
            type: 'integer',
            format: 'int64'
        }
    },
    required: ['createdBy', 'createdDate', 'lastModifiedBy', 'lastModifiedDate']
} as const;

export const $DelinquencyBucketData = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        ranges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DelinquencyRangeData'
            }
        }
    }
} as const;

export const $DelinquencyBucketRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        ranges: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        }
    }
} as const;

export const $DelinquencyRange = {
    type: 'object',
    properties: {
        classification: {
            type: 'string'
        },
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        },
        maximumAgeDays: {
            type: 'integer',
            format: 'int32'
        },
        minimumAgeDays: {
            type: 'integer',
            format: 'int32'
        },
        new: {
            type: 'boolean'
        },
        version: {
            type: 'integer',
            format: 'int64'
        }
    },
    required: ['createdBy', 'createdDate', 'lastModifiedBy', 'lastModifiedDate']
} as const;

export const $DelinquencyRangeData = {
    type: 'object',
    properties: {
        classification: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        maximumAgeDays: {
            type: 'integer',
            format: 'int32'
        },
        minimumAgeDays: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $DelinquencyRangeRequest = {
    type: 'object',
    properties: {
        classification: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        maximumAgeDays: {
            type: 'integer',
            format: 'int32'
        },
        minimumAgeDays: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $DepositAccountOnHoldTransactionData = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        loanAccountNo: {
            type: 'string'
        },
        loanClientName: {
            type: 'string'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        reversed: {
            type: 'boolean'
        },
        savingsAccountNo: {
            type: 'string'
        },
        savingsClientName: {
            type: 'string'
        },
        savingsId: {
            type: 'integer',
            format: 'int64'
        },
        transactionDate: {
            type: 'string',
            format: 'date'
        },
        transactionType: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;

export const $DisbursementDetail = {
    type: 'object',
    properties: {
        expectedDisbursementDate: {
            type: 'string',
            example: '1 January 2024'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        principal: {
            type: 'number',
            format: 'double',
            example: 100
        }
    }
} as const;

export const $DisbursementTransactionsRequest = {
    type: 'object',
    properties: {
        bulkRepaymentTransactions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RepaymentTransactionRequest'
            }
        },
        bulkSavingsDueTransactions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SavingDueTransactionRequest'
            }
        }
    }
} as const;

export const $DocumentData = {
    type: 'object',
    properties: {
        description: {
            type: 'string'
        },
        fileName: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        location: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        parentEntityId: {
            type: 'integer',
            format: 'int64'
        },
        parentEntityType: {
            type: 'string'
        },
        size: {
            type: 'integer',
            format: 'int64'
        },
        storageType: {
            type: 'integer',
            format: 'int32'
        },
        type: {
            type: 'string'
        }
    }
} as const;

export const $DocumentUploadRequest = {
    type: 'object',
    description: 'Document upload request',
    properties: {
        dateFormat: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        uploadedInputStream: {
            type: 'string',
            format: 'binary'
        }
    }
} as const;

export const $Entity = {
    type: 'object',
    properties: {
        actions: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $EnumOptionData = {
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $EnumOptionType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.asset'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        value: {
            type: 'string',
            example: 'ASSET'
        }
    }
} as const;

export const $Event = {
    type: 'object',
    example: 1,
    properties: {
        actionName: {
            type: 'string'
        },
        entityName: {
            type: 'string'
        }
    }
} as const;

export const $ExecuteJobRequest = {
    type: 'object',
    description: 'ExecuteJobRequest',
    properties: {
        jobParameters: {
            type: 'array',
            example: 'Update loan Summary',
            items: {
                '$ref': '#/components/schemas/JobParameterDTO'
            }
        }
    }
} as const;

export const $ExtensionData = {
    type: 'object',
    properties: {
        key: {
            type: 'string'
        },
        value: {
            type: 'string'
        }
    },
    required: ['key']
} as const;

export const $ExternalAssetOwnerRequest = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        ownerExternalId: {
            type: 'string'
        },
        purchasePriceRatio: {
            type: 'string'
        },
        settlementDate: {
            type: 'string'
        },
        transferExternalGroupId: {
            type: 'string'
        },
        transferExternalId: {
            type: 'string'
        }
    }
} as const;

export const $ExternalAssetOwnerSearchRequest = {
    type: 'object',
    properties: {
        effectiveFromDate: {
            type: 'string',
            format: 'date'
        },
        effectiveToDate: {
            type: 'string',
            format: 'date'
        },
        submittedFromDate: {
            type: 'string',
            format: 'date'
        },
        submittedToDate: {
            type: 'string',
            format: 'date'
        },
        text: {
            type: 'string'
        }
    }
} as const;

export const $ExternalAssetOwnerTransferChangesData = {
    type: 'object',
    description: 'ExternalAssetOwnerTransferChangesData',
    properties: {
        ownerExternalId: {
            type: 'string',
            example: '1234567890987654321abc'
        },
        purchasePriceRatio: {
            type: 'string',
            example: '1.23456789'
        },
        settlementDate: {
            type: 'string',
            format: 'date'
        },
        transferExternalId: {
            type: 'string',
            example: '36efeb06-d835-48a1-99eb-09bd1d348c1e'
        }
    }
} as const;

export const $ExternalEventConfigurationItemResponse = {
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean'
        },
        type: {
            type: 'string'
        }
    }
} as const;

export const $ExternalEventConfigurationResponse = {
    type: 'object',
    properties: {
        externalEventConfiguration: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExternalEventConfigurationItemResponse'
            }
        }
    }
} as const;

export const $ExternalEventConfigurationUpdateRequest = {
    type: 'object',
    properties: {
        externalEventConfigurations: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            }
        }
    },
    required: ['externalEventConfigurations']
} as const;

export const $ExternalEventConfigurationUpdateResponse = {
    type: 'object',
    properties: {
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        }
    }
} as const;

export const $ExternalEventResponse = {
    type: 'object',
    properties: {
        aggregateRootId: {
            type: 'integer',
            format: 'int64'
        },
        businessDate: {
            type: 'string',
            format: 'date'
        },
        category: {
            type: 'string'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        eventId: {
            type: 'integer',
            format: 'int64'
        },
        payLoad: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        schema: {
            type: 'string'
        },
        type: {
            type: 'string'
        }
    }
} as const;

export const $ExternalId = {
    type: 'object',
    properties: {
        empty: {
            type: 'boolean'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $ExternalOwnerJournalEntryData = {
    type: 'object',
    properties: {
        journalEntryData: {
            '$ref': '#/components/schemas/PageJournalEntryData'
        },
        ownerData: {
            '$ref': '#/components/schemas/ExternalTransferOwnerData'
        }
    }
} as const;

export const $ExternalOwnerTransferJournalEntryData = {
    type: 'object',
    properties: {
        journalEntryData: {
            '$ref': '#/components/schemas/PageJournalEntryData'
        },
        transferData: {
            '$ref': '#/components/schemas/ExternalTransferData'
        }
    }
} as const;

export const $ExternalServicesPropertiesData = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $ExternalTransferData = {
    type: 'object',
    properties: {
        details: {
            '$ref': '#/components/schemas/ExternalTransferDataDetails'
        },
        effectiveFrom: {
            type: 'string',
            format: 'date'
        },
        effectiveTo: {
            type: 'string',
            format: 'date'
        },
        loan: {
            '$ref': '#/components/schemas/ExternalTransferLoanData'
        },
        owner: {
            '$ref': '#/components/schemas/ExternalTransferOwnerData'
        },
        previousOwner: {
            '$ref': '#/components/schemas/ExternalTransferOwnerData'
        },
        purchasePriceRatio: {
            type: 'string'
        },
        settlementDate: {
            type: 'string',
            format: 'date'
        },
        status: {
            type: 'string',
            enum: ['ACTIVE', 'ACTIVE_INTERMEDIATE', 'DECLINED', 'PENDING', 'PENDING_INTERMEDIATE', 'BUYBACK', 'BUYBACK_INTERMEDIATE', 'CANCELLED']
        },
        subStatus: {
            type: 'string',
            enum: ['BALANCE_ZERO', 'BALANCE_NEGATIVE', 'SAMEDAY_TRANSFERS', 'USER_REQUESTED', 'UNSOLD']
        },
        transferExternalGroupId: {
            type: 'string'
        },
        transferExternalId: {
            type: 'string'
        },
        transferId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $ExternalTransferDataDetails = {
    type: 'object',
    properties: {
        detailsId: {
            type: 'integer',
            format: 'int64'
        },
        totalFeeChargesOutstanding: {
            type: 'number'
        },
        totalInterestOutstanding: {
            type: 'number'
        },
        totalOutstanding: {
            type: 'number'
        },
        totalOverpaid: {
            type: 'number'
        },
        totalPenaltyChargesOutstanding: {
            type: 'number'
        },
        totalPrincipalOutstanding: {
            type: 'number'
        }
    }
} as const;

export const $ExternalTransferLoanData = {
    type: 'object',
    properties: {
        externalId: {
            type: 'string'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $ExternalTransferLoanProductAttributesData = {
    type: 'object',
    properties: {
        attributeId: {
            type: 'integer',
            format: 'int64'
        },
        attributeKey: {
            type: 'string'
        },
        attributeValue: {
            type: 'string'
        },
        loanProductId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $ExternalTransferOwnerData = {
    type: 'object',
    properties: {
        externalId: {
            type: 'string'
        }
    }
} as const;

export const $Field = {
    type: 'object',
    properties: {
        fieldName: {
            type: 'string'
        },
        fieldType: {
            type: 'string'
        },
        fieldValue: {
            type: 'string'
        },
        optional: {
            type: 'boolean'
        },
        placeholder: {
            type: 'string'
        }
    }
} as const;

export const $FieldConfigurationData = {
    type: 'object',
    properties: {
        entity: {
            type: 'string'
        },
        field: {
            type: 'string'
        },
        fieldConfigurationId: {
            type: 'integer',
            format: 'int64'
        },
        isEnabled: {
            type: 'boolean'
        },
        isMandatory: {
            type: 'boolean'
        },
        subentity: {
            type: 'string'
        },
        validationRegex: {
            type: 'string'
        }
    }
} as const;

export const $FilterData = {
    type: 'object',
    properties: {
        operator: {
            type: 'string',
            enum: ['EQ', 'NEQ', 'GTE', 'LTE', 'GT', 'LT', 'LIKE', 'NLIKE', 'BTW', 'NBTW', 'IN', 'NIN', 'NULL', 'NNULL']
        },
        values: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $FinancialActivityAccountData = {
    type: 'object',
    properties: {
        financialActivityData: {
            '$ref': '#/components/schemas/FinancialActivityData'
        },
        financialActivityOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FinancialActivityData'
            }
        },
        glAccountData: {
            '$ref': '#/components/schemas/GLAccountData'
        },
        glAccountOptions: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/GLAccountData'
                }
            }
        },
        id: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $FinancialActivityData = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        mappedGLAccountType: {
            type: 'string',
            enum: ['ASSET', 'LIABILITY', 'EQUITY', 'INCOME', 'EXPENSE']
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $FloatingRate = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean'
        },
        baseLendingRate: {
            type: 'boolean'
        },
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        floatingRatePeriods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FloatingRatePeriod'
            }
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        }
    },
    required: ['createdBy', 'createdDate', 'lastModifiedBy', 'lastModifiedDate']
} as const;

export const $FloatingRateData = {
    type: 'object',
    properties: {
        createdBy: {
            type: 'string'
        },
        createdOn: {
            type: 'string',
            format: 'date-time'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        interestRateFrequencyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        isActive: {
            type: 'boolean'
        },
        isBaseLendingRate: {
            type: 'boolean'
        },
        modifiedBy: {
            type: 'string'
        },
        modifiedOn: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        ratePeriods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FloatingRatePeriodData'
            }
        }
    }
} as const;

export const $FloatingRatePeriod = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean'
        },
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        differentialToBaseLendingRate: {
            type: 'boolean'
        },
        floatingRate: {
            '$ref': '#/components/schemas/FloatingRate'
        },
        fromDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        interestRate: {
            type: 'number'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        },
        new: {
            type: 'boolean'
        }
    },
    required: ['createdBy', 'createdDate', 'lastModifiedBy', 'lastModifiedDate']
} as const;

export const $FloatingRatePeriodData = {
    type: 'object',
    properties: {
        createdBy: {
            type: 'string'
        },
        createdOn: {
            type: 'string',
            format: 'date-time'
        },
        fromDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        interestRate: {
            type: 'number'
        },
        isActive: {
            type: 'boolean'
        },
        isDifferentialToBaseLendingRate: {
            type: 'boolean'
        },
        modifiedBy: {
            type: 'string'
        },
        modifiedOn: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $FloatingRatePeriodRequest = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string'
        },
        fromDate: {
            type: 'string'
        },
        interestRate: {
            type: 'number'
        },
        isDifferentialToBaseLendingRate: {
            type: 'boolean'
        },
        locale: {
            type: 'string'
        }
    }
} as const;

export const $FloatingRateRequest = {
    type: 'object',
    properties: {
        isActive: {
            type: 'boolean'
        },
        isBaseLendingRate: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        ratePeriods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FloatingRatePeriodRequest'
            }
        }
    }
} as const;

export const $FormDataBodyPart = {
    type: 'object',
    properties: {
        content: {
            type: 'object'
        },
        contentDisposition: {
            '$ref': '#/components/schemas/ContentDisposition'
        },
        entity: {
            type: 'object'
        },
        fileName: {
            type: 'string'
        },
        formDataContentDisposition: {
            '$ref': '#/components/schemas/FormDataContentDisposition'
        },
        headers: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            properties: {
                empty: {
                    type: 'boolean'
                }
            }
        },
        mediaType: {
            '$ref': '#/components/schemas/MediaType'
        },
        messageBodyWorkers: {
            '$ref': '#/components/schemas/MessageBodyWorkers'
        },
        name: {
            type: 'string'
        },
        parameterizedHeaders: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/ParameterizedHeader'
                }
            },
            properties: {
                empty: {
                    type: 'boolean'
                }
            }
        },
        parent: {
            '$ref': '#/components/schemas/MultiPart'
        },
        providers: {
            '$ref': '#/components/schemas/Providers'
        },
        simple: {
            type: 'boolean'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $FormDataContentDisposition = {
    type: 'object',
    properties: {
        creationDate: {
            type: 'string',
            format: 'date-time'
        },
        fileName: {
            type: 'string'
        },
        modificationDate: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        parameters: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        readDate: {
            type: 'string',
            format: 'date-time'
        },
        size: {
            type: 'integer',
            format: 'int64'
        },
        type: {
            type: 'string'
        }
    }
} as const;

export const $Fund = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        new: {
            type: 'boolean'
        }
    }
} as const;

export const $FundData = {
    type: 'object',
    properties: {
        externalId: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $FundRequest = {
    type: 'object',
    properties: {
        externalId: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $GLAccount = {
    type: 'object',
    properties: {
        children: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccount'
            }
        },
        description: {
            type: 'string'
        },
        detailAccount: {
            type: 'boolean'
        },
        disabled: {
            type: 'boolean'
        },
        glCode: {
            type: 'string'
        },
        headerAccount: {
            type: 'boolean'
        },
        hierarchy: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        manualEntriesAllowed: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        parent: {
            '$ref': '#/components/schemas/GLAccount'
        },
        tagId: {
            '$ref': '#/components/schemas/CodeValue'
        },
        type: {
            type: 'integer',
            format: 'int32'
        },
        usage: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $GLAccountData = {
    type: 'object',
    properties: {
        accountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        allowedAssetsTagOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        allowedEquityTagOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        allowedExpensesTagOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        allowedIncomeTagOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        allowedLiabilitiesTagOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        assetHeaderAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountData'
            }
        },
        description: {
            type: 'string'
        },
        disabled: {
            type: 'boolean'
        },
        equityHeaderAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountData'
            }
        },
        expenseHeaderAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountData'
            }
        },
        glCode: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        incomeHeaderAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountData'
            }
        },
        liabilityHeaderAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountData'
            }
        },
        manualEntriesAllowed: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        nameDecorated: {
            type: 'string'
        },
        organizationRunningBalance: {
            type: 'integer',
            format: 'int64'
        },
        parentId: {
            type: 'integer',
            format: 'int64'
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        },
        tagId: {
            '$ref': '#/components/schemas/CodeValueData'
        },
        type: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        usage: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        usageOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        }
    }
} as const;

export const $GLAccountDataForLookup = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $GLClosureData = {
    type: 'object',
    properties: {
        allowedOffices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OfficeData'
            }
        },
        closingDate: {
            type: 'string',
            format: 'date'
        },
        comments: {
            type: 'string'
        },
        createdByUserId: {
            type: 'integer',
            format: 'int64'
        },
        createdByUsername: {
            type: 'string'
        },
        createdDate: {
            type: 'string',
            format: 'date'
        },
        deleted: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastUpdatedByUserId: {
            type: 'integer',
            format: 'int64'
        },
        lastUpdatedByUsername: {
            type: 'string'
        },
        lastUpdatedDate: {
            type: 'string',
            format: 'date'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        officeName: {
            type: 'string'
        }
    }
} as const;

export const $GeoCodeData = {
    type: 'object',
    properties: {
        latitude: {
            type: 'string'
        },
        longitude: {
            type: 'string'
        }
    },
    required: ['latitude', 'longitude']
} as const;

export const $GetAccountNumberFormatsIdResponse = {
    type: 'object',
    description: 'GetAccountNumberFormatsIdResponse',
    properties: {
        accountType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        prefixType: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;

export const $GetAccountNumberFormatsResponseTemplate = {
    type: 'object',
    description: 'GetAccountNumberFormatsResponseTemplate',
    properties: {
        accountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        prefixTypeOptions: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/EnumOptionData'
                }
            }
        }
    }
} as const;

export const $GetAccountOptions = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.savings'
        },
        description: {
            type: 'string',
            example: 'Savings Account'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetAccountTransferTemplateResponse = {
    type: 'object',
    description: 'GetAccountTransferTemplateResponse',
    properties: {
        accountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountOptions'
            },
            uniqueItems: true
        },
        fromAccountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetFromAccountOptions'
            },
            uniqueItems: true
        },
        toAccountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetFromAccountOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetAccountTransfersClientClassification = {
    type: 'object'
} as const;

export const $GetAccountTransfersClientType = {
    type: 'object'
} as const;

export const $GetAccountTransfersFromAccountType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.savings'
        },
        description: {
            type: 'string',
            example: 'Savings Account'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetAccountTransfersFromAccountTypeOptions = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.savings'
        },
        description: {
            type: 'string',
            example: 'Savings Account'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetAccountTransfersFromClientOptions = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            example: 'Small shop'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'HO'
        }
    }
} as const;

export const $GetAccountTransfersFromOffice = {
    type: 'object',
    properties: {
        externalId: {
            type: 'string',
            example: '1'
        },
        hierarchy: {
            type: 'string',
            example: '.'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'HO'
        },
        nameDecorated: {
            type: 'string',
            example: 'HO'
        },
        openingDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetAccountTransfersFromOfficeOptions = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'HO'
        },
        nameDecorated: {
            type: 'string',
            example: 'HO'
        }
    }
} as const;

export const $GetAccountTransfersGender = {
    type: 'object'
} as const;

export const $GetAccountTransfersGroups = {
    type: 'object'
} as const;

export const $GetAccountTransfersPageItems = {
    type: 'object',
    properties: {
        currency: {
            '$ref': '#/components/schemas/GetAccountTransfersPageItemsCurrency'
        },
        fromAccount: {
            '$ref': '#/components/schemas/GetAccountTransfersPageItemsFromAccount'
        },
        fromAccountType: {
            '$ref': '#/components/schemas/GetAccountTransfersFromAccountType'
        },
        fromClient: {
            '$ref': '#/components/schemas/GetAccountTransfersFromClientOptions'
        },
        fromOffice: {
            '$ref': '#/components/schemas/GetAccountTransfersPageItemsFromOffice'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        reversed: {
            type: 'boolean',
            example: false
        },
        toAccount: {
            '$ref': '#/components/schemas/GetAccountTransfersPageItemsFromAccount'
        },
        toAccountType: {
            '$ref': '#/components/schemas/GetAccountTransfersPageItemsToAccountType'
        },
        toClient: {
            '$ref': '#/components/schemas/GetAccountTransfersFromClientOptions'
        },
        toOffice: {
            '$ref': '#/components/schemas/GetAccountTransfersPageItemsFromOffice'
        },
        transferAmount: {
            type: 'number',
            format: 'float',
            example: 200
        },
        transferDate: {
            type: 'string',
            format: 'date'
        },
        transferDescription: {
            type: 'string',
            example: 'pay off loan from savings.'
        }
    }
} as const;

export const $GetAccountTransfersPageItemsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetAccountTransfersPageItemsFromAccount = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetAccountTransfersPageItemsFromOffice = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'HO'
        }
    }
} as const;

export const $GetAccountTransfersPageItemsToAccountType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.loan'
        },
        description: {
            type: 'string',
            example: 'Loan Account'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetAccountTransfersResponse = {
    type: 'object',
    description: 'GetAccountTransfersResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountTransfersPageItems'
            },
            uniqueItems: true
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 4
        }
    }
} as const;

export const $GetAccountTransfersStatus = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'clientStatusType.active'
        },
        description: {
            type: 'string',
            example: 'Active'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 300
        }
    }
} as const;

export const $GetAccountTransfersTemplateRefundByTransferCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetAccountTransfersTemplateRefundByTransferFromAccount = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        amtForTransfer: {
            type: 'number',
            format: 'float',
            example: 130
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'Daniel Owusu'
        },
        currency: {
            '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferCurrency'
        },
        fieldOfficerId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'CTRL'
        }
    }
} as const;

export const $GetAccountTransfersTemplateRefundByTransferFromAccountOptions = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'Daniel Owusu'
        },
        currency: {
            '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferCurrency'
        },
        fieldOfficerId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'CTRL'
        }
    }
} as const;

export const $GetAccountTransfersTemplateRefundByTransferFromClient = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        activationDate: {
            type: 'string',
            format: 'date'
        },
        active: {
            type: 'boolean',
            example: true
        },
        clientClassification: {
            '$ref': '#/components/schemas/GetAccountTransfersClientClassification'
        },
        clientType: {
            '$ref': '#/components/schemas/GetAccountTransfersClientType'
        },
        displayName: {
            type: 'string',
            example: 'Daniel Owusu'
        },
        firstname: {
            type: 'string',
            example: 'Daniel'
        },
        gender: {
            '$ref': '#/components/schemas/GetAccountTransfersGender'
        },
        groups: {
            '$ref': '#/components/schemas/GetAccountTransfersGroups'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        lastname: {
            type: 'string',
            example: 'Owusu'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        status: {
            '$ref': '#/components/schemas/GetAccountTransfersStatus'
        },
        timeline: {
            '$ref': '#/components/schemas/GetAccountTransfersTimeline'
        }
    }
} as const;

export const $GetAccountTransfersTemplateRefundByTransferFromClientOptions = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            example: 'Daniel Owusu'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetAccountTransfersTemplateRefundByTransferFromOffice = {
    type: 'object',
    properties: {
        externalId: {
            type: 'string',
            example: '1'
        },
        hierarchy: {
            type: 'string',
            example: '.'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Head Office'
        },
        nameDecorated: {
            type: 'string',
            example: 'Head Office'
        },
        openingDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetAccountTransfersTemplateRefundByTransferFromOfficeOptions = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Head Office'
        },
        nameDecorated: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetAccountTransfersTemplateRefundByTransferResponse = {
    type: 'object',
    description: 'GetAccountTransfersTemplateRefundByTransferResponse',
    properties: {
        currency: {
            '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferCurrency'
        },
        fromAccount: {
            '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferFromAccount'
        },
        fromAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferFromAccountOptions'
            },
            uniqueItems: true
        },
        fromAccountType: {
            '$ref': '#/components/schemas/GetAccountTransfersPageItemsToAccountType'
        },
        fromAccountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountTransfersFromAccountType'
            },
            uniqueItems: true
        },
        fromClient: {
            '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferFromClient'
        },
        fromClientOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferFromClientOptions'
            },
            uniqueItems: true
        },
        fromOffice: {
            '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferFromOffice'
        },
        fromOfficeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferFromOfficeOptions'
            },
            uniqueItems: true
        },
        toAccount: {
            '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferToAccount'
        },
        toAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferToAccount'
            },
            uniqueItems: true
        },
        toAccountType: {
            '$ref': '#/components/schemas/GetAccountTransfersFromAccountType'
        },
        toAccountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountTransfersFromAccountType'
            },
            uniqueItems: true
        },
        toClient: {
            '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferToClient'
        },
        toClientOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferFromClientOptions'
            },
            uniqueItems: true
        },
        toOffice: {
            '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferFromOffice'
        },
        toOfficeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferFromOfficeOptions'
            },
            uniqueItems: true
        },
        transferAmount: {
            type: 'number',
            format: 'float',
            example: 130
        },
        transferDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetAccountTransfersTemplateRefundByTransferToAccount = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'Daniel Owusu'
        },
        currency: {
            '$ref': '#/components/schemas/GetAccountTransfersTemplateRefundByTransferCurrency'
        },
        fieldOfficerId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'TEST'
        }
    }
} as const;

export const $GetAccountTransfersTemplateRefundByTransferToClient = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            example: 'Daniel Owusu'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetAccountTransfersTemplateResponse = {
    type: 'object',
    description: 'GetAccountTransfersTemplateResponse',
    properties: {
        fromAccountType: {
            '$ref': '#/components/schemas/GetAccountTransfersFromAccountType'
        },
        fromAccountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountTransfersFromAccountTypeOptions'
            },
            uniqueItems: true
        },
        fromClientOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountTransfersFromClientOptions'
            },
            uniqueItems: true
        },
        fromOffice: {
            '$ref': '#/components/schemas/GetAccountTransfersFromOffice'
        },
        fromOfficeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountTransfersFromOfficeOptions'
            },
            uniqueItems: true
        },
        toAccountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountTransfersToAccountTypeOptions'
            },
            uniqueItems: true
        },
        toOfficeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountTransfersToOfficeOptions'
            },
            uniqueItems: true
        },
        transferAmount: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        transferDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetAccountTransfersTimeline = {
    type: 'object',
    properties: {
        activatedByFirstname: {
            type: 'string',
            example: 'App'
        },
        activatedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        activatedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        activatedOnDate: {
            type: 'string',
            format: 'date'
        },
        submittedByFirstname: {
            type: 'string',
            example: 'App'
        },
        submittedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        submittedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetAccountTransfersToAccountTypeOptions = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.savings'
        },
        description: {
            type: 'string',
            example: 'Savings Account'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetAccountTransfersToOfficeOptions = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'HO'
        },
        nameDecorated: {
            type: 'string',
            example: 'HO'
        }
    }
} as const;

export const $GetAccountingMappingOptions = {
    type: 'object'
} as const;

export const $GetAccountsChargeCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeCalculationType.flat'
        },
        description: {
            type: 'string',
            example: 'Flat'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetAccountsChargeTimeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.activation'
        },
        description: {
            type: 'string',
            example: 'Share Account Activate'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 13
        }
    }
} as const;

export const $GetAccountsCharges = {
    type: 'object',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        amount: {
            type: 'number',
            format: 'float',
            example: 1
        },
        amountOrPercentage: {
            type: 'number',
            format: 'float',
            example: 1
        },
        amountOutstanding: {
            type: 'number',
            format: 'float',
            example: 0
        },
        amountPaid: {
            type: 'number',
            format: 'float',
            example: 1
        },
        amountPercentageAppliedTo: {
            type: 'number',
            format: 'double',
            example: 0
        },
        amountWaived: {
            type: 'number',
            format: 'float',
            example: 0
        },
        amountWrittenOff: {
            type: 'number',
            format: 'float',
            example: 0
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetAccountsChargeCalculationType'
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 20
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetAccountsChargeTimeType'
        },
        currency: {
            '$ref': '#/components/schemas/GetAccountsChargesCurrency'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 9
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Share Account Activation Flat'
        },
        percentage: {
            type: 'number',
            format: 'double',
            example: 0
        }
    }
} as const;

export const $GetAccountsChargesCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetAccountsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetAccountsLinkedToPocketResponse = {
    type: 'object',
    description: 'GetAccountsLinkedToPocketResponse',
    properties: {
        loanAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetPocketLoanAccounts'
            },
            uniqueItems: true
        },
        savingAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetPocketSavingAccounts'
            },
            uniqueItems: true
        },
        shareAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetPocketShareAccounts'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetAccountsLockPeriodTypeEnum = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.lockin.sharePeriodFrequencyType.days'
        },
        description: {
            type: 'string',
            example: 'Days'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetAccountsPageItems = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'Client Name'
        },
        currency: {
            '$ref': '#/components/schemas/GetAccountsChargesCurrency'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'Share Product Name'
        },
        purchasedShares: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountsTypePurchasedShares'
            },
            uniqueItems: true
        },
        status: {
            '$ref': '#/components/schemas/GetAccountsTypeStatus'
        },
        summary: {
            '$ref': '#/components/schemas/GetAccountsTypeSummary'
        },
        timeline: {
            '$ref': '#/components/schemas/GetAccountsTypeTimeline'
        }
    }
} as const;

export const $GetAccountsPurchasedShares = {
    type: 'object',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        amount: {
            type: 'number',
            format: 'double',
            example: 5.05
        },
        amountPaid: {
            type: 'number',
            format: 'double',
            example: 5.05
        },
        chargeAmount: {
            type: 'number',
            format: 'double',
            example: 0.05
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 6
        },
        numberOfShares: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        purchasedDate: {
            type: 'string',
            format: 'date'
        },
        purchasedPrice: {
            type: 'number',
            format: 'double',
            example: 0.5
        },
        status: {
            '$ref': '#/components/schemas/GetAccountsPurchasedSharesStatus'
        },
        type: {
            '$ref': '#/components/schemas/GetAccountsPurchasedSharesType'
        }
    }
} as const;

export const $GetAccountsPurchasedSharesStatus = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'purchasedSharesStatusType.approved'
        },
        description: {
            type: 'string',
            example: 'Approved'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 300
        }
    }
} as const;

export const $GetAccountsPurchasedSharesType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'purchasedSharesType.purchased'
        },
        description: {
            type: 'string',
            example: 'Purchase'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 500
        }
    }
} as const;

export const $GetAccountsStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        approved: {
            type: 'boolean',
            example: false
        },
        closed: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'shareAccountStatusType.active'
        },
        description: {
            type: 'string',
            example: 'Active'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 300
        },
        rejected: {
            type: 'boolean',
            example: false
        },
        submittedAndPendingApproval: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetAccountsSummary = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        currency: {
            '$ref': '#/components/schemas/GetAccountsCurrency'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'Conflux Share Product'
        },
        status: {
            '$ref': '#/components/schemas/GetAccountsStatus'
        },
        timeline: {
            '$ref': '#/components/schemas/GetAccountsTimeline'
        },
        totalApprovedShares: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        totalPendingForApprovalShares: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetAccountsTimeline = {
    type: 'object',
    properties: {
        activatedDate: {
            type: 'string',
            format: 'date'
        },
        approvedByFirstname: {
            type: 'string',
            example: 'App'
        },
        approvedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        approvedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        approvedDate: {
            type: 'string',
            format: 'date'
        },
        submittedByFirstname: {
            type: 'string',
            example: 'App'
        },
        submittedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        submittedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetAccountsTypeAccountIdResponse = {
    type: 'object',
    description: 'GetAccountsTypeAccountIdResponse',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        allowDividendCalculationForInactiveClients: {
            type: 'boolean',
            example: true
        },
        charges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountsCharges'
            },
            uniqueItems: true
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 7
        },
        clientName: {
            type: 'string',
            example: 'Client_FirstName_2KX8C Client_LastName_NWNG'
        },
        currency: {
            '$ref': '#/components/schemas/GetAccountsCurrency'
        },
        currentMarketPrice: {
            type: 'integer',
            format: 'int32',
            example: 5
        },
        dividends: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        lockPeriodTypeEnum: {
            '$ref': '#/components/schemas/GetAccountsLockPeriodTypeEnum'
        },
        lockinPeriod: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        minimumActivePeriod: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        minimumActivePeriodTypeEnum: {
            '$ref': '#/components/schemas/GetAccountsLockPeriodTypeEnum'
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'Share Product'
        },
        purchasedShares: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountsPurchasedShares'
            },
            uniqueItems: true
        },
        savingsAccountId: {
            type: 'integer',
            format: 'int64',
            example: 13
        },
        savingsAccountNumber: {
            type: 'integer',
            format: 'int64',
            example: 13
        },
        status: {
            '$ref': '#/components/schemas/GetAccountsStatus'
        },
        summary: {
            '$ref': '#/components/schemas/GetAccountsSummary'
        },
        timeline: {
            '$ref': '#/components/schemas/GetAccountsTimeline'
        }
    }
} as const;

export const $GetAccountsTypeProductOptions = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Share Product'
        },
        shortName: {
            type: 'string',
            example: 'SP'
        },
        totalShares: {
            type: 'integer',
            format: 'int64',
            example: 100
        }
    }
} as const;

export const $GetAccountsTypePurchasedShares = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        numberOfShares: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        purchasedDate: {
            type: 'string',
            example: '01 May 2013'
        },
        purchasedPrice: {
            type: 'integer',
            format: 'int32',
            example: 5
        }
    }
} as const;

export const $GetAccountsTypeResponse = {
    type: 'object',
    description: 'GetAccountsTypeResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountsPageItems'
            },
            uniqueItems: true
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetAccountsTypeStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        approved: {
            type: 'boolean',
            example: false
        },
        closed: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'shareAccountStatusType.submitted.and.pending.approval'
        },
        description: {
            type: 'string',
            example: 'Submitted and pending approval'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 100
        },
        rejected: {
            type: 'boolean',
            example: false
        },
        submittedAndPendingApproval: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetAccountsTypeSummary = {
    type: 'object',
    properties: {
        currency: {
            '$ref': '#/components/schemas/GetAccountsChargesCurrency'
        }
    }
} as const;

export const $GetAccountsTypeTemplateResponse = {
    type: 'object',
    description: 'GetAccountsTypeTemplateResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 7
        },
        clientName: {
            type: 'string',
            example: 'Client Name'
        },
        productOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetAccountsTypeProductOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetAccountsTypeTimeline = {
    type: 'object',
    properties: {
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetAssetType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.asset'
        },
        description: {
            type: 'string',
            example: 'ASSET'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetCentersAccountType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.group'
        },
        description: {
            type: 'string',
            example: 'Group'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetCentersCenterIdAccountsResponse = {
    type: 'object',
    description: 'GetCentersCenterIdAccountsResponse',
    properties: {
        savingsAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetCentersSavingsAccounts'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetCentersCenterIdCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetCentersCenterIdResponse = {
    type: 'object',
    description: 'GetCentersCenterIdResponse',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        hierarchy: {
            type: 'string',
            example: '.8.'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 8
        },
        name: {
            type: 'string',
            example: 'First Center (No groups)'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        status: {
            '$ref': '#/components/schemas/GetCentersStatus'
        }
    }
} as const;

export const $GetCentersCenterIdStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        approved: {
            type: 'boolean',
            example: false
        },
        closed: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'savingsAccountStatusType.submitted.and.pending.approval'
        },
        description: {
            type: 'string',
            example: 'Submitted and pending approval'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 100
        },
        prematureClosed: {
            type: 'boolean',
            example: false
        },
        rejected: {
            type: 'boolean',
            example: false
        },
        submittedAndPendingApproval: {
            type: 'boolean',
            example: true
        },
        transferInProgress: {
            type: 'boolean',
            example: false
        },
        transferOnHold: {
            type: 'boolean',
            example: false
        },
        withdrawnByApplicant: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetCentersDepositType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'depositAccountType.savingsDeposit'
        },
        description: {
            type: 'string',
            example: 'Savings'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 100
        }
    }
} as const;

export const $GetCentersOfficeOptions = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Head Office'
        },
        nameDecorated: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetCentersPageItems = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        hierarchy: {
            type: 'string',
            example: '.2.'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        name: {
            type: 'string',
            example: 'Center 1'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        status: {
            '$ref': '#/components/schemas/GetCentersStatus'
        }
    }
} as const;

export const $GetCentersResponse = {
    type: 'object',
    description: 'GetCentersResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetCentersPageItems'
            },
            uniqueItems: true
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetCentersSavingsAccounts = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 16
        },
        accountType: {
            '$ref': '#/components/schemas/GetCentersAccountType'
        },
        currency: {
            '$ref': '#/components/schemas/GetCentersCenterIdCurrency'
        },
        depositType: {
            '$ref': '#/components/schemas/GetCentersDepositType'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 16
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'Voluntary savings'
        },
        status: {
            '$ref': '#/components/schemas/GetCentersCenterIdStatus'
        },
        timeline: {
            '$ref': '#/components/schemas/GetCentersTimeline'
        }
    }
} as const;

export const $GetCentersStaffOptions = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            example: 'D, Mary'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetCentersStatus = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'groupingStatusType.pending'
        },
        description: {
            type: 'string',
            example: 'Pending'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 100
        }
    }
} as const;

export const $GetCentersTemplateResponse = {
    type: 'object',
    description: 'GetCentersTemplateResponse',
    properties: {
        activationDate: {
            type: 'string',
            format: 'date'
        },
        active: {
            type: 'boolean',
            example: false
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        officeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetCentersOfficeOptions'
            },
            uniqueItems: true
        },
        staffOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetCentersStaffOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetCentersTimeline = {
    type: 'object',
    properties: {
        submittedByFirstname: {
            type: 'string',
            example: 'App'
        },
        submittedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        submittedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetChargeAppliesTo = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeAppliesTo.shares'
        },
        description: {
            type: 'string',
            example: 'Shares'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $GetChargeCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeCalculationType.flat'
        },
        description: {
            type: 'string',
            example: 'Flat'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetChargeOffReasonToExpenseAccountMappings = {
    type: 'object',
    properties: {
        chargeOffReasonCodeValue: {
            '$ref': '#/components/schemas/GetCodeValueData'
        },
        expenseAccount: {
            '$ref': '#/components/schemas/GetGLAccountData'
        }
    }
} as const;

export const $GetChargePaymentMode = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargepaymentmode.regular'
        },
        description: {
            type: 'string',
            example: 'Regular'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetChargeTimeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.activation'
        },
        description: {
            type: 'string',
            example: 'Share Account Activate'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 13
        }
    }
} as const;

export const $GetChargesAppliesTo = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeAppliesTo.savings'
        },
        description: {
            type: 'string',
            example: 'Savings'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetChargesAppliesToResponse = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeAppliesTo.loan'
        },
        description: {
            type: 'string',
            example: 'Loan'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetChargesCalculationTypeResponse = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeCalculationType.flat'
        },
        description: {
            type: 'string',
            example: 'Flat'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetChargesChargeCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeCalculationType.flat'
        },
        description: {
            type: 'string',
            example: 'Flat'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetChargesChargeTimeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.specifiedDueDate'
        },
        description: {
            type: 'string',
            example: 'Specified due date'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetChargesCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetChargesCurrencyResponse = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetChargesPaymentModeResponse = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargepaymentmode.accounttransfer'
        },
        description: {
            type: 'string',
            example: 'Account Transfer'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetChargesResponse = {
    type: 'object',
    description: 'GetChargesResponse',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        amount: {
            type: 'number',
            format: 'double',
            example: 230.56
        },
        chargeAppliesTo: {
            '$ref': '#/components/schemas/GetChargesAppliesToResponse'
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetChargesCalculationTypeResponse'
        },
        chargePaymentMode: {
            '$ref': '#/components/schemas/GetChargesPaymentModeResponse'
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetChargesTimeTypeResponse'
        },
        currency: {
            '$ref': '#/components/schemas/GetChargesCurrencyResponse'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        maxCap: {
            type: 'number'
        },
        minCap: {
            type: 'number'
        },
        name: {
            type: 'string',
            example: 'Loan Service fee'
        },
        penalty: {
            type: 'boolean',
            example: false
        },
        taxGroup: {
            '$ref': '#/components/schemas/GetChargesTaxGroup'
        }
    }
} as const;

export const $GetChargesTaxGroup = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'tax'
        }
    }
} as const;

export const $GetChargesTimeTypeResponse = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.disbursement'
        },
        description: {
            type: 'string',
            example: 'Disbursement'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetClientChargeCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeCalculationType.flat'
        },
        description: {
            type: 'string',
            example: 'Flat'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetClientChargeCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetClientChargeTimeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.specifiedDueDate'
        },
        description: {
            type: 'string',
            example: 'Specified due date'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetClientIdProductIdAccountingMappings = {
    type: 'object',
    properties: {
        ShareEquityId: {
            '$ref': '#/components/schemas/GetShareAccountsShareEquityId'
        },
        incomeFromFeeAccountId: {
            '$ref': '#/components/schemas/GetShareAccountsIncomeFromFeeAccountId'
        },
        shareReferenceId: {
            '$ref': '#/components/schemas/GetShareAccountsShareReferenceId'
        },
        shareSuspenseId: {
            '$ref': '#/components/schemas/GetShareAccountsShareSuspenseId'
        }
    }
} as const;

export const $GetClientIdProductIdChargeOptions = {
    type: 'object',
    properties: {
        chargeOptions: {
            '$ref': '#/components/schemas/GetShareAccountsChargeOptions'
        }
    }
} as const;

export const $GetClientIdProductIdLockinPeriodFrequencyTypeOptions = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'shares.lockin.sharePeriodFrequencyType.days'
        },
        description: {
            type: 'integer',
            format: 'int32'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetClientIdProductIdMinimumActivePeriodFrequencyTypeOptions = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'shares.lockin.sharePeriodFrequencyType.days'
        },
        description: {
            type: 'integer',
            format: 'int32'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetClientIdProductIdProductOptions = {
    type: 'object',
    properties: {
        accountingMappingOptions: {
            '$ref': '#/components/schemas/GetAccountingMappingOptions'
        },
        accountingMappings: {
            '$ref': '#/components/schemas/GetClientIdProductIdAccountingMappings'
        },
        accountingRule: {
            '$ref': '#/components/schemas/GetShareAccountsClientIdProductIdAccountingRule'
        },
        allowDividendCalculationForInactiveClients: {
            type: 'boolean',
            example: false
        },
        chargeOptions: {
            '$ref': '#/components/schemas/GetShareAccountsChargeOptions'
        },
        charges: {
            type: 'string',
            example: '[]'
        },
        currency: {
            '$ref': '#/components/schemas/GetShareAccountsCurrency'
        },
        currencyOptions: {
            '$ref': '#/components/schemas/GetShareAccountsCurrency'
        },
        description: {
            type: 'string',
            example: 'SP1'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        lockinPeriod: {
            type: 'integer',
            format: 'int32',
            example: 50
        },
        lockinPeriodEnum: {
            '$ref': '#/components/schemas/GetShareAccountsClientIdProductIdLockPeriodTypeEnum'
        },
        lockinPeriodFrequencyTypeOptions: {
            '$ref': '#/components/schemas/GetClientIdProductIdLockinPeriodFrequencyTypeOptions'
        },
        marketPrice: {
            type: 'string',
            example: '[]'
        },
        maximumShares: {
            type: 'integer',
            format: 'int32',
            example: 500
        },
        minimumActivePeriod: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        minimumActivePeriodForDividendsTypeEnum: {
            '$ref': '#/components/schemas/GetShareAccountsClientIdProductIdMinimumActivePeriodForDividendsTypeEnum'
        },
        minimumActivePeriodFrequencyTypeOptions: {
            '$ref': '#/components/schemas/GetClientIdProductIdMinimumActivePeriodFrequencyTypeOptions'
        },
        minimumShares: {
            type: 'integer',
            format: 'int32',
            example: 8
        },
        name: {
            type: 'string',
            example: 'SP'
        },
        norminalShares: {
            type: 'integer',
            format: 'int32',
            example: 500
        },
        shareCapital: {
            type: 'integer',
            format: 'int32',
            example: 900
        },
        shortName: {
            type: 'string',
            example: 'SP'
        },
        totalShares: {
            type: 'integer',
            format: 'int32',
            example: 1000
        },
        totalSharesIssued: {
            type: 'integer',
            format: 'int32',
            example: 900
        },
        unitPrice: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetClientObligeeDetailsResponse = {
    type: 'object',
    description: 'GetClientObligeeDetailsResponse',
    properties: {
        obligees: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetObligeeData'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetClientStatus = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'clientStatusType.pending'
        },
        description: {
            type: 'string',
            example: 'Pending'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 100
        }
    }
} as const;

export const $GetClientTransactionsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetClientTransferProposalDateResponse = {
    type: 'object',
    description: 'GetClientTransferProposalDateResponse',
    properties: {
        proposedTransferDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetClientsChargesPageItems = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            example: 100
        },
        amountOutstanding: {
            type: 'number',
            example: 0
        },
        amountPaid: {
            type: 'number',
            example: 0
        },
        amountWaived: {
            type: 'number',
            example: 100
        },
        amountWrittenOff: {
            type: 'number',
            example: 0
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetClientChargeCalculationType'
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 5
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetClientChargeTimeType'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        currency: {
            '$ref': '#/components/schemas/GetClientChargeCurrency'
        },
        dueDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        isPaid: {
            type: 'boolean',
            example: false
        },
        isWaived: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Client Fee 1'
        },
        penalty: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetClientsClientIdAccountsResponse = {
    type: 'object',
    description: 'GetClientsClientIdAccountsResponse',
    properties: {
        loanAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetClientsLoanAccounts'
            },
            uniqueItems: true
        },
        savingsAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetClientsSavingsAccounts'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetClientsClientIdChargesResponse = {
    type: 'object',
    description: 'GetClientsClientIdChargesResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetClientsChargesPageItems'
            },
            uniqueItems: true
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 4
        }
    }
} as const;

export const $GetClientsClientIdIdentifiersResponse = {
    type: 'object',
    description: 'GetClientsClientIdIdentifiersResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        description: {
            type: 'string',
            example: 'Issued in the year 2--7'
        },
        documentKey: {
            type: 'string',
            example: '12345'
        },
        documentType: {
            '$ref': '#/components/schemas/GetClientsDocumentType'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetClientsClientIdResponse = {
    type: 'object',
    description: 'GetClientsClientIdResponse',
    properties: {
        accountNo: {
            type: 'string',
            example: '000000027'
        },
        activationDate: {
            type: 'string',
            format: 'date'
        },
        active: {
            type: 'boolean',
            example: true
        },
        displayName: {
            type: 'string',
            example: 'savings test'
        },
        emailAddress: {
            type: 'string',
            example: 'test@test.com'
        },
        externalId: {
            type: 'string',
            example: '123'
        },
        firstname: {
            type: 'string',
            example: 'savings'
        },
        groups: {
            type: 'array',
            example: [],
            items: {
                '$ref': '#/components/schemas/GetClientsGroups'
            }
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 27
        },
        lastname: {
            type: 'string',
            example: 'test'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        savingsProductId: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        savingsProductName: {
            type: 'string',
            example: 'account overdraft'
        },
        status: {
            '$ref': '#/components/schemas/GetClientsClientIdStatus'
        },
        timeline: {
            '$ref': '#/components/schemas/GetClientsTimeline'
        }
    }
} as const;

export const $GetClientsClientIdStatus = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'clientStatusType.active'
        },
        description: {
            type: 'string',
            example: 'Active'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 300
        }
    }
} as const;

export const $GetClientsClientIdTransactionsResponse = {
    type: 'object',
    description: 'GetClientsClientIdTransactionsResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetClientsPageItems'
            },
            uniqueItems: true
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 20
        }
    }
} as const;

export const $GetClientsClientIdTransactionsTransactionIdResponse = {
    type: 'object',
    description: 'GetClientsClientIdTransactionsTransactionIdResponse',
    properties: {
        amount: {
            type: 'number',
            example: 60
        },
        currency: {
            '$ref': '#/components/schemas/GetClientTransactionsCurrency'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        reversed: {
            type: 'boolean',
            example: true
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        type: {
            '$ref': '#/components/schemas/GetClientsClientIdTransactionsType'
        }
    }
} as const;

export const $GetClientsClientIdTransactionsType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'clientTransactionType.payCharge'
        },
        description: {
            type: 'string',
            example: 'PAY_CHARGE'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetClientsColumnHeaderData = {
    type: 'object',
    properties: {
        columnDisplayType: {
            type: 'string',
            example: 'INTEGER'
        },
        columnLength: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        columnName: {
            type: 'string',
            example: 'client_id'
        },
        columnType: {
            type: 'string',
            example: 'bigint'
        },
        columnValues: {
            type: 'array',
            example: [],
            items: {
                type: 'string',
                example: '[]'
            }
        },
        isColumnNullable: {
            type: 'boolean',
            example: false
        },
        isColumnPrimaryKey: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetClientsDataTables = {
    type: 'object',
    properties: {
        applicationTableName: {
            type: 'string',
            example: 'm_client'
        },
        columnHeaderData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetClientsColumnHeaderData'
            },
            uniqueItems: true
        },
        registeredTableName: {
            type: 'string',
            example: 'Address Details'
        }
    }
} as const;

export const $GetClientsDocumentType = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        name: {
            type: 'string',
            example: 'Drivers License'
        }
    }
} as const;

export const $GetClientsGroups = {
    type: 'object',
    example: [],
    properties: {
        accountNo: {
            type: 'string',
            example: '000000002'
        },
        externalId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Group name'
        }
    }
} as const;

export const $GetClientsLoanAccounts = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'string',
            example: '000000001'
        },
        currency: {
            '$ref': '#/components/schemas/GetClientsLoansAccountsCurrency'
        },
        externalId: {
            type: 'string',
            example: '456'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanCycle: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        loanType: {
            '$ref': '#/components/schemas/GetClientsLoanAccountsType'
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'TestOne'
        },
        status: {
            '$ref': '#/components/schemas/GetClientsLoanAccountsStatus'
        }
    }
} as const;

export const $GetClientsLoanAccountsStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        closed: {
            type: 'boolean',
            example: false
        },
        closedObligationsMet: {
            type: 'boolean',
            example: false
        },
        closedRescheduled: {
            type: 'boolean',
            example: false
        },
        closedWrittenOff: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'loanStatusType.active'
        },
        description: {
            type: 'string',
            example: 'Active'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 300
        },
        overpaid: {
            type: 'boolean',
            example: false
        },
        pendingApproval: {
            type: 'boolean',
            example: false
        },
        waitingForDisbursal: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetClientsLoanAccountsType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'loanType.individual'
        },
        description: {
            type: 'string',
            example: 'Individual'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetClientsLoansAccountsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetClientsOfficeOptions = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Head Office'
        },
        nameDecorated: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetClientsPageItems = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            format: 'double',
            example: 22
        },
        currency: {
            '$ref': '#/components/schemas/GetClientTransactionsCurrency'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 226
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        reversed: {
            type: 'boolean',
            example: false
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        type: {
            '$ref': '#/components/schemas/GetClientsClientIdTransactionsType'
        }
    }
} as const;

export const $GetClientsPageItemsResponse = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'string',
            example: '000000002'
        },
        active: {
            type: 'boolean',
            example: false
        },
        displayName: {
            type: 'string',
            example: 'Home Farm Produce'
        },
        emailAddress: {
            type: 'string',
            example: 'test@test.com'
        },
        fullname: {
            type: 'string',
            example: 'Home Farm Produce'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        status: {
            '$ref': '#/components/schemas/GetClientStatus'
        }
    }
} as const;

export const $GetClientsResponse = {
    type: 'object',
    description: 'GetClientsResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetClientsPageItemsResponse'
            }
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetClientsSavingProductOptions = {
    type: 'object',
    properties: {
        allowOverdraft: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        name: {
            type: 'string',
            example: 'account overdraft'
        },
        withdrawalFeeForTransfers: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetClientsSavingsAccounts = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'string',
            example: '000000007'
        },
        currency: {
            '$ref': '#/components/schemas/GetClientsSavingsAccountsCurrency'
        },
        depositType: {
            '$ref': '#/components/schemas/GetClientsSavingsAccountsDepositType'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 7
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        productName: {
            type: 'string',
            example: 'Other product'
        },
        shortProductName: {
            type: 'string',
            example: 'OP'
        },
        status: {
            '$ref': '#/components/schemas/GetClientsSavingsAccountsStatus'
        }
    }
} as const;

export const $GetClientsSavingsAccountsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetClientsSavingsAccountsDepositType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'depositAccountType.savingsDeposit'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 100
        },
        value: {
            type: 'string',
            example: 'Savings'
        }
    }
} as const;

export const $GetClientsSavingsAccountsStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        approved: {
            type: 'boolean',
            example: false
        },
        closed: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'savingsAccountStatusType.submitted.and.pending.approval'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 100
        },
        matured: {
            type: 'boolean',
            example: false
        },
        prematureClosed: {
            type: 'boolean',
            example: false
        },
        rejected: {
            type: 'boolean',
            example: false
        },
        submittedAndPendingApproval: {
            type: 'boolean',
            example: true
        },
        transferInProgress: {
            type: 'boolean',
            example: false
        },
        transferOnHold: {
            type: 'boolean',
            example: false
        },
        value: {
            type: 'string',
            example: 'Submitted and pending approval'
        },
        withdrawnByApplicant: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetClientsStaffOptions = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            example: 'sjs, xyz'
        },
        firstname: {
            type: 'string',
            example: 'xyz'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        isLoanOfficer: {
            type: 'boolean',
            example: true
        },
        lastname: {
            type: 'string',
            example: 'sjs'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetClientsTemplateResponse = {
    type: 'object',
    description: 'GetClientsTemplateResponse',
    properties: {
        activationDate: {
            type: 'string',
            format: 'date'
        },
        datatables: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetClientsDataTables'
            },
            uniqueItems: true
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetClientsOfficeOptions'
            },
            uniqueItems: true
        },
        savingProductOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetClientsSavingProductOptions'
            },
            uniqueItems: true
        },
        staffOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetClientsStaffOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetClientsTimeline = {
    type: 'object',
    properties: {
        activatedByFirstname: {
            type: 'string',
            example: 'App'
        },
        activatedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        activatedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        activatedOnDate: {
            type: 'string',
            format: 'date'
        },
        submittedByFirstname: {
            type: 'string',
            example: 'App'
        },
        submittedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        submittedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetCodeValueData = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        mandatory: {
            type: 'boolean',
            example: false
        },
        name: {
            type: 'string',
            example: 'ChargeOffReasons'
        },
        position: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetCodeValuesDataResponse = {
    type: 'object',
    description: 'GetCodeValuesDataResponse',
    properties: {
        description: {
            type: 'string',
            example: 'Passport information'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Passport'
        },
        position: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetCodesResponse = {
    type: 'object',
    description: 'GetCodesResponse',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Education'
        },
        systemDefined: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetCollateralCurrencyResponse = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetCollateralTypeResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 8
        },
        name: {
            type: 'string',
            example: 'Gold'
        }
    }
} as const;

export const $GetDataTablesResponse = {
    type: 'object',
    description: 'GetDataTablesResponse',
    properties: {
        applicationTableName: {
            type: 'string',
            example: 'm_client'
        },
        columnHeaderData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResultsetColumnHeaderData'
            }
        },
        registeredTableName: {
            type: 'string',
            example: 'extra_client_details'
        }
    }
} as const;

export const $GetDelinquencyActionsResponse = {
    type: 'object',
    description: 'GetDelinquencyActionsResponse',
    properties: {
        action: {
            type: 'string',
            example: 'pause'
        },
        createdById: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        createdOn: {
            type: 'string',
            format: 'date-time'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        lastModifiedOn: {
            type: 'string',
            format: 'date-time'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        updatedById: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetDelinquencyTagHistoryResponse = {
    type: 'object',
    description: 'GetDelinquencyTagHistoryResponse',
    properties: {
        addedOnDate: {
            type: 'string',
            format: 'date'
        },
        delinquencyRange: {
            '$ref': '#/components/schemas/DelinquencyRangeData'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        liftedOnDate: {
            type: 'string',
            format: 'date'
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 10
        }
    }
} as const;

export const $GetEntityDatatableChecksResponse = {
    type: 'object',
    description: 'GetEntityDatatableChecksResponse',
    properties: {
        datatableName: {
            type: 'string'
        },
        entity: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        order: {
            type: 'integer',
            format: 'int64'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        productName: {
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        systemDefined: {
            type: 'boolean'
        }
    }
} as const;

export const $GetEntityDatatableChecksTemplateResponse = {
    type: 'object',
    description: 'GetEntityDatatableChecksTemplateResponse',
    properties: {
        datatables: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DatatableChecksData'
            }
        },
        entities: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        loanProductDatas: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductData'
            }
        },
        savingsProductDatas: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SavingsProductData'
            }
        },
        statusClient: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DatatableCheckStatusData'
            }
        },
        statusGroup: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DatatableCheckStatusData'
            }
        },
        statusLoans: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DatatableCheckStatusData'
            }
        },
        statusSavings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DatatableCheckStatusData'
            }
        }
    }
} as const;

export const $GetEquityType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.equity'
        },
        description: {
            type: 'string',
            example: 'EQUITY'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $GetFinancialActivityAccountsResponse = {
    type: 'object',
    description: 'GetFinancialActivityAccountsResponse',
    properties: {
        financialActivityData: {
            '$ref': '#/components/schemas/FinancialActivityData'
        },
        glAccountData: {
            '$ref': '#/components/schemas/GLAccountData'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetFixedDepositAccountsAccountChart = {
    type: 'object',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64',
            example: 5
        },
        accountNumber: {
            type: 'integer',
            format: 'int64'
        },
        chartSlabs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetFixedDepositAccountsChartSlabs'
            },
            uniqueItems: true
        },
        fromDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        periodTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetFixedDepositAccountsPeriodTypes'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetFixedDepositAccountsAccountChartCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetFixedDepositAccountsAccountIdCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetFixedDepositAccountsAccountIdResponse = {
    type: 'object',
    description: 'GetFixedDepositAccountsAccountIdResponse',
    properties: {
        accountChart: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsAccountChart'
        },
        accountNo: {
            type: 'integer',
            format: 'int64'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'Sangamesh N'
        },
        currency: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsAccountIdCurrency'
        },
        depositAmount: {
            type: 'number',
            format: 'float',
            example: 5000
        },
        depositPeriod: {
            type: 'integer',
            format: 'int32',
            example: 6
        },
        depositPeriodFrequency: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsDepositPeriodFrequency'
        },
        externalId: {
            type: 'string',
            example: 'FD-23'
        },
        fieldOfficerId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsInterestCalculationDaysInYearType'
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsInterestCalculationType'
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsInterestCompoundingPeriodType'
        },
        interestFreePeriodApplicable: {
            type: 'boolean',
            example: false
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsInterestPostingPeriodType'
        },
        maturityAmount: {
            type: 'number',
            format: 'float',
            example: 5140.25
        },
        maturityDate: {
            type: 'string',
            format: 'date'
        },
        maxDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 4
        },
        maxDepositTermType: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsMaxDepositTermType'
        },
        minDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        minDepositTermType: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsMinDepositTermType'
        },
        preClosurePenalApplicable: {
            type: 'boolean',
            example: false
        },
        savingsProductId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        savingsProductName: {
            type: 'string',
            example: 'FD01'
        },
        status: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsStatus'
        },
        summary: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsAccountIdSummary'
        },
        timeline: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsTimeline'
        }
    }
} as const;

export const $GetFixedDepositAccountsAccountIdSummary = {
    type: 'object',
    properties: {
        accountBalance: {
            type: 'number',
            format: 'float',
            example: 0
        },
        currency: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsAccountIdCurrency'
        }
    }
} as const;

export const $GetFixedDepositAccountsChartSlabs = {
    type: 'object',
    properties: {
        annualInterestRate: {
            type: 'number',
            format: 'double',
            example: 5.5
        },
        currency: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsAccountChartCurrency'
        },
        fromPeriod: {
            type: 'integer',
            format: 'int32',
            example: 181
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 13
        },
        periodType: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsPeriodType'
        },
        toPeriod: {
            type: 'integer',
            format: 'int32',
            example: 365
        }
    }
} as const;

export const $GetFixedDepositAccountsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetFixedDepositAccountsDepositPeriodFrequency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'deposit.period.savingsPeriodFrequencyType.months'
        },
        description: {
            type: 'string',
            example: 'Months'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetFixedDepositAccountsInterestCalculationDaysInYearType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsInterestCalculationDaysInYearType.days365'
        },
        description: {
            type: 'string',
            example: '365 Days'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 365
        }
    }
} as const;

export const $GetFixedDepositAccountsInterestCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsInterestCalculationType.dailybalance'
        },
        description: {
            type: 'string',
            example: 'Daily Balance'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetFixedDepositAccountsInterestCompoundingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.period.savingsCompoundingInterestPeriodType.monthly'
        },
        description: {
            type: 'string',
            example: 'Monthly'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $GetFixedDepositAccountsInterestPostingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.posting.period.savingsPostingInterestPeriodType.monthly'
        },
        description: {
            type: 'string',
            example: 'Monthly'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $GetFixedDepositAccountsMaxDepositTermType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'deposit.term.savingsPeriodFrequencyType.years'
        },
        description: {
            type: 'string',
            example: 'Years'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $GetFixedDepositAccountsMinDepositTermType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'deposit.term.savingsPeriodFrequencyType.months'
        },
        description: {
            type: 'string',
            example: 'Months'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetFixedDepositAccountsPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestChartPeriodType.days'
        },
        description: {
            type: 'string',
            example: 'Days'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetFixedDepositAccountsPeriodTypes = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestChartPeriodType.days'
        },
        description: {
            type: 'string',
            example: 'Days'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetFixedDepositAccountsProductOptions = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Passbook Savings'
        }
    }
} as const;

export const $GetFixedDepositAccountsResponse = {
    type: 'object',
    description: 'GetFixedDepositAccountsResponse',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'Sangamesh N'
        },
        currency: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsCurrency'
        },
        depositAmount: {
            type: 'number',
            format: 'float',
            example: 5000
        },
        depositPeriod: {
            type: 'integer',
            format: 'int32',
            example: 6
        },
        depositPeriodFrequency: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsDepositPeriodFrequency'
        },
        fieldOfficerId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsInterestCalculationDaysInYearType'
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsInterestCalculationType'
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsInterestCompoundingPeriodType'
        },
        interestFreePeriodApplicable: {
            type: 'boolean',
            example: false
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsInterestPostingPeriodType'
        },
        maturityAmount: {
            type: 'number',
            format: 'float',
            example: 5140.25
        },
        maturityDate: {
            type: 'string',
            format: 'date'
        },
        maxDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 4
        },
        maxDepositTermType: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsMaxDepositTermType'
        },
        minDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        minDepositTermType: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsMinDepositTermType'
        },
        preClosurePenalApplicable: {
            type: 'boolean',
            example: false
        },
        savingsProductId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        savingsProductName: {
            type: 'string',
            example: 'FD01'
        },
        status: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsStatus'
        },
        summary: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsSummary'
        },
        timeline: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsTimeline'
        }
    }
} as const;

export const $GetFixedDepositAccountsStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        approved: {
            type: 'boolean',
            example: false
        },
        closed: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'savingsAccountStatusType.submitted.and.pending.approval'
        },
        description: {
            type: 'string',
            example: 'Submitted and pending approval'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 100
        },
        prematureClosed: {
            type: 'boolean',
            example: false
        },
        rejected: {
            type: 'boolean',
            example: false
        },
        submittedAndPendingApproval: {
            type: 'boolean',
            example: true
        },
        transferInProgress: {
            type: 'boolean',
            example: false
        },
        transferOnHold: {
            type: 'boolean',
            example: false
        },
        withdrawnByApplicant: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetFixedDepositAccountsSummary = {
    type: 'object',
    properties: {
        accountBalance: {
            type: 'number',
            format: 'float',
            example: 0
        },
        currency: {
            '$ref': '#/components/schemas/GetFixedDepositAccountsCurrency'
        }
    }
} as const;

export const $GetFixedDepositAccountsTemplateResponse = {
    type: 'object',
    description: 'GetFixedDepositAccountsTemplateResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'small business'
        },
        productOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetFixedDepositAccountsProductOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetFixedDepositAccountsTimeline = {
    type: 'object',
    properties: {
        submittedByFirstname: {
            type: 'string',
            example: 'App'
        },
        submittedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        submittedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetFixedDepositProductsAccountingRule = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountingRuleType.none'
        },
        description: {
            type: 'string',
            example: 'NONE'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetFixedDepositProductsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetFixedDepositProductsGlAccount = {
    type: 'object',
    properties: {
        glCode: {
            type: 'integer',
            format: 'int32',
            example: 20
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 12
        },
        name: {
            type: 'string',
            example: 'savings ref'
        }
    }
} as const;

export const $GetFixedDepositProductsInterestCalculationDaysInYearType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsInterestCalculationDaysInYearType.days365'
        },
        description: {
            type: 'string',
            example: '365 Days'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 365
        }
    }
} as const;

export const $GetFixedDepositProductsInterestCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsInterestCalculationType.dailybalance'
        },
        description: {
            type: 'string',
            example: 'Daily Balance'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetFixedDepositProductsInterestCompoundingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.period.savingsCompoundingInterestPeriodType.monthly'
        },
        description: {
            type: 'string',
            example: 'Monthly'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $GetFixedDepositProductsInterestPostingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.posting.period.savingsPostingInterestPeriodType.monthly'
        },
        description: {
            type: 'string',
            example: 'Monthly'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $GetFixedDepositProductsMaxDepositTermType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'deposit.term.savingsPeriodFrequencyType.years'
        },
        description: {
            type: 'string',
            example: 'Years'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $GetFixedDepositProductsMinDepositTermType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'deposit.term.savingsPeriodFrequencyType.months'
        },
        description: {
            type: 'string',
            example: 'Months'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdAccountingMappings = {
    type: 'object',
    properties: {
        feeReceivableAccount: {
            '$ref': '#/components/schemas/GetFixedDepositProductsGlAccount'
        },
        incomeFromFeeAccount: {
            '$ref': '#/components/schemas/GetFixedDepositProductsGlAccount'
        },
        incomeFromPenaltyAccount: {
            '$ref': '#/components/schemas/GetFixedDepositProductsGlAccount'
        },
        interestOnSavingsAccount: {
            '$ref': '#/components/schemas/GetFixedDepositProductsGlAccount'
        },
        interestPayableAccount: {
            '$ref': '#/components/schemas/GetFixedDepositProductsGlAccount'
        },
        penaltyReceivableAccount: {
            '$ref': '#/components/schemas/GetFixedDepositProductsGlAccount'
        },
        savingsControlAccount: {
            '$ref': '#/components/schemas/GetFixedDepositProductsGlAccount'
        },
        savingsReferenceAccount: {
            '$ref': '#/components/schemas/GetFixedDepositProductsGlAccount'
        },
        transfersInSuspenseAccount: {
            '$ref': '#/components/schemas/GetFixedDepositProductsGlAccount'
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdActiveChart = {
    type: 'object',
    properties: {
        chartSlabs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetFixedDepositProductsProductIdChartSlabs'
            },
            uniqueItems: true
        },
        fromDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 8
        },
        periodTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetFixedDepositProductsProductIdPeriodType'
            },
            uniqueItems: true
        },
        savingsProductId: {
            type: 'integer',
            format: 'int64',
            example: 8
        },
        savingsProductName: {
            type: 'string',
            example: 'Fixed deposit product'
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdChartSlabs = {
    type: 'object',
    properties: {
        annualInterestRate: {
            type: 'number',
            format: 'double',
            example: 4.5
        },
        currency: {
            '$ref': '#/components/schemas/GetFixedDepositProductsProductIdCurrency'
        },
        description: {
            type: 'string',
            example: 'from 0 to 90 days'
        },
        fromPeriod: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 18
        },
        periodType: {
            '$ref': '#/components/schemas/GetFixedDepositProductsProductIdPeriodType'
        },
        toPeriod: {
            type: 'integer',
            format: 'int32',
            example: 90
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdFeeToIncomeAccountMappings = {
    type: 'object',
    properties: {
        charge: {
            '$ref': '#/components/schemas/GetFixedDepositProductsProductIdFeeToIncomeAccountMappingsCharge'
        },
        incomeAccount: {
            '$ref': '#/components/schemas/GetFixedDepositProductsProductIdFeeToIncomeAccountMappingsIncomeAccount'
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdFeeToIncomeAccountMappingsCharge = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        name: {
            type: 'string',
            example: 'sav charge'
        },
        penalty: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdFeeToIncomeAccountMappingsIncomeAccount = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: '24'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 16
        },
        name: {
            type: 'string',
            example: 'income from savings fee'
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdInterestCompoundingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.period.savingsCompoundingInterestPeriodType.daily'
        },
        description: {
            type: 'string',
            example: 'Daily'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdMaxDepositTermType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'deposit.term.savingsPeriodFrequencyType.years'
        },
        description: {
            type: 'string',
            example: 'Years'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdMinDepositTermType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'deposit.term.savingsPeriodFrequencyType.weeks'
        },
        description: {
            type: 'string',
            example: 'Weeks'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdPenaltyToIncomeAccountMappings = {
    type: 'object',
    properties: {
        charge: {
            '$ref': '#/components/schemas/GetFixedDepositProductsProductIdPenaltyToIncomeAccountMappingsCharge'
        },
        incomeAccount: {
            '$ref': '#/components/schemas/GetFixedDepositProductsGlAccount'
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdPenaltyToIncomeAccountMappingsCharge = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 12
        },
        name: {
            type: 'string',
            example: 'sav 2'
        },
        penalty: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestChartPeriodType.weeks'
        },
        description: {
            type: 'string',
            example: 'Weeks'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdPreClosurePenalInterestOnType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'preClosurePenalInterestOnType.wholeTerm'
        },
        description: {
            type: 'string',
            example: 'Whole term'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetFixedDepositProductsProductIdResponse = {
    type: 'object',
    description: 'GetFixedDepositProductsProductIdResponse',
    properties: {
        accountingMappings: {
            '$ref': '#/components/schemas/GetFixedDepositProductsProductIdAccountingMappings'
        },
        activeChart: {
            '$ref': '#/components/schemas/GetFixedDepositProductsProductIdActiveChart'
        },
        currency: {
            '$ref': '#/components/schemas/GetFixedDepositProductsProductIdCurrency'
        },
        description: {
            type: 'string',
            example: 'Daily compounding using Daily Balance, 5% per year, 365 days in year'
        },
        feeToIncomeAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetFixedDepositProductsProductIdFeeToIncomeAccountMappings'
            },
            uniqueItems: true
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/GetFixedDepositProductsInterestCalculationDaysInYearType'
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/GetFixedDepositProductsInterestCalculationType'
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/GetFixedDepositProductsProductIdInterestCompoundingPeriodType'
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/GetFixedDepositProductsInterestPostingPeriodType'
        },
        maxDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 5
        },
        maxDepositTermType: {
            '$ref': '#/components/schemas/GetFixedDepositProductsProductIdMaxDepositTermType'
        },
        minDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        minDepositTermType: {
            '$ref': '#/components/schemas/GetFixedDepositProductsProductIdMinDepositTermType'
        },
        name: {
            type: 'string',
            example: 'Fixed deposit product'
        },
        penaltyToIncomeAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetFixedDepositProductsProductIdPenaltyToIncomeAccountMappings'
            },
            uniqueItems: true
        },
        preClosurePenalApplicable: {
            type: 'boolean',
            example: true
        },
        preClosurePenalInterest: {
            type: 'number',
            format: 'double',
            example: 1.75
        },
        preClosurePenalInterestOnType: {
            '$ref': '#/components/schemas/GetFixedDepositProductsProductIdPreClosurePenalInterestOnType'
        },
        shortName: {
            type: 'string',
            example: 'FD01'
        }
    }
} as const;

export const $GetFixedDepositProductsResponse = {
    type: 'object',
    description: 'GetFixedDepositProductsResponse',
    properties: {
        accountingRule: {
            '$ref': '#/components/schemas/GetFixedDepositProductsAccountingRule'
        },
        currency: {
            '$ref': '#/components/schemas/GetFixedDepositProductsCurrency'
        },
        description: {
            type: 'string',
            example: 'FD01'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/GetFixedDepositProductsInterestCalculationDaysInYearType'
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/GetFixedDepositProductsInterestCalculationType'
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/GetFixedDepositProductsInterestCompoundingPeriodType'
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/GetFixedDepositProductsInterestPostingPeriodType'
        },
        maxDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 4
        },
        maxDepositTermType: {
            '$ref': '#/components/schemas/GetFixedDepositProductsMaxDepositTermType'
        },
        minDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        minDepositTermType: {
            '$ref': '#/components/schemas/GetFixedDepositProductsMinDepositTermType'
        },
        name: {
            type: 'string',
            example: 'FD01'
        },
        nominalAnnualInterestRate: {
            type: 'number',
            format: 'double',
            example: 0
        },
        preClosurePenalApplicable: {
            type: 'boolean',
            example: false
        },
        shortName: {
            type: 'string',
            example: 'FD01'
        }
    }
} as const;

export const $GetFloatingRatesResponse = {
    type: 'object',
    description: 'GetFloatingRatesResponse',
    properties: {
        createdBy: {
            type: 'string',
            example: 'mifos'
        },
        createdOn: {
            type: 'string',
            example: 'Nov 18, 2015'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        isBaseLendingRate: {
            type: 'boolean',
            example: true
        },
        modifiedBy: {
            type: 'string',
            example: 'mifos'
        },
        modifiedOn: {
            type: 'string',
            example: 'Nov 18, 2015'
        },
        name: {
            type: 'string',
            example: 'Floating Rate 1'
        }
    }
} as const;

export const $GetFromAccountOptions = {
    type: 'object',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        accountNo: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        accountType: {
            '$ref': '#/components/schemas/GetAccountOptions'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'ABC'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'HEAD OFFICE'
        }
    }
} as const;

export const $GetFromAccountStandingInstructionSwagger = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 14
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 14
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'savings old'
        }
    }
} as const;

export const $GetFromAccountTypeOptionsResponseStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.savings'
        },
        description: {
            type: 'string',
            example: 'Savings Account'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetFromAccountTypeResponseStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.savings'
        },
        description: {
            type: 'string',
            example: 'Savings Account'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetFromAccountTypeStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.savings'
        },
        description: {
            type: 'string',
            example: 'Savings Account'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetFromClientOptionsResponseStandingInstructionSwagger = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            example: 'Client_FirstName_2VRAG Client_LastName_9QCY'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetFromClientStandingInstructionSwagger = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            example: 'Test test'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetFromOfficeOptionsResponseStandingInstructionSwagger = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Head Office'
        },
        nameDecorated: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetFromOfficeResponseStandingInstructionSwagger = {
    type: 'object',
    properties: {
        decoratedName: {
            type: 'string',
            example: 'Head Office'
        },
        externalId: {
            type: 'string',
            example: '1'
        },
        hierarchy: {
            type: 'string',
            example: '.'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Head Office'
        },
        openingDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetFromOfficeStandingInstructionSwagger = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetGLAccountData = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: 'e4'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Written off'
        }
    }
} as const;

export const $GetGLAccountsResponse = {
    type: 'object',
    description: 'GetGLAccountsResponse',
    properties: {
        description: {
            type: 'string',
            example: 'Desc'
        },
        disabled: {
            type: 'boolean',
            example: false
        },
        glCode: {
            type: 'string',
            example: '100001'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 16
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Cash'
        },
        nameDecorated: {
            type: 'string',
            example: '....Cash'
        },
        organizationRunningBalance: {
            type: 'integer',
            format: 'int64',
            example: 118437
        },
        parentId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        tagId: {
            '$ref': '#/components/schemas/CodeValueData'
        },
        type: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        usage: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;

export const $GetGLAccountsTemplateResponse = {
    type: 'object',
    description: 'GetGLAccountsTemplateResponse',
    properties: {
        accountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        allowedAssetsTagOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        allowedEquityTagOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        allowedExpensesTagOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        allowedIncomeTagOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        allowedLiabilitiesTagOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        assetHeaderAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountData'
            }
        },
        disabled: {
            type: 'boolean',
            example: false
        },
        equityHeaderAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountData'
            }
        },
        expenseHeaderAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountData'
            }
        },
        liabilityHeaderAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountData'
            }
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        type: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        usage: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        usageOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        }
    }
} as const;

export const $GetGlAccountMapping = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: '012-34-65'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        name: {
            type: 'string',
            example: 'Cash Account'
        }
    }
} as const;

export const $GetGlClosureResponse = {
    type: 'object',
    description: 'GetGLClosureResponse',
    properties: {
        closingDate: {
            type: 'string',
            format: 'date'
        },
        comments: {
            type: 'string',
            example: 'closed'
        },
        createdByUserId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        createdByUsername: {
            type: 'string',
            example: 'mifos'
        },
        createdDate: {
            type: 'string',
            format: 'date'
        },
        deleted: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 7
        },
        lastUpdatedByUserId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        lastUpdatedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        lastUpdatedDate: {
            type: 'string',
            format: 'date'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetGlobalConfigurationsResponse = {
    type: 'object',
    description: 'GetGlobalConfigurationsResponse',
    properties: {
        globalConfiguration: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GlobalConfigurationPropertyData'
            }
        }
    }
} as const;

export const $GetGroupsGroupIdAccountsLoanAccounts = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        loanType: {
            '$ref': '#/components/schemas/GetGroupsGroupIdAccountsLoanType'
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        productName: {
            type: 'string',
            example: 'daily product'
        },
        status: {
            '$ref': '#/components/schemas/GetGroupsGroupIdAccountsStatus'
        }
    }
} as const;

export const $GetGroupsGroupIdAccountsLoanType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.group'
        },
        description: {
            type: 'string',
            example: 'Group'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetGroupsGroupIdAccountsMemberLoanAccounts = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        loanType: {
            '$ref': '#/components/schemas/GetGroupsGroupIdAccountsMemberLoanType'
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'testLoan'
        },
        status: {
            '$ref': '#/components/schemas/GetGroupsGroupIdAccountsMemberLoanStatus'
        }
    }
} as const;

export const $GetGroupsGroupIdAccountsMemberLoanStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        closed: {
            type: 'boolean',
            example: false
        },
        closedObligationsMet: {
            type: 'boolean',
            example: false
        },
        closedRescheduled: {
            type: 'boolean',
            example: false
        },
        closedWrittenOff: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'loanStatusType.approved'
        },
        description: {
            type: 'string',
            example: 'Approved'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 200
        },
        overpaid: {
            type: 'boolean',
            example: false
        },
        pendingApproval: {
            type: 'boolean',
            example: false
        },
        waitingForDisbursal: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetGroupsGroupIdAccountsMemberLoanType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.jlg'
        },
        description: {
            type: 'string',
            example: 'JLG'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $GetGroupsGroupIdAccountsMemberSavingsAccounts = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        accountType: {
            '$ref': '#/components/schemas/GetGroupsGroupIdAccountsMemberLoanType'
        },
        currency: {
            '$ref': '#/components/schemas/GetGroupsGroupIdAccountsSavingCurrency'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'p_sav'
        },
        status: {
            '$ref': '#/components/schemas/GetGroupsGroupIdAccountsSavingStatus'
        }
    }
} as const;

export const $GetGroupsGroupIdAccountsResponse = {
    type: 'object',
    description: 'GetGroupsGroupIdAccountsResponse',
    properties: {
        loanAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetGroupsGroupIdAccountsLoanAccounts'
            },
            uniqueItems: true
        },
        memberLoanAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetGroupsGroupIdAccountsMemberLoanAccounts'
            },
            uniqueItems: true
        },
        memberSavingsAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetGroupsGroupIdAccountsMemberSavingsAccounts'
            },
            uniqueItems: true
        },
        savingsAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetGroupsGroupIdAccountsSavingAccounts'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetGroupsGroupIdAccountsSavingAccountType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.group'
        },
        description: {
            type: 'string',
            example: 'Group'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetGroupsGroupIdAccountsSavingAccounts = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 9
        },
        accountType: {
            '$ref': '#/components/schemas/GetGroupsGroupIdAccountsSavingAccountType'
        },
        currency: {
            '$ref': '#/components/schemas/GetGroupsGroupIdAccountsSavingCurrency'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 9
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'p_sav'
        },
        status: {
            '$ref': '#/components/schemas/GetGroupsGroupIdAccountsSavingStatus'
        }
    }
} as const;

export const $GetGroupsGroupIdAccountsSavingCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetGroupsGroupIdAccountsSavingStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        approved: {
            type: 'boolean',
            example: false
        },
        closed: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'savingsAccountStatusType.submitted.and.pending.approval'
        },
        description: {
            type: 'string',
            example: 'Submitted and pending approval'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 100
        },
        rejected: {
            type: 'boolean',
            example: false
        },
        submittedAndPendingApproval: {
            type: 'boolean',
            example: true
        },
        withdrawnByApplicant: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetGroupsGroupIdAccountsStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        closed: {
            type: 'boolean',
            example: false
        },
        closedObligationsMet: {
            type: 'boolean',
            example: false
        },
        closedRescheduled: {
            type: 'boolean',
            example: false
        },
        closedWrittenOff: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'loanStatusType.submitted.and.pending.approval'
        },
        description: {
            type: 'string',
            example: 'Submitted and pending approval'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 100
        },
        overpaid: {
            type: 'boolean',
            example: false
        },
        pendingApproval: {
            type: 'boolean',
            example: true
        },
        waitingForDisbursal: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetGroupsGroupIdResponse = {
    type: 'object',
    description: 'GetGroupsGroupIdResponse',
    properties: {
        externalId: {
            type: 'string',
            example: '000-1A'
        },
        hierarchy: {
            type: 'string',
            example: '.1.'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'First Group'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        timeline: {
            '$ref': '#/components/schemas/GetGroupsGroupIdTimeline'
        }
    }
} as const;

export const $GetGroupsGroupIdTimeline = {
    type: 'object',
    properties: {
        activatedByFirstname: {
            type: 'string',
            example: 'App'
        },
        activatedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        activatedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        activatedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetGroupsPageItems = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        hierarchy: {
            type: 'string',
            example: '.4.'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        name: {
            type: 'string',
            example: 'AnotherGroup'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        status: {
            '$ref': '#/components/schemas/GetGroupsStatus'
        }
    }
} as const;

export const $GetGroupsResponse = {
    type: 'object',
    description: 'GetGroupsResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetGroupsPageItems'
            },
            uniqueItems: true
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetGroupsStatus = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'clientStatusType.pending'
        },
        description: {
            type: 'string',
            example: 'Pending'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 100
        }
    }
} as const;

export const $GetGroupsTemplateClientOptions = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            example: 'Petra Yton'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetGroupsTemplateColumnHeaderData = {
    type: 'object',
    properties: {
        columnDisplayType: {
            type: 'string',
            example: 'INTEGER'
        },
        columnLength: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        columnName: {
            type: 'string',
            example: 'group_id'
        },
        columnType: {
            type: 'string',
            example: 'bigint'
        },
        columnValues: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetGroupsTemplateColumnValues'
            },
            uniqueItems: true
        },
        isColumnNullable: {
            type: 'boolean',
            example: false
        },
        isColumnPrimaryKey: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetGroupsTemplateColumnValues = {
    type: 'object'
} as const;

export const $GetGroupsTemplateDatatables = {
    type: 'object',
    properties: {
        applicationTableName: {
            type: 'string',
            example: 'm_group'
        },
        columnHeaderData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetGroupsTemplateColumnHeaderData'
            },
            uniqueItems: true
        },
        registeredTableName: {
            type: 'string',
            example: 'Group Activation Data'
        }
    }
} as const;

export const $GetGroupsTemplateOfficeOptions = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Head Office'
        },
        nameDecorated: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetGroupsTemplateResponse = {
    type: 'object',
    description: 'GetGroupsTemplateResponse',
    properties: {
        clientOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetGroupsTemplateClientOptions'
            },
            uniqueItems: true
        },
        datatables: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetGroupsTemplateDatatables'
            },
            uniqueItems: true
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetGroupsTemplateOfficeOptions'
            },
            uniqueItems: true
        },
        staffOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetGroupsTemplateStaffOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetGroupsTemplateStaffOptions = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            example: 'C, Mike'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetHolidaysResponse = {
    type: 'object',
    description: 'GetHolidaysResponse',
    properties: {
        fromDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Good Friday'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        repaymentsRescheduledTo: {
            type: 'string',
            format: 'date'
        },
        status: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        toDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetHookResponse = {
    type: 'object',
    description: 'GetHookResponse',
    properties: {
        config: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Field'
            }
        },
        createdAt: {
            type: 'string',
            format: 'date'
        },
        displayName: {
            type: 'string',
            example: 'Kremlin'
        },
        events: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Event'
            }
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Web'
        },
        templateId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        templateName: {
            type: 'string',
            example: 'My UGD'
        },
        updatedAt: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetHookTemplateResponse = {
    type: 'object',
    description: 'GetHookTemplateResponse',
    properties: {
        groupings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Grouping'
            }
        },
        templates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/HookTemplateData'
            }
        }
    }
} as const;

export const $GetIncomeFromFeeAccountId = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: 'INCOME_OY1461237869836'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 14
        },
        name: {
            type: 'string',
            example: 'ACCOUNT_NAME_1FJBQ'
        }
    }
} as const;

export const $GetIncomeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.income'
        },
        description: {
            type: 'string',
            example: 'INCOME'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetInstructionTypeOptionsResponseStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'standingInstructionType.fixed'
        },
        description: {
            type: 'string',
            example: 'Fixed'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetInstructionTypeStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'standingInstructionType.fixed'
        },
        description: {
            type: 'string',
            example: 'Fixed'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetInterestRateChartsChartSlabs = {
    type: 'object',
    properties: {
        annualInterestRate: {
            type: 'integer',
            format: 'int32',
            example: 6
        },
        currency: {
            '$ref': '#/components/schemas/GetInterestRateChartsCurrency'
        },
        fromPeriod: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        periodTypes: {
            '$ref': '#/components/schemas/GetInterestRateChartsTemplatePeriodTypes'
        }
    }
} as const;

export const $GetInterestRateChartsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetInterestRateChartsResponse = {
    type: 'object',
    description: 'GetInterestRateChartsResponse',
    properties: {
        chartSlabs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetInterestRateChartsChartSlabs'
            },
            uniqueItems: true
        },
        fromDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsProductId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsProductName: {
            type: 'string',
            example: 'Fixed Deposit Product 001'
        }
    }
} as const;

export const $GetInterestRateChartsTemplatePeriodTypes = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestChartPeriodType.days'
        },
        description: {
            type: 'string',
            example: 'Days'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetInterestRateChartsTemplateResponse = {
    type: 'object',
    description: 'GetInterestRateChartsTemplateResponse',
    properties: {
        periodTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetInterestRateChartsTemplatePeriodTypes'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetJobsJobIDJobRunHistoryResponse = {
    type: 'object',
    description: 'GetJobsJobIDJobRunHistoryResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/JobDetailHistoryDataSwagger'
            }
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 8
        }
    }
} as const;

export const $GetJobsResponse = {
    type: 'object',
    description: 'GetJobsResponse',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        cronExpression: {
            type: 'string',
            example: '0 0 22 1/1 * ? *'
        },
        currentlyRunning: {
            type: 'boolean',
            example: false
        },
        displayName: {
            type: 'string',
            example: 'Update loan Summary'
        },
        initializingError: {
            type: 'string'
        },
        jobId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        lastRunHistory: {
            '$ref': '#/components/schemas/JobDetailHistoryData'
        },
        nextRunTime: {
            type: 'string',
            format: 'date-time'
        },
        shortName: {
            type: 'string',
            example: 'LA_USUM'
        }
    }
} as const;

export const $GetJournalEntriesTransactionIdResponse = {
    type: 'object',
    description: 'GetJournalEntriesTransactionIdResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/JournalEntryTransactionItem'
            }
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetLoanAccountingMappings = {
    type: 'object',
    properties: {
        buyDownExpenseAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        chargeOffExpenseAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        chargeOffFraudExpenseAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        deferredIncomeLiabilityAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        fundSourceAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        goodwillCreditAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        incomeFromBuyDownAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        incomeFromCapitalizationAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        incomeFromChargeOffFeesAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        incomeFromChargeOffInterestAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        incomeFromChargeOffPenaltyAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        incomeFromFeeAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        incomeFromGoodwillCreditFeesAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        incomeFromGoodwillCreditInterestAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        incomeFromGoodwillCreditPenaltyAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        incomeFromPenaltyAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        incomeFromRecoveryAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        interestOnLoanAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        loanPortfolioAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        overpaymentLiabilityAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        receivableFeeAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        receivableInterestAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        receivablePenaltyAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        transfersInSuspenseAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        writeOffAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        }
    }
} as const;

export const $GetLoanCharge = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'flat install'
        },
        penalty: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetLoanChargeCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeCalculationType.flat'
        },
        description: {
            type: 'string',
            example: 'Flat'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoanChargeCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetLoanChargeTemplateChargeAppliesTo = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeAppliesTo.loan'
        },
        description: {
            type: 'string',
            example: 'Loan'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetLoanChargeTemplateChargeOptions = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        amount: {
            type: 'number',
            format: 'double',
            example: 100
        },
        chargeAppliesTo: {
            '$ref': '#/components/schemas/GetLoanChargeTemplateChargeAppliesTo'
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetLoanChargeCalculationType'
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetLoanChargeTemplateChargeTimeType'
        },
        currency: {
            '$ref': '#/components/schemas/GetLoanChargeCurrency'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Collection fee'
        },
        penalty: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetLoanChargeTemplateChargeTimeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.specifiedDueDate'
        },
        description: {
            type: 'string',
            example: 'Specified due date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetLoanChargeTimeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.disbursement'
        },
        description: {
            type: 'string',
            example: 'Disbursement'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoanCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetLoanFeeToIncomeAccountMappings = {
    type: 'object',
    properties: {
        charge: {
            '$ref': '#/components/schemas/GetLoanCharge'
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        incomeAccount: {
            '$ref': '#/components/schemas/GetGlAccountMapping'
        },
        incomeAccountId: {
            type: 'integer',
            format: 'int64',
            example: 39
        }
    }
} as const;

export const $GetLoanPaymentChannelToFundSourceMappings = {
    type: 'object',
    properties: {
        fundSourceAccountId: {
            type: 'integer',
            format: 'int64',
            example: 39
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int64',
            example: 10
        }
    }
} as const;

export const $GetLoanProductsAccountingMappingOptions = {
    type: 'object',
    properties: {
        assetAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsAssetAccountOptions'
            },
            uniqueItems: true
        },
        expenseAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsExpenseAccountOptions'
            },
            uniqueItems: true
        },
        incomeAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsIncomeAccountOptions'
            },
            uniqueItems: true
        },
        liabilityAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsLiabilityAccountOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetLoanProductsAccountingRule = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountingRuleType.cash'
        },
        description: {
            type: 'string',
            example: 'CASH BASED'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetLoanProductsAmortizationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'amortizationType.equal.installments'
        },
        description: {
            type: 'string',
            example: 'Equal installments'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoanProductsAssetAccountOptions = {
    type: 'object',
    properties: {
        disabled: {
            type: 'boolean',
            example: false
        },
        glCode: {
            type: 'string',
            example: '02'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Loan portfolio'
        },
        nameDecorated: {
            type: 'string',
            example: 'Loan portfolio'
        },
        organizationRunningBalance: {
            type: 'integer',
            format: 'int32',
            example: 60000
        },
        tagId: {
            '$ref': '#/components/schemas/GetLoanProductsLiabilityTagId'
        },
        type: {
            '$ref': '#/components/schemas/GetLoanProductsLiabilityType'
        },
        usage: {
            '$ref': '#/components/schemas/GetLoanProductsLiabilityUsage'
        }
    }
} as const;

export const $GetLoanProductsChargeAppliesTo = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeAppliesTo.loan'
        },
        description: {
            type: 'string',
            example: 'Loan'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoanProductsChargeOffReasonOptions = {
    type: 'object',
    description: 'GetLoanProductsChargeOffReasonOptions',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        description: {
            type: 'string',
            example: 'Charge-Off reason description'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        mandatory: {
            type: 'boolean',
            example: false
        },
        name: {
            type: 'string',
            example: 'debit_card'
        },
        position: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetLoanProductsChargeOptions = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        amount: {
            type: 'number',
            example: 100
        },
        chargeAppliesTo: {
            '$ref': '#/components/schemas/GetLoanProductsChargeAppliesTo'
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetLoanChargeCalculationType'
        },
        chargePaymentMode: {
            '$ref': '#/components/schemas/GetLoansChargePaymentMode'
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetLoanChargeTimeType'
        },
        currency: {
            '$ref': '#/components/schemas/GetLoanProductsCurrencyOptions'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 5
        },
        name: {
            type: 'string',
            example: 'des charges'
        },
        penalty: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetLoanProductsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetLoanProductsCurrencyOptions = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetLoanProductsDaysInMonthType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'DaysInMonthType.actual'
        },
        description: {
            type: 'string',
            example: 'Actual'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoanProductsDaysInYearCustomStrategy = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'DaysInYearCustomStrategyType.fullLeapYear'
        },
        description: {
            type: 'string',
            example: 'Full Leap Year'
        },
        id: {
            type: 'string',
            example: 'FULL_LEAP_YEAR'
        }
    }
} as const;

export const $GetLoanProductsDaysInYearType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'DaysInYearType.actual'
        },
        description: {
            type: 'string',
            example: 'Actual'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoanProductsExpenseAccountOptions = {
    type: 'object',
    properties: {
        disabled: {
            type: 'boolean',
            example: false
        },
        glCode: {
            type: 'string',
            example: '12'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'loans written off 2'
        },
        nameDecorated: {
            type: 'string',
            example: 'loans written off 2'
        },
        organizationRunningBalance: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        tagId: {
            '$ref': '#/components/schemas/GetLoanProductsLiabilityTagId'
        },
        type: {
            '$ref': '#/components/schemas/GetLoanProductsExpenseType'
        },
        usage: {
            '$ref': '#/components/schemas/GetLoanProductsLiabilityUsage'
        }
    }
} as const;

export const $GetLoanProductsExpenseType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.expense'
        },
        description: {
            type: 'string',
            example: 'EXPENSE'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 5
        }
    }
} as const;

export const $GetLoanProductsIncomeAccountOptions = {
    type: 'object',
    properties: {
        disabled: {
            type: 'boolean',
            example: false
        },
        glCode: {
            type: 'string',
            example: '04'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'income from interest'
        },
        nameDecorated: {
            type: 'string',
            example: 'income from interest'
        },
        organizationRunningBalance: {
            type: 'integer',
            format: 'int32',
            example: 19
        },
        tagId: {
            '$ref': '#/components/schemas/GetLoanProductsLiabilityTagId'
        },
        type: {
            '$ref': '#/components/schemas/GetLoanProductsIncomeType'
        },
        usage: {
            '$ref': '#/components/schemas/GetLoanProductsLiabilityUsage'
        }
    }
} as const;

export const $GetLoanProductsIncomeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.income'
        },
        description: {
            type: 'string',
            example: 'INCOME'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $GetLoanProductsInterestRateFrequencyType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestRateFrequency.periodFrequencyType.months'
        },
        description: {
            type: 'string',
            example: 'Per month'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetLoanProductsInterestRateTemplateFrequencyType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestRateFrequency.periodFrequencyType.months'
        },
        description: {
            type: 'string',
            example: 'Per month'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetLoanProductsInterestRecalculationCompoundingFrequencyType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestRecalculationFrequencyType.same.as.repayment.period'
        },
        description: {
            type: 'string',
            example: 'Same as repayment period'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoanProductsInterestRecalculationCompoundingType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestRecalculationCompoundingMethod.fee'
        },
        description: {
            type: 'string',
            example: 'Fee'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetLoanProductsInterestRecalculationData = {
    type: 'object',
    properties: {
        allowCompoundingOnEod: {
            type: 'boolean',
            example: true
        },
        disallowInterestCalculationOnPastDue: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        interestRecalculationCompoundingFrequencyType: {
            '$ref': '#/components/schemas/GetLoanProductsInterestRecalculationCompoundingFrequencyType'
        },
        interestRecalculationCompoundingType: {
            '$ref': '#/components/schemas/GetLoanProductsInterestRecalculationCompoundingType'
        },
        isArrearsBasedOnOriginalSchedule: {
            type: 'boolean',
            example: true
        },
        isCompoundingToBePostedAsTransaction: {
            type: 'boolean',
            example: true
        },
        preClosureInterestCalculationStrategy: {
            '$ref': '#/components/schemas/GetLoanProductsPreClosureInterestCalculationStrategy'
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        recalculationCompoundingFrequencyInterval: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recalculationCompoundingFrequencyOnDayType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recalculationRestFrequencyInterval: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recalculationRestFrequencyType: {
            '$ref': '#/components/schemas/GetLoanProductsInterestRecalculationCompoundingFrequencyType'
        },
        rescheduleStrategyType: {
            '$ref': '#/components/schemas/GetLoanProductsRescheduleStrategyType'
        }
    }
} as const;

export const $GetLoanProductsInterestRecalculationTemplateData = {
    type: 'object',
    properties: {
        interestRecalculationCompoundingType: {
            '$ref': '#/components/schemas/GetLoanProductsInterestRecalculationCompoundingType'
        },
        preClosureInterestCalculationStrategy: {
            '$ref': '#/components/schemas/GetLoanProductsPreClosureInterestCalculationStrategy'
        },
        rescheduleStrategyType: {
            '$ref': '#/components/schemas/GetLoanProductsRescheduleStrategyType'
        }
    }
} as const;

export const $GetLoanProductsInterestTemplateType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestType.declining.balance'
        },
        description: {
            type: 'string',
            example: 'Declining Balance'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetLoanProductsInterestType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestType.flat'
        },
        description: {
            type: 'string',
            example: 'Flat'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoanProductsLiabilityAccountOptions = {
    type: 'object',
    properties: {
        disabled: {
            type: 'boolean',
            example: false
        },
        glCode: {
            type: 'string',
            example: '13'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'over payment'
        },
        nameDecorated: {
            type: 'string',
            example: 'over payment'
        },
        organizationRunningBalance: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        tagId: {
            '$ref': '#/components/schemas/GetLoanProductsLiabilityTagId'
        },
        type: {
            '$ref': '#/components/schemas/GetLoanProductsLiabilityType'
        },
        usage: {
            '$ref': '#/components/schemas/GetLoanProductsLiabilityUsage'
        }
    }
} as const;

export const $GetLoanProductsLiabilityTagId = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetLoanProductsLiabilityType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.liability'
        },
        description: {
            type: 'string',
            example: 'LIABILITY'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetLoanProductsLiabilityUsage = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountUsage.detail'
        },
        description: {
            type: 'string',
            example: 'DETAIL'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoanProductsParamType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'LoanProductParamType.principal'
        },
        description: {
            type: 'string',
            example: 'principal'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoanProductsPaymentTypeOptions = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        name: {
            type: 'string',
            example: 'check'
        },
        position: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetLoanProductsPreClosureInterestCalculationStrategy = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'loanPreClosureInterestCalculationStrategy.tillPreClosureDate'
        },
        description: {
            type: 'string',
            example: 'Till preclose Date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoanProductsPrincipalVariationsForBorrowerCycle = {
    type: 'object',
    properties: {
        borrowerCycleNumber: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        defaultValue: {
            type: 'number',
            format: 'double',
            example: 15000
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 21
        },
        maxValue: {
            type: 'number',
            format: 'double',
            example: 20000
        },
        minValue: {
            type: 'number',
            format: 'double',
            example: 2000
        },
        paramType: {
            '$ref': '#/components/schemas/GetLoanProductsParamType'
        },
        valueConditionType: {
            '$ref': '#/components/schemas/GetLoanProductsValueConditionType'
        }
    }
} as const;

export const $GetLoanProductsProductIdResponse = {
    type: 'object',
    description: 'GetLoanProductsProductIdResponse',
    properties: {
        accountingMappings: {
            '$ref': '#/components/schemas/GetLoanAccountingMappings'
        },
        accountingRule: {
            '$ref': '#/components/schemas/GetLoanProductsAccountingRule'
        },
        allowApprovedDisbursedAmountsOverApplied: {
            type: 'boolean',
            example: true
        },
        allowPartialPeriodInterestCalculation: {
            type: 'boolean',
            example: false
        },
        allowVariableInstallments: {
            type: 'boolean',
            example: false
        },
        amortizationType: {
            '$ref': '#/components/schemas/GetLoanProductsAmortizationType'
        },
        annualInterestRate: {
            type: 'number',
            format: 'double',
            example: 60
        },
        buyDownFeeCalculationType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        buyDownFeeCalculationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        buyDownFeeIncomeType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        buyDownFeeIncomeTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        buyDownFeeStrategy: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        buyDownFeeStrategyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        canDefineInstallmentAmount: {
            type: 'boolean',
            example: false
        },
        canUseForTopup: {
            type: 'boolean',
            example: false
        },
        capitalizedIncomeCalculationType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeCalculationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        capitalizedIncomeStrategy: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeStrategyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        capitalizedIncomeType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        chargeOffBehaviour: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        chargeOffReasonOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsChargeOffReasonOptions'
            }
        },
        chargeOffReasonToExpenseAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetChargeOffReasonToExpenseAccountMappings'
            }
        },
        charges: {
            type: 'array',
            example: [],
            items: {
                '$ref': '#/components/schemas/LoanProductChargeData'
            }
        },
        creditAllocation: {
            type: 'array',
            example: [],
            items: {
                '$ref': '#/components/schemas/CreditAllocationData'
            }
        },
        currency: {
            '$ref': '#/components/schemas/GetLoanProductsCurrency'
        },
        daysInMonthType: {
            '$ref': '#/components/schemas/GetLoanProductsDaysInMonthType'
        },
        daysInYearCustomStrategy: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        daysInYearType: {
            '$ref': '#/components/schemas/GetLoanProductsDaysInYearType'
        },
        delinquencyBucket: {
            '$ref': '#/components/schemas/DelinquencyBucketData'
        },
        delinquencyBucketOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DelinquencyBucketData'
            }
        },
        description: {
            type: 'string',
            example: 'sample description'
        },
        disallowExpectedDisbursements: {
            type: 'boolean',
            example: true
        },
        disbursedAmountPercentageForDownPayment: {
            type: 'number',
            example: 5.5
        },
        dueDaysForRepaymentEvent: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        enableAccrualActivityPosting: {
            type: 'boolean',
            example: false
        },
        enableAutoRepaymentForDownPayment: {
            type: 'boolean',
            example: false
        },
        enableBuyDownFee: {
            type: 'boolean',
            example: false
        },
        enableDownPayment: {
            type: 'boolean',
            example: false
        },
        enableIncomeCapitalization: {
            type: 'boolean',
            example: false
        },
        enableInstallmentLevelDelinquency: {
            type: 'boolean',
            example: false
        },
        feeToIncomeAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanFeeToIncomeAccountMappings'
            },
            uniqueItems: true
        },
        fixedLength: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        fixedPrincipalPercentagePerInstallment: {
            type: 'number',
            example: 5.5
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        inArrearsTolerance: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        includeInBorrowerCycle: {
            type: 'boolean',
            example: true
        },
        interestCalculationPeriodType: {
            '$ref': '#/components/schemas/GetLoansProductsInterestCalculationPeriodType'
        },
        interestRateFrequencyType: {
            '$ref': '#/components/schemas/GetLoanProductsInterestRateFrequencyType'
        },
        interestRatePerPeriod: {
            type: 'number',
            format: 'double',
            example: 5
        },
        interestRateVariationsForBorrowerCycle: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        interestRecalculationData: {
            '$ref': '#/components/schemas/GetLoanProductsInterestRecalculationData'
        },
        interestRecognitionOnDisbursementDate: {
            type: 'boolean',
            example: false
        },
        interestType: {
            '$ref': '#/components/schemas/GetLoanProductsInterestTemplateType'
        },
        isFloatingInterestRateCalculationAllowed: {
            type: 'boolean',
            example: false
        },
        isInterestRecalculationEnabled: {
            type: 'boolean',
            example: false
        },
        isLinkedToFloatingInterestRates: {
            type: 'boolean',
            example: false
        },
        isRatesEnabled: {
            type: 'boolean',
            example: false
        },
        loanScheduleProcessingType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        loanScheduleType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        maxInterestRatePerPeriod: {
            type: 'number',
            format: 'double',
            example: 10
        },
        maxNumberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        maxPrincipal: {
            type: 'number',
            format: 'double',
            example: 15000
        },
        maxTrancheCount: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        maximumGap: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        merchantBuyDownFee: {
            type: 'boolean',
            example: false
        },
        minInterestRatePerPeriod: {
            type: 'number',
            format: 'double',
            example: 0
        },
        minNumberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 5
        },
        minPrincipal: {
            type: 'number',
            format: 'double',
            example: 2000
        },
        minimumGap: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        multiDisburseLoan: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'advanced accounting'
        },
        numberOfRepaymentVariationsForBorrowerCycle: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 7
        },
        outstandingLoanBalance: {
            type: 'number',
            format: 'double',
            example: 36000
        },
        overAppliedCalculationType: {
            type: 'string',
            example: 'flat'
        },
        overDueDaysForRepaymentEvent: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        overdueDaysForNPA: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        paymentAllocation: {
            type: 'array',
            example: [],
            items: {
                '$ref': '#/components/schemas/AdvancedPaymentData'
            }
        },
        paymentChannelToFundSourceMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanPaymentChannelToFundSourceMappings'
            },
            uniqueItems: true
        },
        principal: {
            type: 'number',
            format: 'double',
            example: 10000
        },
        principalThresholdForLastInstalment: {
            type: 'integer',
            format: 'int32',
            example: 50
        },
        productsPrincipalVariationsForBorrowerCycle: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsPrincipalVariationsForBorrowerCycle'
            },
            uniqueItems: true
        },
        repaymentEvery: {
            type: 'integer',
            format: 'int32',
            example: 7
        },
        repaymentFrequencyType: {
            '$ref': '#/components/schemas/GetLoanProductsRepaymentFrequencyType'
        },
        repaymentStartDateType: {
            '$ref': '#/components/schemas/GetLoanProductsRepaymentStartDateType'
        },
        shortName: {
            type: 'string',
            example: 'ad11'
        },
        status: {
            type: 'string',
            example: 'loanProduct.active'
        },
        supportedInterestRefundTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        transactionProcessingStrategyCode: {
            type: 'string',
            example: 'mifos-standard-strategy'
        },
        transactionProcessingStrategyName: {
            type: 'string',
            example: 'Mifos style'
        },
        useBorrowerCycle: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetLoanProductsRepaymentFrequencyType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'repaymentFrequency.periodFrequencyType.days'
        },
        description: {
            type: 'string',
            example: 'Days'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetLoanProductsRepaymentStartDateType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'repaymentStartDateType.disbursementDate'
        },
        description: {
            type: 'string',
            example: 'Disbursement Date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoanProductsRepaymentTemplateFrequencyType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'repaymentFrequency.periodFrequencyType.months'
        },
        description: {
            type: 'string',
            example: 'Months'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetLoanProductsRescheduleStrategyType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'loanRescheduleStrategyMethod.reduce.number.of.installments'
        },
        description: {
            type: 'string',
            example: 'Reduce number of installments'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetLoanProductsResponse = {
    type: 'object',
    description: 'GetLoanProductsResponse',
    properties: {
        accountingRule: {
            '$ref': '#/components/schemas/GetLoanProductsAccountingRule'
        },
        amortizationType: {
            '$ref': '#/components/schemas/GetLoanProductsAmortizationType'
        },
        annualInterestRate: {
            type: 'number',
            format: 'double',
            example: 15
        },
        buyDownFeeCalculationType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        buyDownFeeIncomeType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        buyDownFeeStrategy: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeCalculationType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeStrategy: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        chargeOffBehaviour: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        currency: {
            '$ref': '#/components/schemas/GetLoanProductsCurrency'
        },
        daysInMonthType: {
            '$ref': '#/components/schemas/GetLoanProductsDaysInMonthType'
        },
        daysInYearCustomStrategy: {
            '$ref': '#/components/schemas/GetLoanProductsDaysInYearCustomStrategy'
        },
        daysInYearType: {
            '$ref': '#/components/schemas/GetLoanProductsDaysInYearType'
        },
        enableBuyDownFee: {
            type: 'boolean',
            example: false
        },
        enableIncomeCapitalization: {
            type: 'boolean',
            example: false
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        fixedLength: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        fixedPrincipalPercentagePerInstallment: {
            type: 'number',
            example: 5.5
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        includeInBorrowerCycle: {
            type: 'boolean',
            example: false
        },
        interestCalculationPeriodType: {
            '$ref': '#/components/schemas/GetLoansProductsInterestCalculationPeriodType'
        },
        interestRateFrequencyType: {
            '$ref': '#/components/schemas/GetLoanProductsInterestRateFrequencyType'
        },
        interestRatePerPeriod: {
            type: 'number',
            format: 'double',
            example: 15
        },
        interestRateVariationsForBorrowerCycle: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        interestRecalculationData: {
            '$ref': '#/components/schemas/GetLoanProductsInterestRecalculationData'
        },
        interestRecognitionOnDisbursementDate: {
            type: 'boolean',
            example: false
        },
        interestType: {
            '$ref': '#/components/schemas/GetLoanProductsInterestType'
        },
        isInterestRecalculationEnabled: {
            type: 'boolean',
            example: true
        },
        maxNumberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 15
        },
        maxPrincipal: {
            type: 'number',
            format: 'double',
            example: 15000
        },
        merchantBuyDownFee: {
            type: 'boolean',
            example: false
        },
        minNumberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 5
        },
        minPrincipal: {
            type: 'number',
            format: 'double',
            example: 5000
        },
        name: {
            type: 'string',
            example: 'personal loan product'
        },
        numberOfRepaymentVariationsForBorrowerCycle: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        principal: {
            type: 'number',
            format: 'double',
            example: 10000
        },
        principalThresholdForLastInstalment: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        principalVariationsForBorrowerCycle: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        repaymentEvery: {
            type: 'integer',
            format: 'int32',
            example: 7
        },
        repaymentFrequencyType: {
            '$ref': '#/components/schemas/GetLoanProductsRepaymentFrequencyType'
        },
        repaymentStartDateType: {
            '$ref': '#/components/schemas/GetLoanProductsRepaymentStartDateType'
        },
        shortName: {
            type: 'string',
            example: 'pe1'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        status: {
            type: 'string',
            example: 'loanProduct.active'
        },
        supportedInterestRefundTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        transactionProcessingStrategy: {
            type: 'string',
            example: 'mifos-standard-strategy'
        },
        transactionProcessingStrategyName: {
            type: 'string',
            example: 'Mifos style'
        },
        useBorrowerCycle: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetLoanProductsTemplateCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        displayLabel: {
            type: 'string',
            example: '[]'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        name: {
            type: 'string',
            example: 'Usa dollar'
        },
        nameCode: {
            type: 'string',
            example: 'USD'
        }
    }
} as const;

export const $GetLoanProductsTemplateResponse = {
    type: 'object',
    description: 'GetLoanProductsTemplateResponse',
    properties: {
        accountingMappingOptions: {
            '$ref': '#/components/schemas/GetLoanProductsAccountingMappingOptions'
        },
        accountingRule: {
            '$ref': '#/components/schemas/GetLoanProductsAccountingRule'
        },
        accountingRuleOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsAccountingRule'
            },
            uniqueItems: true
        },
        advancedPaymentAllocationFutureInstallmentAllocationRules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        advancedPaymentAllocationTransactionTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        advancedPaymentAllocationTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        amortizationType: {
            '$ref': '#/components/schemas/GetLoanProductsAmortizationType'
        },
        amortizationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsAmortizationType'
            },
            uniqueItems: true
        },
        buyDownFeeCalculationType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        buyDownFeeCalculationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        buyDownFeeIncomeType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        buyDownFeeIncomeTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        buyDownFeeStrategy: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        buyDownFeeStrategyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        capitalizedIncomeCalculationType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeCalculationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        capitalizedIncomeStrategy: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeStrategyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        capitalizedIncomeType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        chargeOffBehaviour: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        chargeOffBehaviourOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        chargeOffReasonOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsChargeOffReasonOptions'
            }
        },
        chargeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsChargeOptions'
            },
            uniqueItems: true
        },
        creditAllocationAllocationTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        creditAllocationTransactionTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        currency: {
            '$ref': '#/components/schemas/GetLoanProductsTemplateCurrency'
        },
        currencyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsCurrencyOptions'
            },
            uniqueItems: true
        },
        daysInMonthType: {
            '$ref': '#/components/schemas/GetLoanProductsDaysInMonthType'
        },
        daysInMonthTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            },
            uniqueItems: true
        },
        daysInYearCustomStrategy: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        daysInYearType: {
            '$ref': '#/components/schemas/GetLoanProductsDaysInYearType'
        },
        daysInYearTypeCustomStrategyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            },
            uniqueItems: true
        },
        daysInYearTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsInterestTemplateType'
            },
            uniqueItems: true
        },
        enableBuyDownFee: {
            type: 'boolean',
            example: false
        },
        enableIncomeCapitalization: {
            type: 'boolean',
            example: false
        },
        includeInBorrowerCycle: {
            type: 'boolean',
            example: false
        },
        interestCalculationPeriodType: {
            '$ref': '#/components/schemas/GetLoansProductsInterestCalculationPeriodType'
        },
        interestCalculationPeriodTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoansProductsInterestCalculationPeriodType'
            },
            uniqueItems: true
        },
        interestRateFrequencyType: {
            '$ref': '#/components/schemas/GetLoanProductsInterestRateTemplateFrequencyType'
        },
        interestRateFrequencyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsInterestRateTemplateFrequencyType'
            },
            uniqueItems: true
        },
        interestRateVariationsForBorrowerCycle: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        interestRecalculationCompoundingTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsInterestRecalculationCompoundingType'
            },
            uniqueItems: true
        },
        interestRecalculationData: {
            '$ref': '#/components/schemas/GetLoanProductsInterestRecalculationTemplateData'
        },
        interestRecalculationFrequencyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsInterestRecalculationCompoundingFrequencyType'
            },
            uniqueItems: true
        },
        interestType: {
            '$ref': '#/components/schemas/GetLoanProductsInterestTemplateType'
        },
        interestTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsInterestTemplateType'
            },
            uniqueItems: true
        },
        isInterestRecalculationEnabled: {
            type: 'boolean',
            example: false
        },
        loanScheduleProcessingTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        loanScheduleTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        merchantBuyDownFee: {
            type: 'boolean',
            example: false
        },
        numberOfRepaymentVariationsForBorrowerCycle: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        paymentTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsPaymentTypeOptions'
            },
            uniqueItems: true
        },
        preClosureInterestCalculationStrategyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsPreClosureInterestCalculationStrategy'
            },
            uniqueItems: true
        },
        principalVariationsForBorrowerCycle: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        repaymentFrequencyType: {
            '$ref': '#/components/schemas/GetLoanProductsRepaymentTemplateFrequencyType'
        },
        repaymentFrequencyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsRepaymentTemplateFrequencyType'
            },
            uniqueItems: true
        },
        repaymentStartDateTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsRepaymentStartDateType'
            },
            uniqueItems: true
        },
        rescheduleStrategyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsRescheduleStrategyType'
            },
            uniqueItems: true
        },
        supportedInterestRefundTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        supportedInterestRefundTypesOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        transactionProcessingStrategyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsTransactionProcessingStrategyOptions'
            },
            uniqueItems: true
        },
        useBorrowerCycle: {
            type: 'boolean',
            example: false
        },
        valueConditionTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsValueConditionTypeOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetLoanProductsTransactionProcessingStrategyOptions = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'mifos-standard-strategy'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Penalties, Fees, Interest, Principal order'
        }
    }
} as const;

export const $GetLoanProductsValueConditionType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'LoanProductValueConditionType.equal'
        },
        description: {
            type: 'string',
            example: 'equals'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetLoanProductsValueConditionTypeOptions = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'mifos-standard-strategyLoanProductValueConditionType.equal'
        },
        description: {
            type: 'string',
            example: 'equals'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetLoanRescheduleRequestResponse = {
    type: 'object',
    description: 'GetLoanRescheduleRequestResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 15
        },
        clientName: {
            type: 'string',
            example: 'clientName'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanAccountNumber: {
            type: 'string',
            example: '000000018'
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 18
        },
        loanTermVariationsData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanTermVariationsData'
            },
            uniqueItems: true
        },
        recalculateInterest: {
            type: 'boolean',
            example: false
        },
        rescheduleFromDate: {
            type: 'string',
            format: 'date'
        },
        rescheduleFromInstallment: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        rescheduleReasonCodeValue: {
            '$ref': '#/components/schemas/RescheduleReasonsCodeValue'
        },
        rescheduleReasonComment: {
            type: 'string',
            example: 'rescheduleReasonComment'
        },
        statusEnum: {
            '$ref': '#/components/schemas/GetLoanRescheduleRequestStatus'
        },
        timeline: {
            '$ref': '#/components/schemas/RescheduleReasonsTimeline'
        }
    }
} as const;

export const $GetLoanRescheduleRequestStatus = {
    type: 'object',
    properties: {
        approved: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'loanStatusType.submitted.and.pending.approval'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 100
        },
        pendingApproval: {
            type: 'boolean',
            example: true
        },
        rejected: {
            type: 'boolean',
            example: false
        },
        value: {
            type: 'string',
            example: 'Submitted and pending approval'
        }
    }
} as const;

export const $GetLoanTransactionRelation = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            format: 'double',
            example: 100
        },
        fromLoanTransaction: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        paymentType: {
            type: 'string',
            example: 'Repayment Adjustment Chargeback'
        },
        relationType: {
            type: 'string',
            example: 'CHARGEBACK'
        },
        toLoanCharge: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        toLoanTransaction: {
            type: 'integer',
            format: 'int64',
            example: 10
        }
    }
} as const;

export const $GetLoansApprovalTemplateResponse = {
    type: 'object',
    description: 'GetLoansApprovalTemplateResponse',
    properties: {
        approvalAmount: {
            type: 'number',
            example: 200
        },
        approvalDate: {
            type: 'string',
            format: 'date'
        },
        currency: {
            '$ref': '#/components/schemas/GetLoanCurrency'
        },
        netDisbursalAmount: {
            type: 'number',
            example: 200
        }
    }
} as const;

export const $GetLoansChargePaymentMode = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargepaymentmode.regular'
        },
        description: {
            type: 'string',
            example: 'Regular'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetLoansCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetLoansLoanIdAmortizationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'amortizationType.equal.installments'
        },
        description: {
            type: 'string',
            example: 'Equal installments'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetLoansLoanIdChargeCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeCalculationType.percent.of.amount'
        },
        description: {
            type: 'string',
            example: '% Amount'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetLoansLoanIdChargePaymentMode = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargepaymentmode.regular'
        },
        description: {
            type: 'string',
            example: 'Regular'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetLoansLoanIdChargeTimeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.overdueInstallment'
        },
        description: {
            type: 'string',
            example: 'overdue fees'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 9
        }
    }
} as const;

export const $GetLoansLoanIdChargesChargeIdResponse = {
    type: 'object',
    description: 'GetLoansLoanIdChargesChargeIdResponse',
    properties: {
        amount: {
            type: 'number',
            format: 'double',
            example: 100
        },
        amountOrPercentage: {
            type: 'number',
            format: 'double',
            example: 100
        },
        amountOutstanding: {
            type: 'number',
            format: 'double',
            example: 100
        },
        amountPaid: {
            type: 'number',
            format: 'double',
            example: 0
        },
        amountPercentageAppliedTo: {
            type: 'number',
            format: 'double',
            example: 0
        },
        amountWaived: {
            type: 'number',
            format: 'double',
            example: 0
        },
        amountWrittenOff: {
            type: 'number',
            format: 'double',
            example: 0
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetLoanChargeCalculationType'
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetLoanChargeTimeType'
        },
        currency: {
            '$ref': '#/components/schemas/GetLoanChargeCurrency'
        },
        dueDate: {
            type: 'string',
            format: 'date'
        },
        externalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Loan Processing fee'
        },
        penalty: {
            type: 'boolean',
            example: false
        },
        percentage: {
            type: 'number',
            format: 'double',
            example: 0
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetLoansLoanIdChargesTemplateResponse = {
    type: 'object',
    description: 'GetLoansLoanIdChargesTemplateResponse',
    properties: {
        amountPaid: {
            type: 'number',
            format: 'double',
            example: 0
        },
        amountWaived: {
            type: 'number',
            format: 'double',
            example: 0
        },
        amountWrittenOff: {
            type: 'number',
            format: 'double',
            example: 0
        },
        chargeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanChargeTemplateChargeOptions'
            },
            uniqueItems: true
        },
        penalty: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetLoansLoanIdCodeValueData = {
    type: 'object',
    description: 'List of GetLoansLoanIdCodeValueData',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        description: {
            type: 'string',
            example: 'code description'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        mandatory: {
            type: 'boolean',
            example: false
        },
        name: {
            type: 'string',
            example: 'code name'
        },
        position: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetLoansLoanIdCollateralsResponse = {
    type: 'object',
    description: 'GetLoansLoanIdCollateralsResponse',
    properties: {
        currency: {
            '$ref': '#/components/schemas/GetCollateralCurrencyResponse'
        },
        description: {
            type: 'string',
            example: '24 Carat Gold chain weighing 12 grams'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 12
        },
        type: {
            '$ref': '#/components/schemas/GetCollateralTypeResponse'
        },
        value: {
            type: 'integer',
            format: 'int64',
            example: 50000
        }
    }
} as const;

export const $GetLoansLoanIdCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'UGX'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'Uganda Shilling (USh)'
        },
        displaySymbol: {
            type: 'string',
            example: 'USh'
        },
        name: {
            type: 'string',
            example: 'Uganda Shilling'
        },
        nameCode: {
            type: 'string',
            example: 'currency.UGX'
        }
    }
} as const;

export const $GetLoansLoanIdDelinquencyPausePeriod = {
    type: 'object',
    description: 'List of GetLoansLoanIdDelinquencyPausePeriod',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        pausePeriodEnd: {
            type: 'string',
            format: 'date'
        },
        pausePeriodStart: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetLoansLoanIdDelinquencySummary = {
    type: 'object',
    description: 'Delinquent data',
    properties: {
        availableDisbursementAmount: {
            type: 'number',
            example: 100
        },
        availableDisbursementAmountWithOverApplied: {
            type: 'number',
            example: 150
        },
        delinquencyPausePeriods: {
            type: 'array',
            description: 'List of GetLoansLoanIdDelinquencyPausePeriod',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdDelinquencyPausePeriod'
            }
        },
        delinquentAmount: {
            type: 'number',
            example: 100
        },
        delinquentDate: {
            type: 'string',
            format: 'date'
        },
        delinquentDays: {
            type: 'integer',
            format: 'int32',
            example: 4
        },
        delinquentFee: {
            type: 'number',
            example: 6
        },
        delinquentInterest: {
            type: 'number',
            example: 10
        },
        delinquentPenalty: {
            type: 'number',
            example: 4
        },
        delinquentPrincipal: {
            type: 'number',
            example: 80
        },
        installmentLevelDelinquency: {
            type: 'array',
            description: 'List of GetLoansLoanIdLoanInstallmentLevelDelinquency',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdLoanInstallmentLevelDelinquency'
            }
        },
        lastPaymentAmount: {
            type: 'number',
            example: 100
        },
        lastPaymentDate: {
            type: 'string',
            format: 'date'
        },
        lastRepaymentAmount: {
            type: 'number',
            example: 100
        },
        lastRepaymentDate: {
            type: 'string',
            format: 'date'
        },
        nextPaymentAmount: {
            type: 'number',
            example: 123.23
        },
        nextPaymentDueDate: {
            type: 'string',
            format: 'date'
        },
        pastDueDays: {
            type: 'integer',
            format: 'int32',
            example: 12
        }
    }
} as const;

export const $GetLoansLoanIdDisbursementDetails = {
    type: 'object',
    properties: {
        actualDisbursementDate: {
            type: 'string',
            format: 'date'
        },
        approvedPrincipal: {
            type: 'number',
            format: 'float',
            example: 22000
        },
        chargeAmount: {
            type: 'number',
            format: 'double',
            example: 22000
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        expectedDisbursementDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 71
        },
        loanChargeId: {
            type: 'string',
            example: '1'
        },
        locale: {
            type: 'string',
            example: 'de_DE'
        },
        netDisbursalAmount: {
            type: 'number',
            format: 'double',
            example: 22000
        },
        note: {
            type: 'string',
            example: 'some note'
        },
        principal: {
            type: 'number',
            format: 'double',
            example: 22000
        },
        waivedChargeAmount: {
            type: 'number',
            format: 'double',
            example: 22000
        }
    }
} as const;

export const $GetLoansLoanIdEmiVariations = {
    type: 'object'
} as const;

export const $GetLoansLoanIdEnumOptionData = {
    type: 'object',
    description: 'Enum option data',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.specifiedDueDate'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        value: {
            type: 'string',
            example: 'Specified due date'
        }
    }
} as const;

export const $GetLoansLoanIdFeeFrequency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'feeFrequencyperiodFrequencyType.weeks'
        },
        description: {
            type: 'string',
            example: 'Weeks'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetLoansLoanIdInterestCalculationPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestCalculationPeriodType.same.as.repayment.period'
        },
        description: {
            type: 'string',
            example: 'Same as repayment period'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetLoansLoanIdInterestRateFrequencyType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestRateFrequency.periodFrequencyType.years'
        },
        description: {
            type: 'string',
            example: 'Per year'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 3
        }
    }
} as const;

export const $GetLoansLoanIdInterestType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestType.flat'
        },
        description: {
            type: 'string',
            example: 'Flat'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetLoansLoanIdLinkedAccount = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoansLoanIdLoanChargeData = {
    type: 'object',
    description: 'Set of charges',
    properties: {
        amount: {
            type: 'number',
            example: 102
        },
        amountOrPercentage: {
            type: 'number',
            example: 102
        },
        amountOutstanding: {
            type: 'number',
            example: 102
        },
        amountPaid: {
            type: 'number',
            example: 12
        },
        amountPercentageAppliedTo: {
            type: 'number',
            example: 13.56
        },
        amountWaived: {
            type: 'number',
            example: 14
        },
        amountWrittenOff: {
            type: 'number',
            example: 102
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetLoansLoanIdEnumOptionData'
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 5
        },
        chargePayable: {
            type: 'boolean',
            example: false
        },
        chargePaymentMode: {
            '$ref': '#/components/schemas/GetLoansLoanIdEnumOptionData'
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetLoansLoanIdEnumOptionData'
        },
        currency: {
            '$ref': '#/components/schemas/GetLoansLoanIdCurrency'
        },
        dueDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        installmentChargeData: {
            type: 'array',
            description: 'List of GetLoansLoanIdLoanInstallmentChargeData',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdLoanInstallmentChargeData'
            }
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        maxCap: {
            type: 'number',
            example: 30
        },
        minCap: {
            type: 'number',
            example: 30
        },
        name: {
            type: 'string',
            example: 'snooze fee'
        },
        paid: {
            type: 'boolean',
            example: false
        },
        penalty: {
            type: 'boolean',
            example: false
        },
        percentage: {
            type: 'number',
            example: 3.4
        },
        waived: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetLoansLoanIdLoanChargePaidByData = {
    type: 'object',
    description: 'List of GetLoansLoanIdLoanChargePaidByData',
    properties: {
        amount: {
            type: 'number',
            example: 100
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        installmentNumber: {
            type: 'integer',
            format: 'int32',
            example: 9679
        },
        name: {
            type: 'string',
            example: 'name'
        },
        transactionId: {
            type: 'integer',
            format: 'int64',
            example: 636
        }
    }
} as const;

export const $GetLoansLoanIdLoanInstallmentChargeData = {
    type: 'object',
    description: 'List of GetLoansLoanIdLoanInstallmentChargeData',
    properties: {
        amount: {
            type: 'number',
            example: 13.56
        },
        amountAccrued: {
            type: 'number',
            example: 13.56
        },
        amountOutstanding: {
            type: 'number',
            example: 13.56
        },
        amountUnrecognized: {
            type: 'number',
            example: 13.56
        },
        amountWaived: {
            type: 'number',
            example: 13.56
        },
        dueDate: {
            type: 'string',
            format: 'date'
        },
        installmentNumber: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        paid: {
            type: 'boolean',
            example: false
        },
        waived: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetLoansLoanIdLoanInstallmentLevelDelinquency = {
    type: 'object',
    description: 'List of GetLoansLoanIdLoanInstallmentLevelDelinquency',
    properties: {
        classification: {
            type: 'string',
            example: 'Delinquency Range 3 to 5 days'
        },
        delinquentAmount: {
            type: 'number',
            example: 250
        },
        maximumAgeDays: {
            type: 'integer',
            format: 'int32',
            example: 5
        },
        minimumAgeDays: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        rangeId: {
            type: 'integer',
            format: 'int64',
            example: 112
        }
    }
} as const;

export const $GetLoansLoanIdLoanRepaymentScheduleInstallmentData = {
    type: 'object',
    description: 'List of GetLoansLoanIdLoanRepaymentScheduleInstallmentData',
    properties: {
        amount: {
            type: 'number',
            example: 100
        },
        date: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        installmentId: {
            type: 'integer',
            format: 'int32',
            example: 11
        }
    }
} as const;

export const $GetLoansLoanIdLoanTermEnumData = {
    type: 'object',
    description: 'Enum option data',
    properties: {
        code: {
            type: 'string',
            example: 'loanTermType.emiAmount'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        value: {
            type: 'string',
            example: 'emiAmount'
        }
    }
} as const;

export const $GetLoansLoanIdLoanTermVariations = {
    type: 'object',
    description: 'List of GetLoansLoanIdLoanTermVariations',
    properties: {
        dateValue: {
            type: 'string',
            format: 'date'
        },
        decimalValue: {
            type: 'number',
            example: 200
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        isProcessed: {
            type: 'boolean',
            example: false
        },
        isSpecificToInstallment: {
            type: 'boolean',
            example: false
        },
        termType: {
            '$ref': '#/components/schemas/GetLoansLoanIdLoanTermEnumData'
        },
        termVariationApplicableFrom: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetLoansLoanIdLoanTransactionEnumData = {
    type: 'object',
    description: 'Transaction type',
    properties: {
        accrual: {
            type: 'boolean',
            example: false
        },
        approveTransfer: {
            type: 'boolean',
            example: false
        },
        buyDownFee: {
            type: 'boolean',
            example: false
        },
        buyDownFeeAdjustment: {
            type: 'boolean',
            example: false
        },
        buyDownFeeAmortization: {
            type: 'boolean',
            example: false
        },
        buyDownFeeAmortizationAdjustment: {
            type: 'boolean',
            example: false
        },
        capitalizedIncome: {
            type: 'boolean',
            example: false
        },
        capitalizedIncomeAdjustment: {
            type: 'boolean',
            example: false
        },
        capitalizedIncomeAmortization: {
            type: 'boolean',
            example: false
        },
        chargeAdjustment: {
            type: 'boolean',
            example: false
        },
        chargePayment: {
            type: 'boolean',
            example: false
        },
        chargeoff: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'loanTransactionType.repayment'
        },
        contra: {
            type: 'boolean',
            example: false
        },
        contractTermination: {
            type: 'boolean',
            example: false
        },
        creditBalanceRefund: {
            type: 'boolean',
            example: false
        },
        disbursement: {
            type: 'boolean',
            example: false
        },
        goodwillCredit: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        initiateTransfer: {
            type: 'boolean',
            example: false
        },
        merchantIssuedRefund: {
            type: 'boolean',
            example: false
        },
        payoutRefund: {
            type: 'boolean',
            example: false
        },
        recoveryRepayment: {
            type: 'boolean',
            example: false
        },
        refund: {
            type: 'boolean',
            example: false
        },
        refundForActiveLoans: {
            type: 'boolean',
            example: false
        },
        rejectTransfer: {
            type: 'boolean',
            example: false
        },
        repayment: {
            type: 'boolean',
            example: true
        },
        repaymentAtDisbursement: {
            type: 'boolean',
            example: false
        },
        value: {
            type: 'string',
            example: '2'
        },
        waiveCharges: {
            type: 'boolean',
            example: false
        },
        waiveInterest: {
            type: 'boolean',
            example: false
        },
        withdrawTransfer: {
            type: 'boolean',
            example: false
        },
        writeOff: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetLoansLoanIdLoanTransactionRelation = {
    type: 'object',
    description: 'List of GetLoansLoanIdLoanTransactionRelationData',
    properties: {
        amount: {
            type: 'number',
            example: 100
        },
        fromLoanTransaction: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        paymentType: {
            type: 'string',
            example: 'Repayment Adjustment Chargeback'
        },
        relationType: {
            type: 'string',
            example: 'CHARGEBACK'
        },
        toLoanCharge: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        toLoanTransaction: {
            type: 'integer',
            format: 'int64',
            example: 10
        }
    }
} as const;

export const $GetLoansLoanIdLoanType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'loanType.individual'
        },
        description: {
            type: 'string',
            example: 'Individual'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetLoansLoanIdOverdueCharges = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        amount: {
            type: 'number',
            format: 'float',
            example: 3
        },
        chargeAppliesTo: {
            '$ref': '#/components/schemas/GetLoanChargeTemplateChargeAppliesTo'
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetLoansLoanIdChargeCalculationType'
        },
        chargePaymentMode: {
            '$ref': '#/components/schemas/GetLoansLoanIdChargePaymentMode'
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetLoansLoanIdChargeTimeType'
        },
        currency: {
            '$ref': '#/components/schemas/GetLoanCurrency'
        },
        feeFrequency: {
            '$ref': '#/components/schemas/GetLoansLoanIdFeeFrequency'
        },
        feeInterval: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 20
        },
        name: {
            type: 'string',
            example: 'overdraft penality'
        },
        penalty: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetLoansLoanIdPaymentDetailData = {
    type: 'object',
    description: 'Payment detail',
    properties: {
        accountNumber: {
            type: 'string',
            example: 'acc123'
        },
        bankNumber: {
            type: 'string',
            example: 'ban123'
        },
        checkNumber: {
            type: 'string',
            example: 'che123'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 62
        },
        paymentType: {
            '$ref': '#/components/schemas/GetLoansLoanIdPaymentType'
        },
        receiptNumber: {
            type: 'string',
            example: 'rec123'
        },
        routingCode: {
            type: 'string',
            example: 'rou123'
        }
    }
} as const;

export const $GetLoansLoanIdPaymentType = {
    type: 'object',
    description: 'List of GetLoansLoanIdPaymentType',
    properties: {
        description: {
            type: 'string',
            example: 'Cash Payment'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        isCashPayment: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Cash'
        },
        position: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetLoansLoanIdRepaymentFrequencyType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'repaymentFrequency.periodFrequencyType.months'
        },
        description: {
            type: 'string',
            example: 'Months'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetLoansLoanIdRepaymentPeriod = {
    type: 'object',
    properties: {
        complete: {
            type: 'boolean',
            example: true
        },
        daysInPeriod: {
            type: 'integer',
            format: 'int64',
            example: 30
        },
        downPaymentPeriod: {
            type: 'boolean',
            example: true
        },
        dueDate: {
            type: 'string',
            format: 'date'
        },
        feeChargesDue: {
            type: 'number',
            example: 0
        },
        feeChargesOutstanding: {
            type: 'number',
            example: 20
        },
        feeChargesPaid: {
            type: 'number',
            example: 20
        },
        feeChargesWaived: {
            type: 'number',
            example: 20
        },
        feeChargesWrittenOff: {
            type: 'number',
            example: 20
        },
        fromDate: {
            type: 'string',
            format: 'date'
        },
        interestDue: {
            type: 'number',
            example: 0
        },
        interestOriginalDue: {
            type: 'number',
            example: 0
        },
        interestOutstanding: {
            type: 'number',
            example: 0
        },
        interestPaid: {
            type: 'number',
            example: 0
        },
        interestWaived: {
            type: 'number',
            example: 0
        },
        interestWrittenOff: {
            type: 'number',
            example: 0
        },
        obligationsMetOnDate: {
            type: 'string',
            format: 'date'
        },
        penaltyChargesDue: {
            type: 'number',
            example: 20
        },
        penaltyChargesOutstanding: {
            type: 'number',
            example: 20
        },
        penaltyChargesPaid: {
            type: 'number',
            example: 20
        },
        penaltyChargesWaived: {
            type: 'number',
            example: 20
        },
        penaltyChargesWrittenOff: {
            type: 'number',
            example: 20
        },
        period: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        principalDue: {
            type: 'number',
            example: 200
        },
        principalLoanBalanceOutstanding: {
            type: 'number',
            example: 20
        },
        principalOriginalDue: {
            type: 'number',
            example: 200
        },
        principalOutstanding: {
            type: 'number',
            example: 20
        },
        principalPaid: {
            type: 'number',
            example: 200
        },
        principalWrittenOff: {
            type: 'number',
            example: 0
        },
        totalActualCostOfLoanForPeriod: {
            type: 'number',
            example: 20
        },
        totalCredits: {
            type: 'number',
            example: 2
        },
        totalDueForPeriod: {
            type: 'number',
            example: 20
        },
        totalInstallmentAmountForPeriod: {
            type: 'number',
            example: 200
        },
        totalOriginalDueForPeriod: {
            type: 'number',
            example: 20
        },
        totalOutstandingForPeriod: {
            type: 'number',
            example: 200
        },
        totalPaidForPeriod: {
            type: 'number',
            example: 20
        },
        totalPaidInAdvanceForPeriod: {
            type: 'number',
            example: 20
        },
        totalPaidLateForPeriod: {
            type: 'number',
            example: 20
        },
        totalWaivedForPeriod: {
            type: 'number',
            example: 20
        },
        totalWrittenOffForPeriod: {
            type: 'number',
            example: 20
        }
    }
} as const;

export const $GetLoansLoanIdRepaymentSchedule = {
    type: 'object',
    properties: {
        currency: {
            '$ref': '#/components/schemas/GetLoansLoanIdCurrency'
        },
        loanTermInDays: {
            type: 'integer',
            format: 'int64',
            example: 30
        },
        periods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdRepaymentPeriod'
            }
        },
        totalFeeChargesCharged: {
            type: 'number',
            example: 0
        },
        totalInterestCharged: {
            type: 'number',
            example: 0
        },
        totalOutstanding: {
            type: 'number',
            example: 0
        },
        totalPaidInAdvance: {
            type: 'number',
            example: 200
        },
        totalPaidLate: {
            type: 'number',
            example: 0
        },
        totalPenaltyChargesCharged: {
            type: 'number',
            example: 0
        },
        totalPrincipalDisbursed: {
            type: 'number',
            example: 200
        },
        totalPrincipalExpected: {
            type: 'number',
            example: 200
        },
        totalPrincipalPaid: {
            type: 'number',
            example: 200
        },
        totalRepaymentExpected: {
            type: 'number',
            example: 200
        },
        totalWaived: {
            type: 'number',
            example: 0
        },
        totalWrittenOff: {
            type: 'number',
            example: 0
        }
    }
} as const;

export const $GetLoansLoanIdResponse = {
    type: 'object',
    description: 'GetLoansLoanIdResponse',
    properties: {
        accountNo: {
            type: 'string',
            example: '000000001'
        },
        amortizationType: {
            '$ref': '#/components/schemas/GetLoansLoanIdAmortizationType'
        },
        annualInterestRate: {
            type: 'number',
            example: 24
        },
        approvedPrincipal: {
            type: 'number',
            example: 1000
        },
        buyDownFeeCalculationType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        buyDownFeeIncomeType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        buyDownFeeStrategy: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeCalculationType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeStrategy: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        chargeOffBehaviour: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        chargedOff: {
            type: 'boolean',
            example: false
        },
        charges: {
            type: 'array',
            description: 'Set of charges',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdLoanChargeData'
            }
        },
        clientExternalId: {
            type: 'string',
            example: '5e77989e-aa11-11bc-b109-0242ac120004'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'Kampala first Client'
        },
        clientOfficeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        currency: {
            '$ref': '#/components/schemas/GetLoansLoanIdCurrency'
        },
        delinquencyRange: {
            '$ref': '#/components/schemas/DelinquencyRangeData'
        },
        delinquent: {
            '$ref': '#/components/schemas/GetLoansLoanIdDelinquencySummary'
        },
        disallowExpectedDisbursements: {
            type: 'boolean',
            example: false
        },
        disbursedAmountPercentageForDownPayment: {
            type: 'number',
            example: 0
        },
        disbursementDetails: {
            type: 'array',
            description: 'Set of GetLoansLoanIdDisbursementDetails',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdDisbursementDetails'
            },
            uniqueItems: true
        },
        emiAmountVariations: {
            type: 'array',
            description: 'List of GetLoansLoanIdLoanTermVariations',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdLoanTermVariations'
            }
        },
        enableAutoRepaymentForDownPayment: {
            type: 'boolean',
            example: false
        },
        enableBuyDownFee: {
            type: 'boolean',
            example: false
        },
        enableDownPayment: {
            type: 'boolean',
            example: false
        },
        enableIncomeCapitalization: {
            type: 'boolean',
            example: false
        },
        enableInstallmentLevelDelinquency: {
            type: 'boolean',
            example: false
        },
        externalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        fixedLength: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        fixedPrincipalPercentagePerInstallment: {
            type: 'number',
            example: 5.5
        },
        fraud: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        inArrearsTolerance: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        interestCalculationPeriodType: {
            '$ref': '#/components/schemas/GetLoansLoanIdInterestCalculationPeriodType'
        },
        interestRateFrequencyType: {
            '$ref': '#/components/schemas/GetLoansLoanIdInterestRateFrequencyType'
        },
        interestRatePerPeriod: {
            type: 'number',
            example: 24
        },
        interestRecognitionOnDisbursementDate: {
            type: 'boolean',
            example: false
        },
        interestType: {
            '$ref': '#/components/schemas/GetLoansLoanIdInterestType'
        },
        isFloatingInterestRate: {
            type: 'boolean',
            example: false
        },
        lastClosedBusinessDate: {
            type: 'string',
            format: 'date'
        },
        loanOfficerId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        loanOfficerName: {
            type: 'string',
            example: 'LoanOfficer, Kampala'
        },
        loanProductDescription: {
            type: 'string',
            example: 'Typical Kampala loan product with cash accounting enabled for testing.'
        },
        loanProductId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanProductName: {
            type: 'string',
            example: 'Kampala Product (with cash accounting)'
        },
        loanPurposeId: {
            type: 'integer',
            format: 'int64',
            example: 22
        },
        loanPurposeName: {
            type: 'string',
            example: 'option.HousingImprovement'
        },
        loanScheduleProcessingType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        loanScheduleType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        loanTermVariations: {
            type: 'array',
            description: 'List of GetLoansLoanIdLoanTermVariations',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdLoanTermVariations'
            }
        },
        loanType: {
            '$ref': '#/components/schemas/GetLoansLoanIdLoanType'
        },
        netDisbursalAmount: {
            type: 'number',
            example: 200
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 12
        },
        overpaidOnDate: {
            type: 'string',
            format: 'date'
        },
        principal: {
            type: 'number',
            example: 1000000
        },
        proposedPrincipal: {
            type: 'number',
            example: 1001
        },
        repaymentEvery: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        repaymentFrequencyType: {
            '$ref': '#/components/schemas/GetLoansLoanIdRepaymentFrequencyType'
        },
        repaymentSchedule: {
            '$ref': '#/components/schemas/GetLoansLoanIdRepaymentSchedule'
        },
        status: {
            '$ref': '#/components/schemas/GetLoansLoanIdStatus'
        },
        summary: {
            '$ref': '#/components/schemas/GetLoansLoanIdSummary'
        },
        termFrequency: {
            type: 'integer',
            format: 'int32',
            example: 12
        },
        termPeriodFrequencyType: {
            '$ref': '#/components/schemas/GetLoansLoanIdTermPeriodFrequencyType'
        },
        timeline: {
            '$ref': '#/components/schemas/GetLoansLoanIdTimeline'
        },
        totalOverpaid: {
            type: 'number',
            example: 250
        },
        transactionProcessingStrategyCode: {
            type: 'string',
            example: 'mifos-standard-strategy'
        },
        transactions: {
            type: 'array',
            description: 'Set of GetLoansLoanIdTransactions',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdTransactions'
            }
        }
    }
} as const;

export const $GetLoansLoanIdStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        closed: {
            type: 'boolean',
            example: false
        },
        closedObligationsMet: {
            type: 'boolean',
            example: false
        },
        closedRescheduled: {
            type: 'boolean',
            example: false
        },
        closedWrittenOff: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'loanStatusType.active'
        },
        description: {
            type: 'string',
            example: 'Active'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 300
        },
        overpaid: {
            type: 'boolean',
            example: false
        },
        pendingApproval: {
            type: 'boolean',
            example: false
        },
        waitingForDisbursal: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetLoansLoanIdSummary = {
    type: 'object',
    properties: {
        canDisburse: {
            type: 'boolean',
            example: false
        },
        chargeOffReason: {
            type: 'string',
            example: 'reason'
        },
        chargeOffReasonId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        currency: {
            '$ref': '#/components/schemas/GetLoansLoanIdCurrency'
        },
        disbursementDetails: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdDisbursementDetails'
            },
            uniqueItems: true
        },
        feeAdjustments: {
            type: 'number',
            example: 0
        },
        feeChargesCharged: {
            type: 'number',
            example: 18000
        },
        feeChargesDueAtDisbursementCharged: {
            type: 'number',
            example: 0
        },
        feeChargesOutstanding: {
            type: 'number',
            example: 18000
        },
        feeChargesOverdue: {
            type: 'number',
            example: 15000
        },
        feeChargesPaid: {
            type: 'number',
            example: 0
        },
        feeChargesWaived: {
            type: 'number',
            example: 0
        },
        feeChargesWrittenOff: {
            type: 'number',
            example: 0
        },
        fixedEmiAmount: {
            type: 'number',
            example: 1100
        },
        inArrears: {
            type: 'boolean',
            example: true
        },
        interestCharged: {
            type: 'number',
            example: 240000
        },
        interestOutstanding: {
            type: 'number',
            example: 240000
        },
        interestOverdue: {
            type: 'number',
            example: 200000
        },
        interestPaid: {
            type: 'number',
            example: 0
        },
        interestWaived: {
            type: 'number',
            example: 0
        },
        interestWrittenOff: {
            type: 'number',
            example: 0
        },
        isNPA: {
            type: 'boolean',
            example: false
        },
        linkedAccount: {
            '$ref': '#/components/schemas/GetLoansLoanIdLinkedAccount'
        },
        maxOutstandingLoanBalance: {
            type: 'number',
            example: 35000
        },
        overdueCharges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdOverdueCharges'
            },
            uniqueItems: true
        },
        overdueSinceDate: {
            type: 'string',
            format: 'date'
        },
        penaltyAdjustments: {
            type: 'number',
            example: 0
        },
        penaltyChargesCharged: {
            type: 'number',
            example: 0
        },
        penaltyChargesOutstanding: {
            type: 'number',
            example: 0
        },
        penaltyChargesOverdue: {
            type: 'number',
            example: 0
        },
        penaltyChargesPaid: {
            type: 'number',
            example: 0
        },
        penaltyChargesWaived: {
            type: 'number',
            example: 0
        },
        penaltyChargesWrittenOff: {
            type: 'number',
            example: 0
        },
        principalAdjustments: {
            type: 'number',
            example: 0
        },
        principalDisbursed: {
            type: 'number',
            example: 1000000
        },
        principalOutstanding: {
            type: 'number',
            example: 1000000
        },
        principalOverdue: {
            type: 'number',
            example: 833333.3
        },
        principalPaid: {
            type: 'number',
            example: 0
        },
        principalWrittenOff: {
            type: 'number',
            example: 0
        },
        totalCapitalizedIncome: {
            type: 'number',
            example: 1000000
        },
        totalCapitalizedIncomeAdjustment: {
            type: 'number',
            example: 0
        },
        totalChargeAdjustment: {
            type: 'number',
            example: 0
        },
        totalChargeAdjustmentReversed: {
            type: 'number',
            example: 0
        },
        totalChargeback: {
            type: 'number',
            example: 0
        },
        totalCostOfLoan: {
            type: 'number',
            example: 0
        },
        totalCreditBalanceRefund: {
            type: 'number',
            example: 0
        },
        totalCreditBalanceRefundReversed: {
            type: 'number',
            example: 0
        },
        totalExpectedCostOfLoan: {
            type: 'number',
            example: 258000
        },
        totalExpectedRepayment: {
            type: 'number',
            example: 1258000
        },
        totalGoodwillCredit: {
            type: 'number',
            example: 0
        },
        totalGoodwillCreditReversed: {
            type: 'number',
            example: 0
        },
        totalInterestPaymentWaiver: {
            type: 'number',
            example: 0
        },
        totalInterestRefund: {
            type: 'number',
            example: 0
        },
        totalMerchantRefund: {
            type: 'number',
            example: 0
        },
        totalMerchantRefundReversed: {
            type: 'number',
            example: 0
        },
        totalOutstanding: {
            type: 'number',
            example: 1258000
        },
        totalOverdue: {
            type: 'number',
            example: 1048333.3
        },
        totalPayoutRefund: {
            type: 'number',
            example: 0
        },
        totalPayoutRefundReversed: {
            type: 'number',
            example: 0
        },
        totalPrincipal: {
            type: 'number',
            example: 1000000
        },
        totalRecovered: {
            type: 'number',
            example: 2456.3
        },
        totalRepayment: {
            type: 'number',
            example: 0
        },
        totalRepaymentTransaction: {
            type: 'number',
            example: 0
        },
        totalRepaymentTransactionReversed: {
            type: 'number',
            example: 0
        },
        totalUnpaidPayableDueInterest: {
            type: 'number',
            example: 0
        },
        totalUnpaidPayableNotDueInterest: {
            type: 'number',
            example: 0
        },
        totalWaived: {
            type: 'number',
            example: 0
        },
        totalWrittenOff: {
            type: 'number',
            example: 0
        },
        writeoffReason: {
            type: 'string',
            example: 'reason'
        },
        writeoffReasonId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoansLoanIdTermPeriodFrequencyType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'termFrequency.periodFrequencyType.months'
        },
        description: {
            type: 'string',
            example: 'Months'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetLoansLoanIdTimeline = {
    type: 'object',
    properties: {
        actualDisbursementDate: {
            type: 'string',
            format: 'date'
        },
        actualMaturityDate: {
            type: 'string',
            format: 'date'
        },
        approvedByFirstname: {
            type: 'string',
            example: 'App'
        },
        approvedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        approvedByUsername: {
            type: 'string',
            example: 'admin'
        },
        approvedOnDate: {
            type: 'string',
            format: 'date'
        },
        chargedOffByFirstname: {
            type: 'string',
            example: 'App'
        },
        chargedOffByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        chargedOffByUsername: {
            type: 'string',
            example: 'admin'
        },
        chargedOffOnDate: {
            type: 'string',
            format: 'date'
        },
        closedOnDate: {
            type: 'string',
            format: 'date'
        },
        disbursedByFirstname: {
            type: 'string',
            example: 'App'
        },
        disbursedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        disbursedByUsername: {
            type: 'string',
            example: 'admin'
        },
        expectedDisbursementDate: {
            type: 'string',
            format: 'date'
        },
        expectedMaturityDate: {
            type: 'string',
            format: 'date'
        },
        submittedByFirstname: {
            type: 'string',
            example: 'App'
        },
        submittedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        submittedByUsername: {
            type: 'string',
            example: 'admin'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetLoansLoanIdTransactions = {
    type: 'object',
    description: 'Set of GetLoansLoanIdTransactions',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64',
            example: 7327
        },
        accountNumber: {
            type: 'string',
            example: 'acct123'
        },
        amount: {
            type: 'number',
            example: 100
        },
        bankNumber: {
            type: 'integer',
            format: 'int32',
            example: 34645568
        },
        checkNumber: {
            type: 'integer',
            format: 'int32',
            example: 10001
        },
        currency: {
            '$ref': '#/components/schemas/GetLoansLoanIdCurrency'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        externalId: {
            type: 'string',
            example: '3'
        },
        feeChargesPortion: {
            type: 'number',
            example: 100
        },
        fixedEmiAmount: {
            type: 'number',
            example: 100
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        interestPortion: {
            type: 'number',
            example: 100
        },
        loanChargePaidByList: {
            type: 'array',
            description: 'List of GetLoansLoanIdLoanChargePaidByData',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdLoanChargePaidByData'
            }
        },
        loanRepaymentScheduleInstallments: {
            type: 'array',
            description: 'List of GetLoansLoanIdLoanRepaymentScheduleInstallmentData',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdLoanRepaymentScheduleInstallmentData'
            }
        },
        locale: {
            type: 'string',
            example: 'de_DE'
        },
        manuallyReversed: {
            type: 'boolean'
        },
        netDisbursalAmount: {
            type: 'number',
            example: 100
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 4
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        outstandingLoanBalance: {
            type: 'number',
            example: 100
        },
        overpaymentPortion: {
            type: 'number',
            example: 100
        },
        paymentDetailData: {
            '$ref': '#/components/schemas/GetLoansLoanIdPaymentDetailData'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int32',
            example: 101
        },
        paymentTypeOptions: {
            type: 'array',
            description: 'List of GetLoansLoanIdPaymentType',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdPaymentType'
            }
        },
        penaltyChargesPortion: {
            type: 'number',
            example: 100
        },
        possibleNextRepaymentDate: {
            type: 'string',
            format: 'date'
        },
        principalPortion: {
            type: 'number',
            example: 100
        },
        receiptNumber: {
            type: 'integer',
            format: 'int32',
            example: 67863
        },
        reversalExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        reversedOnDate: {
            type: 'string',
            format: 'date'
        },
        routingCode: {
            type: 'integer',
            format: 'int32',
            example: 6337
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        transactionAmount: {
            type: 'number',
            example: 100
        },
        transactionDate: {
            type: 'string',
            format: 'date'
        },
        transactionRelations: {
            type: 'array',
            description: 'List of GetLoansLoanIdLoanTransactionRelationData',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdLoanTransactionRelation'
            },
            uniqueItems: true
        },
        transactionType: {
            type: 'string',
            example: 'repayment'
        },
        type: {
            '$ref': '#/components/schemas/GetLoansLoanIdLoanTransactionEnumData'
        },
        unrecognizedIncomePortion: {
            type: 'number',
            example: 100
        },
        writeOffReasonOptions: {
            type: 'array',
            description: 'List of GetLoansLoanIdCodeValueData',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdCodeValueData'
            }
        }
    }
} as const;

export const $GetLoansLoanIdTransactionsResponse = {
    type: 'object',
    description: 'GetLoansLoanIdTransactionsResponse',
    properties: {
        content: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdTransactionsTransactionIdResponse'
            }
        },
        empty: {
            type: 'boolean'
        },
        first: {
            type: 'boolean'
        },
        last: {
            type: 'boolean'
        },
        number: {
            type: 'integer',
            format: 'int32'
        },
        numberOfElements: {
            type: 'integer',
            format: 'int32'
        },
        pageable: {
            '$ref': '#/components/schemas/Pageable'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        sort: {
            '$ref': '#/components/schemas/Sort'
        },
        totalElements: {
            type: 'integer',
            format: 'int64'
        },
        totalPages: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $GetLoansLoanIdTransactionsTemplateResponse = {
    type: 'object',
    description: 'GetLoansLoanIdTransactionsTemplateResponse',
    properties: {
        amount: {
            type: 'number',
            format: 'double',
            example: 200
        },
        chargeOffReasonOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanProductsChargeOffReasonOptions'
            }
        },
        currency: {
            '$ref': '#/components/schemas/GetLoanCurrency'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        feeChargesPortion: {
            type: 'number',
            format: 'double',
            example: 20
        },
        interestPortion: {
            type: 'number',
            format: 'double',
            example: 80
        },
        netDisbursalAmount: {
            type: 'number',
            format: 'double',
            example: 200
        },
        paymentTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetPaymentTypeOptions'
            }
        },
        penaltyChargesPortion: {
            type: 'number',
            format: 'double',
            example: 20
        },
        principalPortion: {
            type: 'number',
            format: 'double',
            example: 100
        },
        total: {
            '$ref': '#/components/schemas/GetLoansTotal'
        },
        type: {
            '$ref': '#/components/schemas/GetLoansTransactionType'
        }
    }
} as const;

export const $GetLoansLoanIdTransactionsTransactionIdResponse = {
    type: 'object',
    description: 'GetLoansLoanIdTransactionsTransactionIdResponse',
    properties: {
        amount: {
            type: 'number',
            format: 'double',
            example: 559.88
        },
        currency: {
            '$ref': '#/components/schemas/GetLoansCurrency'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        externalId: {
            type: 'string',
            example: '20120514'
        },
        feeChargesPortion: {
            type: 'number',
            format: 'double',
            example: 23.9
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        interestPortion: {
            type: 'number',
            format: 'double',
            example: 559.88
        },
        loanChargePaidByList: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdLoanChargePaidByData'
            },
            uniqueItems: true
        },
        manuallyReversed: {
            type: 'boolean',
            example: false
        },
        netDisbursalAmount: {
            type: 'number',
            format: 'double',
            example: 1000
        },
        outstandingLoanBalance: {
            type: 'number',
            format: 'double',
            example: 100
        },
        overpaymentPortion: {
            type: 'number',
            format: 'double',
            example: 33
        },
        paymentDetailData: {
            '$ref': '#/components/schemas/PaymentDetailData'
        },
        penaltyChargesPortion: {
            type: 'number',
            format: 'double',
            example: 12.8
        },
        possibleNextRepaymentDate: {
            type: 'string',
            format: 'date'
        },
        principalPortion: {
            type: 'number',
            format: 'double',
            example: 240
        },
        reversalExternalId: {
            type: 'string',
            example: '20120514'
        },
        reversedOnDate: {
            type: 'string',
            format: 'date'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        transactionRelations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanTransactionRelation'
            },
            uniqueItems: true
        },
        type: {
            '$ref': '#/components/schemas/GetLoansType'
        },
        unrecognizedIncomePortion: {
            type: 'number',
            format: 'double',
            example: 55.5
        }
    }
} as const;

export const $GetLoansProductsInterestCalculationPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestCalculationPeriodType.same.as.repayment.period'
        },
        description: {
            type: 'string',
            example: 'Same as repayment period'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetLoansResponse = {
    type: 'object',
    description: 'GetLoansResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdResponse'
            },
            uniqueItems: true
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetLoansTemplateProductOptions = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Kampala Product (with cash accounting)'
        }
    }
} as const;

export const $GetLoansTemplateResponse = {
    type: 'object',
    description: 'GetLoansTemplateResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'Kampala first Client'
        },
        clientOfficeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        productOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoansTemplateProductOptions'
            },
            uniqueItems: true
        },
        timeline: {
            '$ref': '#/components/schemas/GetLoansTemplateTimeline'
        }
    }
} as const;

export const $GetLoansTemplateTimeline = {
    type: 'object',
    properties: {
        expectedDisbursementDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetLoansTotal = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            format: 'float',
            example: 471
        },
        currencyCode: {
            type: 'string',
            example: 'XOF'
        },
        defaultName: {
            type: 'string',
            example: 'CFA Franc BCEAO'
        },
        digitsAfterDecimal: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        displaySymbol: {
            type: 'string',
            example: 'CFA'
        },
        displaySymbolValue: {
            type: 'string',
            example: '471 CFA'
        },
        greaterThanZero: {
            type: 'boolean',
            example: true
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        nameCode: {
            type: 'string',
            example: 'currency.XOF'
        },
        zero: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetLoansTransactionType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'loanTransactionType.repayment'
        },
        description: {
            type: 'string',
            example: 'Repayment'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetLoansType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'loanTransactionType.repayment'
        },
        contra: {
            type: 'boolean',
            example: false
        },
        description: {
            type: 'string',
            example: 'Repayment'
        },
        disbursement: {
            type: 'boolean',
            example: false
        },
        externalId: {
            type: 'string',
            example: '3e7791ce-aa10-11ec-b909-0242ac120002'
        },
        externalLoanId: {
            type: 'string',
            example: '3e7791ce-aa10-11ec-b909-0242ac120002'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        recoveryRepayment: {
            type: 'boolean',
            example: false
        },
        repayment: {
            type: 'boolean',
            example: true
        },
        repaymentAtDisbursement: {
            type: 'boolean',
            example: false
        },
        waiveCharges: {
            type: 'boolean',
            example: false
        },
        waiveInterest: {
            type: 'boolean',
            example: false
        },
        writeOff: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetLockPeriodTypeEnum = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            example: 'Days'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetNotification = {
    type: 'object',
    properties: {
        action: {
            type: 'string',
            example: 'a'
        },
        actorId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        content: {
            type: 'string',
            example: 'a'
        },
        createdAt: {
            type: 'string',
            example: 'a'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        isRead: {
            type: 'boolean',
            example: true
        },
        isSystemGenerated: {
            type: 'boolean',
            example: true
        },
        objectId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        objectType: {
            type: 'string',
            example: 'a'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        tenantIdentifier: {
            type: 'string',
            example: 'a'
        },
        userIds: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int64'
            }
        }
    }
} as const;

export const $GetNotificationsResponse = {
    type: 'object',
    description: 'GetNotificationsResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetNotification'
            }
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 10
        }
    }
} as const;

export const $GetObligeeData = {
    type: 'object',
    properties: {
        accountNumber: {
            type: 'string',
            example: '00000002'
        },
        amountReleased: {
            type: 'number',
            format: 'double',
            example: 10000
        },
        amountTransferred: {
            type: 'number',
            format: 'double',
            example: 1000
        },
        displayName: {
            type: 'string',
            example: 'John Doe'
        },
        firstName: {
            type: 'string',
            example: 'John'
        },
        guaranteeAmount: {
            type: 'number',
            format: 'double',
            example: 100
        },
        lastName: {
            type: 'string',
            example: 'Doe'
        },
        loanAmount: {
            type: 'number',
            format: 'double',
            example: 12000
        }
    }
} as const;

export const $GetOfficesResponse = {
    type: 'object',
    description: 'GetOfficesResponse',
    properties: {
        allowedParents: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetOfficesResponse'
            }
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        externalId: {
            type: 'string',
            example: '1'
        },
        hierarchy: {
            type: 'string',
            example: '.'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'Head Office'
        },
        nameDecorated: {
            type: 'string',
            example: 'Head Office'
        },
        openingDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetOfficesTemplateResponse = {
    type: 'object',
    description: 'GetOfficesTemplateResponse',
    properties: {
        allowedParents: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetOfficesResponse'
            }
        },
        openingDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetPageItemsStandingInstructionSwagger = {
    type: 'object',
    properties: {
        accountDetailId: {
            type: 'integer',
            format: 'int64',
            example: 6
        },
        amount: {
            type: 'number',
            format: 'float',
            example: 150
        },
        fromAccount: {
            '$ref': '#/components/schemas/GetFromAccountStandingInstructionSwagger'
        },
        fromAccountType: {
            '$ref': '#/components/schemas/GetFromAccountTypeStandingInstructionSwagger'
        },
        fromClient: {
            '$ref': '#/components/schemas/GetFromClientStandingInstructionSwagger'
        },
        fromOffice: {
            '$ref': '#/components/schemas/GetFromOfficeStandingInstructionSwagger'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        instructionType: {
            '$ref': '#/components/schemas/GetInstructionTypeStandingInstructionSwagger'
        },
        name: {
            type: 'string',
            example: 'test standing'
        },
        priority: {
            '$ref': '#/components/schemas/GetPriorityStandingInstructionSwagger'
        },
        recurrenceFrequency: {
            '$ref': '#/components/schemas/GetRecurrenceFrequencyStandingInstructionSwagger'
        },
        recurrenceInterval: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recurrenceOnMonthDay: {
            type: 'string',
            format: 'date'
        },
        recurrenceType: {
            '$ref': '#/components/schemas/GetRecurrenceTypeStandingInstructionSwagger'
        },
        status: {
            '$ref': '#/components/schemas/GetStatusStandingInstructionSwagger'
        },
        toAccount: {
            '$ref': '#/components/schemas/GetToAccountStandingInstructionSwagger'
        },
        toAccountType: {
            '$ref': '#/components/schemas/GetToAccountTypeStandingInstructionSwagger'
        },
        toClient: {
            '$ref': '#/components/schemas/GetToClientStandingInstructionSwagger'
        },
        toOffice: {
            '$ref': '#/components/schemas/GetToOfficeStandingInstructionSwagger'
        },
        transferType: {
            '$ref': '#/components/schemas/GetTransferTypeStandingInstructionSwagger'
        },
        validFrom: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetPasswordPreferencesTemplateResponse = {
    type: 'object',
    description: 'GetPasswordPreferencesTemplateResponse',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        description: {
            type: 'string',
            example: 'Password must be at least 1 character and not more that 50 characters long'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        key: {
            type: 'string',
            example: 'simple'
        }
    }
} as const;

export const $GetPaymentTypeData = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        isSystemDefined: {
            type: 'boolean',
            example: false
        },
        name: {
            type: 'string',
            example: 'Money Transfer'
        }
    }
} as const;

export const $GetPaymentTypeOptions = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        name: {
            type: 'string',
            example: 'check'
        },
        position: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetPaymentTypesResponse = {
    type: 'object',
    description: 'GetPaymentTypesResponse',
    properties: {
        codeName: {
            type: 'string',
            example: 'REPAYMENT_REFUND'
        },
        description: {
            type: 'string',
            example: 'Cash'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 24
        },
        isCashPayment: {
            type: 'boolean',
            example: true
        },
        isSystemDefined: {
            type: 'boolean',
            example: false
        },
        name: {
            type: 'string',
            example: 'PTC'
        },
        position: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetPermissionsResponse = {
    type: 'object',
    description: 'GetPermissionsResponse',
    properties: {
        actionName: {
            type: 'string',
            example: 'READ'
        },
        code: {
            type: 'string',
            example: 'READ_PERMISSION'
        },
        entityName: {
            type: 'string',
            example: 'PERMISSION'
        },
        grouping: {
            type: 'string',
            example: 'authorisation'
        },
        selected: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetPocketData = {
    type: 'object',
    properties: {
        row: {
            type: 'string',
            example: '["Head Office", "000000001", "John Doe"  "2017-03-04", "786YYH7"'
        }
    }
} as const;

export const $GetPocketLoanAccounts = {
    type: 'object',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        accountNumber: {
            type: 'integer',
            format: 'int32',
            example: 11
        },
        accountType: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        pocketId: {
            type: 'integer',
            format: 'int64',
            example: 6
        }
    }
} as const;

export const $GetPocketSavingAccounts = {
    type: 'object',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        accountNumber: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        accountType: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        pocketId: {
            type: 'integer',
            format: 'int64',
            example: 6
        }
    }
} as const;

export const $GetPocketShareAccounts = {
    type: 'object'
} as const;

export const $GetPostDatedChecks = {
    type: 'object',
    description: 'GetPostDatedChecks',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 900800200300
        },
        amount: {
            type: 'number',
            example: 100000
        },
        date: {
            type: 'string',
            format: 'date',
            example: '2021-07-18'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        installmentId: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        name: {
            type: 'string',
            example: 'AMANA'
        }
    }
} as const;

export const $GetPriorityOptionsResponseStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'standingInstructionPriority.urgent'
        },
        description: {
            type: 'string',
            example: 'Urgent Priority'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetPriorityStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'standingInstructionPriority.medium'
        },
        description: {
            type: 'string',
            example: 'Medium Priority'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 3
        }
    }
} as const;

export const $GetProductsAccountingMappingOptions = {
    type: 'object',
    properties: {
        assetAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetProductsAssetAccountOptions'
            },
            uniqueItems: true
        },
        equityAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetProductsEquityAccountOptions'
            },
            uniqueItems: true
        },
        incomeAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetProductsIncomeAccountOptions'
            },
            uniqueItems: true
        },
        liabilityAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetProductsLiabilityAccountOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetProductsAccountingMappings = {
    type: 'object',
    properties: {
        incomeFromFeeAccountId: {
            '$ref': '#/components/schemas/GetIncomeFromFeeAccountId'
        },
        shareEquityId: {
            '$ref': '#/components/schemas/GetShareEquityId'
        },
        shareReferenceId: {
            '$ref': '#/components/schemas/GetShareReferenceId'
        },
        shareSuspenseId: {
            '$ref': '#/components/schemas/GetShareSuspenseId'
        }
    }
} as const;

export const $GetProductsAccountingRule = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountingRuleType.cash'
        },
        description: {
            type: 'string',
            example: 'CASH BASED'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetProductsAssetAccountOptions = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            example: 'DEFAULT_DESCRIPTION'
        },
        disabled: {
            type: 'boolean',
            example: false
        },
        glCode: {
            type: 'string',
            example: 'ASSET_ED1461237837829'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'ACCOUNT_NAME_1FJBQ'
        },
        nameDecorated: {
            type: 'string',
            example: 'ACCOUNT_NAME_1FJBQ'
        },
        tagId: {
            '$ref': '#/components/schemas/GetProductsTagId'
        },
        type: {
            '$ref': '#/components/schemas/GetAssetType'
        },
        usage: {
            '$ref': '#/components/schemas/GetProductsLiabilityUsage'
        }
    }
} as const;

export const $GetProductsCharges = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        amount: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        chargeAppliesTo: {
            '$ref': '#/components/schemas/GetChargeAppliesTo'
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetChargeCalculationType'
        },
        chargePaymentMode: {
            '$ref': '#/components/schemas/GetChargePaymentMode'
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetChargeTimeType'
        },
        currency: {
            '$ref': '#/components/schemas/GetChargesCurrency'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 20
        },
        name: {
            type: 'string',
            example: 'Share Account Activation Flat'
        },
        penalty: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetProductsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetProductsEquityAccountOptions = {
    type: 'object',
    properties: {
        disabled: {
            type: 'boolean',
            example: false
        },
        glCode: {
            type: 'string',
            example: 'EQUITY1'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 66
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Equity Account'
        },
        nameDecorated: {
            type: 'string',
            example: 'Equity Account'
        },
        tagId: {
            '$ref': '#/components/schemas/GetProductsTagId'
        },
        type: {
            '$ref': '#/components/schemas/GetEquityType'
        },
        usage: {
            '$ref': '#/components/schemas/GetProductsLiabilityUsage'
        }
    }
} as const;

export const $GetProductsIncomeAccountOptions = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            example: 'DEFAULT_DESCRIPTION'
        },
        disabled: {
            type: 'boolean',
            example: false
        },
        glCode: {
            type: 'string',
            example: 'INCOME_9O1461237838422'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'ACCOUNT_NAME_1FJBQ'
        },
        nameDecorated: {
            type: 'string',
            example: 'ACCOUNT_NAME_1FJBQ'
        },
        tagId: {
            '$ref': '#/components/schemas/GetProductsTagId'
        },
        type: {
            '$ref': '#/components/schemas/GetIncomeType'
        },
        usage: {
            '$ref': '#/components/schemas/GetProductsLiabilityUsage'
        }
    }
} as const;

export const $GetProductsLiabilityAccountOptions = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            example: 'DEFAULT_DESCRIPTION'
        },
        disabled: {
            type: 'boolean',
            example: false
        },
        glCode: {
            type: 'string',
            example: 'LIABILITY_2T1461237838897'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'ACCOUNT_NAME_1FJBQ'
        },
        nameDecorated: {
            type: 'string',
            example: 'ACCOUNT_NAME_1FJBQ'
        },
        tagId: {
            '$ref': '#/components/schemas/GetProductsTagId'
        },
        type: {
            '$ref': '#/components/schemas/GetProductsLiabilityType'
        },
        usage: {
            '$ref': '#/components/schemas/GetProductsLiabilityUsage'
        }
    }
} as const;

export const $GetProductsLiabilityType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.liability'
        },
        description: {
            type: 'string',
            example: 'LIABILITY'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetProductsLiabilityUsage = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountUsage.detail'
        },
        description: {
            type: 'string',
            example: 'DETAIL'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetProductsMarketPrice = {
    type: 'object',
    properties: {
        fromDate: {
            type: 'string',
            example: 'Feb 1, 2016'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        shareValue: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetProductsMinimumActivePeriodFrequencyTypeOptions = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.lockin.sharePeriodFrequencyType.days'
        },
        description: {
            type: 'string',
            example: 'Days'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetProductsPageItems = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Share Product'
        },
        shortName: {
            type: 'string',
            example: 'Share Product Description'
        },
        totalShares: {
            type: 'integer',
            format: 'int32',
            example: 100
        }
    }
} as const;

export const $GetProductsTagId = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        isActive: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetProductsTypeProductIdResponse = {
    type: 'object',
    description: 'GetProductsTypeProductIdResponse',
    properties: {
        accountingMappingOptions: {
            '$ref': '#/components/schemas/GetProductsAccountingMappingOptions'
        },
        accountingMappings: {
            '$ref': '#/components/schemas/GetProductsAccountingMappings'
        },
        accountingRule: {
            '$ref': '#/components/schemas/GetProductsAccountingRule'
        },
        allowDividendCalculationForInactiveClients: {
            type: 'boolean',
            example: true
        },
        chargeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetProductsCharges'
            },
            uniqueItems: true
        },
        charges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetProductsCharges'
            },
            uniqueItems: true
        },
        currency: {
            '$ref': '#/components/schemas/GetProductsCurrency'
        },
        currencyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetChargesCurrency'
            },
            uniqueItems: true
        },
        description: {
            type: 'string',
            example: 'SP'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        lockPeriodTypeEnum: {
            '$ref': '#/components/schemas/GetLockPeriodTypeEnum'
        },
        lockinPeriod: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        lockinPeriodFrequencyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetProductsMinimumActivePeriodFrequencyTypeOptions'
            },
            uniqueItems: true
        },
        marketPrice: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetProductsMarketPrice'
            },
            uniqueItems: true
        },
        maximumShares: {
            type: 'integer',
            format: 'int32',
            example: 50
        },
        minimumActivePeriod: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        minimumActivePeriodForDividendsTypeEnum: {
            '$ref': '#/components/schemas/GetLockPeriodTypeEnum'
        },
        minimumActivePeriodFrequencyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetProductsMinimumActivePeriodFrequencyTypeOptions'
            },
            uniqueItems: true
        },
        minimumShares: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Share Product'
        },
        nominalShares: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        shareCapital: {
            type: 'integer',
            format: 'int32',
            example: 50
        },
        shortName: {
            type: 'string',
            example: 'SP'
        },
        totalShares: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        totalSharesIssued: {
            type: 'integer',
            format: 'int32',
            example: 50
        },
        unitPrice: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetProductsTypeResponse = {
    type: 'object',
    description: 'GetProductsTypeResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetProductsPageItems'
            },
            uniqueItems: true
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetProvisioningCriteriaCriteriaIdResponse = {
    type: 'object',
    description: 'GetProvisioningCriteriaCriteriaIdResponse',
    properties: {
        createdBy: {
            type: 'string',
            example: 'mifos'
        },
        criteriaId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        criteriaName: {
            type: 'string',
            example: 'High Risk Products Criteria'
        },
        loanProducts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductData'
            }
        },
        provisioningcriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProvisioningCriteriaDefinitionData'
            }
        }
    }
} as const;

export const $GetProvisioningCriteriaResponse = {
    type: 'object',
    description: 'GetProvisioningCriteriaResponse',
    properties: {
        createdBy: {
            type: 'string',
            example: 'mifos'
        },
        criteriaId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        criteriaName: {
            type: 'string',
            example: 'High Risk Products Criteria'
        }
    }
} as const;

export const $GetRecurrenceFrequencyOptionsResponseStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'frequencyperiodFrequencyType.days'
        },
        description: {
            type: 'string',
            example: 'Days'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetRecurrenceFrequencyStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'frequencyperiodFrequencyType.months'
        },
        description: {
            type: 'string',
            example: 'Months'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetRecurrenceTypeOptionsResponseStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountTransferRecurrenceType.periodic'
        },
        description: {
            type: 'string',
            example: 'Periodic Recurrence'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetRecurrenceTypeStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountTransferRecurrenceType.periodic'
        },
        description: {
            type: 'string',
            example: 'Periodic Recurrence'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetRecurringCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 4
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetRecurringDepositAccountsAccountChart = {
    type: 'object',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64',
            example: 5
        },
        accountNumber: {
            type: 'integer',
            format: 'int64'
        },
        chartSlabs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetRecurringDepositAccountsChartSlabs'
            },
            uniqueItems: true
        },
        fromDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        periodTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetRecurringDepositAccountsPeriodTypes'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetRecurringDepositAccountsAccountChartCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetRecurringDepositAccountsAccountIdResponse = {
    type: 'object',
    description: 'GetRecurringDepositAccountsAccountIdResponse',
    properties: {
        accountChart: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsAccountChart'
        },
        accountNo: {
            type: 'integer',
            format: 'int64'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'Sangamesh N'
        },
        currency: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsCurrency'
        },
        depositPeriod: {
            type: 'integer',
            format: 'int32',
            example: 6
        },
        depositPeriodFrequency: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsDepositPeriodFrequency'
        },
        expectedFirstDepositOnDate: {
            type: 'string',
            format: 'date'
        },
        externalId: {
            type: 'string',
            example: 'RD-23'
        },
        fieldOfficerId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsInterestCalculationDaysInYearType'
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsInterestCalculationType'
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsInterestCompoundingPeriodType'
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsInterestPostingPeriodType'
        },
        maxDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 4
        },
        maxDepositTermType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsMaxDepositTermType'
        },
        minDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        minDepositTermType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsMinDepositTermType'
        },
        preClosurePenalApplicable: {
            type: 'boolean',
            example: false
        },
        recurringDepositAmount: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        recurringDepositFrequency: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recurringDepositFrequencyType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsRecurringDepositFrequencyType'
        },
        savingsProductId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        savingsProductName: {
            type: 'string',
            example: 'RD01'
        },
        status: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsStatus'
        },
        summary: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsSummary'
        },
        timeline: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsTimeline'
        }
    }
} as const;

export const $GetRecurringDepositAccountsChartSlabs = {
    type: 'object',
    properties: {
        annualInterestRate: {
            type: 'number',
            format: 'double',
            example: 5.5
        },
        currency: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsAccountChartCurrency'
        },
        fromPeriod: {
            type: 'integer',
            format: 'int32',
            example: 181
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 13
        },
        periodType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsPeriodType'
        },
        toPeriod: {
            type: 'integer',
            format: 'int32',
            example: 365
        }
    }
} as const;

export const $GetRecurringDepositAccountsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetRecurringDepositAccountsDepositPeriodFrequency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'deposit.period.savingsPeriodFrequencyType.months'
        },
        description: {
            type: 'string',
            example: 'Months'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetRecurringDepositAccountsInterestCalculationDaysInYearType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsInterestCalculationDaysInYearType.days365'
        },
        description: {
            type: 'string',
            example: '365 Days'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 365
        }
    }
} as const;

export const $GetRecurringDepositAccountsInterestCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsInterestCalculationType.dailybalance'
        },
        description: {
            type: 'string',
            example: 'Daily Balance'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetRecurringDepositAccountsInterestCompoundingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.period.savingsCompoundingInterestPeriodType.monthly'
        },
        description: {
            type: 'string',
            example: 'Monthly'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $GetRecurringDepositAccountsInterestPostingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.posting.period.savingsPostingInterestPeriodType.monthly'
        },
        description: {
            type: 'string',
            example: 'Monthly'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $GetRecurringDepositAccountsMaxDepositTermType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'deposit.term.savingsPeriodFrequencyType.years'
        },
        description: {
            type: 'string',
            example: 'Years'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $GetRecurringDepositAccountsMinDepositTermType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'deposit.term.savingsPeriodFrequencyType.months'
        },
        description: {
            type: 'string',
            example: 'Months'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetRecurringDepositAccountsPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestChartPeriodType.days'
        },
        description: {
            type: 'string',
            example: 'Days'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetRecurringDepositAccountsPeriodTypes = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestChartPeriodType.days'
        },
        description: {
            type: 'string',
            example: 'Days'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse = {
    type: 'object',
    description: 'GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        accountNo: {
            type: 'string',
            example: '000000001'
        },
        amount: {
            type: 'number',
            example: 100000
        },
        currency: {
            '$ref': '#/components/schemas/GetRecurringCurrency'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        paymentTypeOptions: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        reversed: {
            type: 'boolean',
            example: false
        },
        transactionType: {
            '$ref': '#/components/schemas/GetRecurringTransactionType'
        }
    }
} as const;

export const $GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse = {
    type: 'object',
    description: 'GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        accountNo: {
            type: 'string',
            example: '000000001'
        },
        amount: {
            type: 'number',
            format: 'float',
            example: 5000
        },
        currency: {
            '$ref': '#/components/schemas/GetRecurringTransactionsCurrency'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        paymentDetailData: {
            '$ref': '#/components/schemas/GetRecurringPaymentDetailData'
        },
        reversed: {
            type: 'boolean',
            example: true
        },
        runningBalance: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        transactionType: {
            '$ref': '#/components/schemas/GetRecurringTransactionsTransactionType'
        }
    }
} as const;

export const $GetRecurringDepositAccountsRecurringDepositFrequencyType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'recurring.deposit.savingsPeriodFrequencyType.months'
        },
        description: {
            type: 'string',
            example: 'Months'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $GetRecurringDepositAccountsResponse = {
    type: 'object',
    description: 'GetRecurringDepositAccountsResponse',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'Sangamesh N'
        },
        currency: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsCurrency'
        },
        depositAmount: {
            type: 'number',
            format: 'float',
            example: 1150
        },
        depositPeriod: {
            type: 'integer',
            format: 'int32',
            example: 6
        },
        depositPeriodFrequency: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsDepositPeriodFrequency'
        },
        fieldOfficerId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsInterestCalculationDaysInYearType'
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsInterestCalculationType'
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsInterestCompoundingPeriodType'
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsInterestPostingPeriodType'
        },
        maturityAmount: {
            type: 'number',
            format: 'float',
            example: 252.59
        },
        maturityDate: {
            type: 'string',
            format: 'date'
        },
        maxDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 4
        },
        maxDepositTermType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsMaxDepositTermType'
        },
        minDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        minDepositTermType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsMinDepositTermType'
        },
        preClosurePenalApplicable: {
            type: 'boolean',
            example: false
        },
        recurringDepositAmount: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        recurringDepositFrequency: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recurringDepositFrequencyType: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsRecurringDepositFrequencyType'
        },
        savingsProductId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        savingsProductName: {
            type: 'string',
            example: 'RD01'
        },
        status: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsStatus'
        },
        summary: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsSummary'
        },
        timeline: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsTimeline'
        }
    }
} as const;

export const $GetRecurringDepositAccountsStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        approved: {
            type: 'boolean',
            example: false
        },
        closed: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'savingsAccountStatusType.submitted.and.pending.approval'
        },
        description: {
            type: 'string',
            example: 'Submitted and pending approval'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 100
        },
        prematureClosed: {
            type: 'boolean',
            example: false
        },
        rejected: {
            type: 'boolean',
            example: false
        },
        submittedAndPendingApproval: {
            type: 'boolean',
            example: true
        },
        transferInProgress: {
            type: 'boolean',
            example: false
        },
        transferOnHold: {
            type: 'boolean',
            example: false
        },
        withdrawnByApplicant: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetRecurringDepositAccountsSummary = {
    type: 'object',
    properties: {
        accountBalance: {
            type: 'number',
            format: 'float',
            example: 0
        },
        currency: {
            '$ref': '#/components/schemas/GetRecurringDepositAccountsCurrency'
        }
    }
} as const;

export const $GetRecurringDepositAccountsTemplateResponse = {
    type: 'object',
    description: 'GetRecurringDepositAccountsTemplateResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'small business'
        },
        productOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetRecurringProductOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetRecurringDepositAccountsTimeline = {
    type: 'object',
    properties: {
        submittedByFirstname: {
            type: 'string',
            example: 'App'
        },
        submittedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        submittedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetRecurringDepositProductsAccountingRule = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountingRuleType.none'
        },
        description: {
            type: 'string',
            example: 'NONE'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetRecurringDepositProductsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetRecurringDepositProductsGlAccount = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: '2000001'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 12
        },
        name: {
            type: 'string',
            example: 'savings control'
        }
    }
} as const;

export const $GetRecurringDepositProductsInterestCalculationDaysInYearType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsInterestCalculationDaysInYearType.days365'
        },
        description: {
            type: 'string',
            example: '365 Days'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 365
        }
    }
} as const;

export const $GetRecurringDepositProductsInterestCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsInterestCalculationType.dailybalance'
        },
        description: {
            type: 'string',
            example: 'Daily Balance'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetRecurringDepositProductsInterestCompoundingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.period.savingsCompoundingInterestPeriodType.monthly'
        },
        description: {
            type: 'string',
            example: 'Monthly'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 4
        }
    }
} as const;

export const $GetRecurringDepositProductsInterestPostingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.posting.period.savingsPostingInterestPeriodType.monthly'
        },
        description: {
            type: 'string',
            example: 'Monthly'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 4
        }
    }
} as const;

export const $GetRecurringDepositProductsMaxDepositTermType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'deposit.term.savingsPeriodFrequencyType.years'
        },
        description: {
            type: 'string',
            example: 'Years'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 3
        }
    }
} as const;

export const $GetRecurringDepositProductsMinDepositTermType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'deposit.term.savingsPeriodFrequencyType.months'
        },
        description: {
            type: 'string',
            example: 'Months'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdAccountingMappings = {
    type: 'object',
    properties: {
        feeReceivableAccount: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsGlAccount'
        },
        incomeFromFeeAccount: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsGlAccount'
        },
        incomeFromPenaltyAccount: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsGlAccount'
        },
        interestOnSavingsAccount: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsGlAccount'
        },
        interestPayableAccount: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsGlAccount'
        },
        penaltyReceivableAccount: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsGlAccount'
        },
        savingsControlAccount: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsGlAccount'
        },
        transfersInSuspenseAccount: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsGlAccount'
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdActiveChart = {
    type: 'object',
    properties: {
        chartSlabs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdChartSlabs'
            },
            uniqueItems: true
        },
        fromDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 8
        },
        periodTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdPeriodType'
            },
            uniqueItems: true
        },
        savingsProductId: {
            type: 'integer',
            format: 'int64',
            example: 8
        },
        savingsProductName: {
            type: 'string',
            example: 'Recurring deposit product'
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdChartSlabs = {
    type: 'object',
    properties: {
        annualInterestRate: {
            type: 'number',
            format: 'double',
            example: 4.5
        },
        currency: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdCurrency'
        },
        description: {
            type: 'string',
            example: 'from 0 to 90 days'
        },
        fromPeriod: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 18
        },
        periodType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdPeriodType'
        },
        toPeriod: {
            type: 'integer',
            format: 'int32',
            example: 90
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdFeeToIncomeAccountMappings = {
    type: 'object',
    properties: {
        charge: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdFeeToIncomeAccountMappingsCharge'
        },
        incomeAccount: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdFeeToIncomeAccountMappingsIncomeAccount'
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdFeeToIncomeAccountMappingsCharge = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        name: {
            type: 'string',
            example: 'sav charge'
        },
        penalty: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdFeeToIncomeAccountMappingsIncomeAccount = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: '24'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 16
        },
        name: {
            type: 'string',
            example: 'income from savings fee'
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdInterestCompoundingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.period.savingsCompoundingInterestPeriodType.daily'
        },
        description: {
            type: 'string',
            example: 'Daily'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdMaxDepositTermType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'deposit.term.savingsPeriodFrequencyType.years'
        },
        description: {
            type: 'string',
            example: 'Years'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdMinDepositTermType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'deposit.term.savingsPeriodFrequencyType.weeks'
        },
        description: {
            type: 'string',
            example: 'Weeks'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdPenaltyToIncomeAccountMappings = {
    type: 'object',
    properties: {
        charge: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdPenaltyToIncomeAccountMappingsCharge'
        },
        incomeAccount: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsGlAccount'
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdPenaltyToIncomeAccountMappingsCharge = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 12
        },
        name: {
            type: 'string',
            example: 'sav 2'
        },
        penalty: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'interestChartPeriodType.weeks'
        },
        description: {
            type: 'string',
            example: 'Weeks'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdPreClosurePenalInterestOnType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'preClosurePenalInterestOnType.wholeTerm'
        },
        description: {
            type: 'string',
            example: 'Whole term'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetRecurringDepositProductsProductIdResponse = {
    type: 'object',
    description: 'GetRecurringDepositProductsProductIdResponse',
    properties: {
        accountingMappings: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdAccountingMappings'
        },
        activeChart: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdActiveChart'
        },
        currency: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdCurrency'
        },
        description: {
            type: 'string',
            example: 'Daily compounding using Daily Balance, 5% per year, 365 days in year'
        },
        feeToIncomeAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdFeeToIncomeAccountMappings'
            },
            uniqueItems: true
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsInterestCalculationDaysInYearType'
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsInterestCalculationType'
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdInterestCompoundingPeriodType'
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsInterestPostingPeriodType'
        },
        maxDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 5
        },
        maxDepositTermType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdMaxDepositTermType'
        },
        minDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        minDepositTermType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdMinDepositTermType'
        },
        name: {
            type: 'string',
            example: 'Recurring deposit product'
        },
        penaltyToIncomeAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdPenaltyToIncomeAccountMappings'
            },
            uniqueItems: true
        },
        preClosurePenalApplicable: {
            type: 'boolean',
            example: true
        },
        preClosurePenalInterest: {
            type: 'number',
            format: 'double',
            example: 1.75
        },
        preClosurePenalInterestOnType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsProductIdPreClosurePenalInterestOnType'
        },
        recurringDepositFrequency: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recurringDepositFrequencyType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsRecurringDepositFrequencyType'
        },
        shortName: {
            type: 'string',
            example: 'RD01'
        }
    }
} as const;

export const $GetRecurringDepositProductsRecurringDepositFrequencyType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'recurring.deposit.savingsPeriodFrequencyType.months'
        },
        description: {
            type: 'string',
            example: 'Months'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetRecurringDepositProductsResponse = {
    type: 'object',
    description: 'GetRecurringDepositProductsResponse',
    properties: {
        accountingRule: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsAccountingRule'
        },
        currency: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsCurrency'
        },
        description: {
            type: 'string',
            example: 'RD01'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsInterestCalculationDaysInYearType'
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsInterestCalculationType'
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsInterestCompoundingPeriodType'
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsInterestPostingPeriodType'
        },
        maxDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 4
        },
        maxDepositTermType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsMaxDepositTermType'
        },
        minDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        minDepositTermType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsMinDepositTermType'
        },
        name: {
            type: 'string',
            example: 'RD01'
        },
        nominalAnnualInterestRate: {
            type: 'number',
            format: 'double',
            example: 0
        },
        preClosurePenalApplicable: {
            type: 'boolean',
            example: false
        },
        recurringDepositFrequency: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recurringDepositFrequencyType: {
            '$ref': '#/components/schemas/GetRecurringDepositProductsRecurringDepositFrequencyType'
        },
        shortName: {
            type: 'string',
            example: 'RD01'
        }
    }
} as const;

export const $GetRecurringPaymentDetailData = {
    type: 'object',
    properties: {
        accountNumber: {
            type: 'integer',
            format: 'int32'
        },
        bankNumber: {
            type: 'integer',
            format: 'int32'
        },
        checkNumber: {
            type: 'integer',
            format: 'int32'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 62
        },
        paymentType: {
            '$ref': '#/components/schemas/GetRecurringPaymentType'
        },
        receiptNumber: {
            type: 'integer',
            format: 'int32'
        },
        routingCode: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $GetRecurringPaymentType = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        name: {
            type: 'string',
            example: 'cash'
        }
    }
} as const;

export const $GetRecurringProductOptions = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Passbook Savings'
        }
    }
} as const;

export const $GetRecurringTransactionType = {
    type: 'object',
    properties: {
        approveTransfer: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'savingsAccountTransactionType.deposit'
        },
        deposit: {
            type: 'boolean',
            example: true
        },
        description: {
            type: 'string',
            example: 'Deposit'
        },
        feeDeduction: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        initiateTransfer: {
            type: 'boolean',
            example: false
        },
        interestPosting: {
            type: 'boolean',
            example: false
        },
        overdraftFee: {
            type: 'boolean',
            example: true
        },
        overdraftInterest: {
            type: 'boolean',
            example: false
        },
        rejectTransfer: {
            type: 'boolean',
            example: false
        },
        withdrawTransfer: {
            type: 'boolean',
            example: false
        },
        withdrawal: {
            type: 'boolean',
            example: false
        },
        writtenoff: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetRecurringTransactionsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetRecurringTransactionsTransactionType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsAccountTransactionType.withdrawal'
        },
        deposit: {
            type: 'boolean',
            example: false
        },
        description: {
            type: 'string',
            example: 'Withdrawal'
        },
        feeDeduction: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        interestPosting: {
            type: 'boolean',
            example: false
        },
        withdrawal: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetReportMailingJobsResponse = {
    type: 'object',
    description: 'GetReportMailingJobsResponse',
    properties: {
        description: {
            type: 'string',
            example: 'Client Numbers Report'
        },
        emailAttachmentFileFormat: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        emailMessage: {
            type: 'string',
            example: 'Client Numbers Report'
        },
        emailRecipients: {
            type: 'string',
            example: 'info@musonisystem.com'
        },
        emailSubject: {
            type: 'string',
            example: 'Client Numbers Report'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Client Numbers Report'
        },
        nextRunDateTime: {
            type: 'string',
            format: 'date-time'
        },
        numberOfRuns: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        recurrence: {
            type: 'string'
        },
        runAsUserId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        startDateTime: {
            type: 'string',
            format: 'date-time'
        },
        stretchyReport: {
            '$ref': '#/components/schemas/ReportData'
        },
        stretchyReportParamMap: {
            type: 'string',
            example: '{"startDate":"2016-07-01","endDate":"2016-08-02","selectOffice":"1","environementUrl":"environementUrl"}'
        },
        timeline: {
            '$ref': '#/components/schemas/ReportMailingJobTimelineData'
        }
    }
} as const;

export const $GetReportMailingJobsTemplate = {
    type: 'object',
    description: 'GetReportMailingJobsTemplate',
    properties: {
        emailAttachmentFileFormatOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        stretchyReportParamDateOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        }
    }
} as const;

export const $GetReportsResponse = {
    type: 'object',
    description: 'GetReportsResponse',
    properties: {
        coreReport: {
            type: 'boolean',
            example: true
        },
        description: {
            type: 'string',
            example: 'Individual Client Report Lists the small number of defined fields on the client table.  Would expect to copy this report and add any one to one additional data for specific tenant needs. Can be run for any size MFI but you expect it only to be run within a branch for larger ones.  Depending on how many columns are displayed, there is probably is a limit of about 20/50k clients returned for html display (export to excel doesnt have that client browser/memory impact).'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        reportCategory: {
            type: 'string',
            example: 'Client'
        },
        reportName: {
            type: 'string',
            example: 'Client Listing'
        },
        reportParameters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReportParameterData'
            }
        },
        reportSql: {
            type: 'string'
        },
        reportSubType: {
            type: 'string'
        },
        reportType: {
            type: 'string',
            example: 'Table'
        },
        useReport: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetReportsTemplateResponse = {
    type: 'object',
    description: 'GetReportsTemplateResponse',
    properties: {
        allowedParameters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReportParameterData'
            }
        },
        allowedReportSubTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        allowedReportTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $GetRescheduleReasonsAllowedTypes = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        description: {
            type: 'string',
            example: 'description'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        mandatory: {
            type: 'boolean',
            example: false
        },
        name: {
            type: 'string',
            example: 'reason'
        },
        position: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetRescheduleReasonsTemplateResponse = {
    type: 'object',
    description: 'GetRescheduleReasonsTemplateResponse',
    properties: {
        rescheduleReasons: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetRescheduleReasonsAllowedTypes'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetRolesResponse = {
    type: 'object',
    description: 'GetRolesResponse',
    properties: {
        description: {
            type: 'string',
            example: 'This role provides all application permissions.'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Super Users'
        }
    }
} as const;

export const $GetRolesRoleIdPermissionsResponse = {
    type: 'object',
    description: 'GetRolesRoleIdPermissionsResponse',
    properties: {
        description: {
            type: 'string',
            example: 'This role provides all application permissions.'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Super Users'
        },
        permissionUsageData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetRolesRoleIdPermissionsResponsePermissionData'
            }
        }
    }
} as const;

export const $GetRolesRoleIdPermissionsResponsePermissionData = {
    type: 'object',
    properties: {
        actionName: {
            type: 'string',
            example: 'READ'
        },
        code: {
            type: 'string',
            example: 'READ_PERMISSION'
        },
        entityName: {
            type: 'string',
            example: 'PERMISSION'
        },
        grouping: {
            type: 'string',
            example: 'authorisation'
        },
        selected: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetRolesRoleIdResponse = {
    type: 'object',
    description: 'GetRolesRoleIdResponse',
    properties: {
        description: {
            type: 'string',
            example: 'This role provides all application permissions.'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Super Users'
        }
    }
} as const;

export const $GetRunReportColumnHeaders = {
    type: 'object',
    properties: {
        columnName: {
            type: 'string',
            example: 'Office/Branch'
        },
        columnType: {
            type: 'string',
            example: 'VARCHAR'
        },
        columnValues: {
            type: 'string',
            example: '[]'
        },
        isColumnNullable: {
            type: 'boolean',
            example: false
        },
        isColumnPrimaryKey: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetRunReportResponse = {
    type: 'object',
    description: 'GetRunReportResponse',
    properties: {
        columnHeaders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetRunReportColumnHeaders'
            },
            uniqueItems: true
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetPocketData'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetSavingsAccountChargesPaidByData = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            example: 0
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $GetSavingsAccountTransactionsPageItem = {
    type: 'object',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        accountNo: {
            type: 'string',
            example: '000000001'
        },
        amount: {
            type: 'number',
            example: 500
        },
        chargesPaidByData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsAccountChargesPaidByData'
            },
            uniqueItems: true
        },
        currency: {
            '$ref': '#/components/schemas/GetTransactionsCurrency'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        entryType: {
            type: 'string',
            enum: ['CREDIT', 'DEBIT'],
            example: 'CREDIT'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        interestedPostedAsOn: {
            type: 'boolean',
            example: false
        },
        isManualTransaction: {
            type: 'boolean',
            example: false
        },
        isReversal: {
            type: 'boolean',
            example: false
        },
        lienTransaction: {
            type: 'boolean',
            example: false
        },
        originalTransactionId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        paymentDetailData: {
            '$ref': '#/components/schemas/GetTransactionsPaymentDetailData'
        },
        releaseTransactionId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        reversed: {
            type: 'boolean',
            example: false
        },
        runningBalance: {
            type: 'number',
            example: 500
        },
        submittedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        transactionType: {
            '$ref': '#/components/schemas/GetTranscationEnumData'
        }
    }
} as const;

export const $GetSavingsAccountsResponse = {
    type: 'object',
    description: 'GetSavingsAccountsResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsPageItems'
            },
            uniqueItems: true
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSavingsAccountsSavingsAccountIdChargesResponse = {
    type: 'object',
    description: 'GetSavingsAccountsSavingsAccountIdChargesResponse',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64',
            example: 57
        },
        amount: {
            type: 'number',
            format: 'float',
            example: 100
        },
        amountOrPercentage: {
            type: 'number',
            format: 'float',
            example: 100
        },
        amountOutstanding: {
            type: 'number',
            format: 'float',
            example: 100
        },
        amountPaid: {
            type: 'number',
            format: 'float',
            example: 0
        },
        amountPercentageAppliedTo: {
            type: 'number',
            format: 'double',
            example: 0
        },
        amountWaived: {
            type: 'number',
            format: 'float',
            example: 0
        },
        amountWrittenOff: {
            type: 'number',
            format: 'float',
            example: 0
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetChargesChargeCalculationType'
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetChargesChargeTimeType'
        },
        currency: {
            '$ref': '#/components/schemas/GetChargesCurrencyResponse'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Savings account maintenance fee'
        },
        penalty: {
            type: 'boolean',
            example: false
        },
        percentage: {
            type: 'number',
            format: 'double',
            example: 0
        }
    }
} as const;

export const $GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse = {
    type: 'object',
    description: 'GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse',
    properties: {
        amount: {
            type: 'number',
            format: 'float',
            example: 100
        },
        amountOrPercentage: {
            type: 'number',
            format: 'float',
            example: 100
        },
        amountOutstanding: {
            type: 'number',
            format: 'float',
            example: 100
        },
        amountPaid: {
            type: 'number',
            format: 'float',
            example: 0
        },
        amountPercentageAppliedTo: {
            type: 'number',
            format: 'double',
            example: 0
        },
        amountWaived: {
            type: 'number',
            format: 'float',
            example: 0
        },
        amountWrittenOff: {
            type: 'number',
            format: 'float',
            example: 0
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetChargesChargeCalculationType'
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetChargesChargeTimeType'
        },
        currency: {
            '$ref': '#/components/schemas/GetChargesCurrencyResponse'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Passbook fee'
        },
        penalty: {
            type: 'boolean',
            example: false
        },
        percentage: {
            type: 'number',
            format: 'double',
            example: 0
        }
    }
} as const;

export const $GetSavingsAccountsSavingsAccountIdChargesTemplateResponse = {
    type: 'object',
    description: 'GetSavingsAccountsSavingsAccountIdChargesTemplateResponse',
    properties: {
        amountPaid: {
            type: 'number',
            format: 'float',
            example: 0
        },
        amountWaived: {
            type: 'number',
            format: 'float',
            example: 0
        },
        amountWrittenOff: {
            type: 'number',
            format: 'float',
            example: 0
        },
        chargeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsChargesOptions'
            },
            uniqueItems: true
        },
        penalty: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetSavingsAccountsTemplateResponse = {
    type: 'object',
    description: 'GetSavingsAccountsTemplateResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'small business'
        },
        productOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetSavingsAssetLiabilityType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.asset'
        },
        description: {
            type: 'string',
            example: 'ASSET'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSavingsAssetTagId = {
    type: 'object'
} as const;

export const $GetSavingsChargeCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeCalculationType.flat'
        },
        description: {
            type: 'string',
            example: 'Flat'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSavingsChargePaymentMode = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargepaymentmode.regular'
        },
        description: {
            type: 'string',
            example: 'chargepaymentmode.regular'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetSavingsChargeTimeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.specifiedDueDate'
        },
        description: {
            type: 'string',
            example: 'Specified due date'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSavingsChargesChargeTimeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.specifiedDueDate'
        },
        description: {
            type: 'string',
            example: 'Specified due date'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetSavingsChargesOptions = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        amount: {
            type: 'number',
            format: 'float',
            example: 100
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetChargesChargeCalculationType'
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetSavingsChargesChargeTimeType'
        },
        chargesAppliesTo: {
            '$ref': '#/components/schemas/GetChargesAppliesTo'
        },
        currency: {
            '$ref': '#/components/schemas/GetChargesCurrencyResponse'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        name: {
            type: 'string',
            example: 'Passbook Fee'
        },
        penalty: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetSavingsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetSavingsInterestCalculationDaysInYearType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsInterestCalculationDaysInYearType.days365'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 365
        },
        value: {
            type: 'string',
            example: '365 Days'
        }
    }
} as const;

export const $GetSavingsInterestCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsInterestCalculationType.dailybalance'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        value: {
            type: 'string',
            example: 'Daily Balance'
        }
    }
} as const;

export const $GetSavingsInterestCompoundingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.period.savingsCompoundingInterestPeriodType.daily'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        value: {
            type: 'string',
            example: 'Daily'
        }
    }
} as const;

export const $GetSavingsInterestPostingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.posting.period.savingsPostingInterestPeriodType.monthly'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 4
        },
        value: {
            type: 'string',
            example: 'Monthly'
        }
    }
} as const;

export const $GetSavingsPageItems = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'string',
            example: '000000001'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'small business'
        },
        currency: {
            '$ref': '#/components/schemas/GetSavingsCurrency'
        },
        fieldOfficerId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/GetSavingsInterestCalculationDaysInYearType'
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/GetSavingsInterestCalculationType'
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/GetSavingsInterestCompoundingPeriodType'
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/GetSavingsInterestPostingPeriodType'
        },
        nominalAnnualInterestRate: {
            type: 'number',
            format: 'double',
            example: 5
        },
        savingsProductId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsProductName: {
            type: 'string',
            example: 'Passbook Savings'
        },
        status: {
            '$ref': '#/components/schemas/GetSavingsStatus'
        },
        summary: {
            '$ref': '#/components/schemas/GetSavingsSummary'
        },
        timeline: {
            '$ref': '#/components/schemas/GetSavingsTimeline'
        }
    }
} as const;

export const $GetSavingsProductOptions = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Passbook Savings'
        }
    }
} as const;

export const $GetSavingsProductsAccountingMappingOptions = {
    type: 'object',
    properties: {
        assetAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsAssetAccountOptions'
            },
            uniqueItems: true
        },
        expenseAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsExpenseAccountOptions'
            },
            uniqueItems: true
        },
        incomeAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsIncomeAccountOptions'
            },
            uniqueItems: true
        },
        liabilityAccountOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsLiabilityAccountOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetSavingsProductsAccountingMappings = {
    type: 'object',
    properties: {
        feeReceivableAccount: {
            '$ref': '#/components/schemas/GetSavingsProductsGlAccount'
        },
        incomeFromFeeAccount: {
            '$ref': '#/components/schemas/GetSavingsProductsGlAccount'
        },
        incomeFromInterest: {
            '$ref': '#/components/schemas/GetSavingsProductsGlAccount'
        },
        incomeFromPenaltyAccount: {
            '$ref': '#/components/schemas/GetSavingsProductsGlAccount'
        },
        interestOnSavingsAccount: {
            '$ref': '#/components/schemas/GetSavingsProductsGlAccount'
        },
        interestPayableAccount: {
            '$ref': '#/components/schemas/GetSavingsProductsGlAccount'
        },
        interestReceivableAccount: {
            '$ref': '#/components/schemas/GetSavingsProductsGlAccount'
        },
        overdraftPortfolioControl: {
            '$ref': '#/components/schemas/GetSavingsProductsGlAccount'
        },
        penaltyReceivableAccount: {
            '$ref': '#/components/schemas/GetSavingsProductsGlAccount'
        },
        savingsControlAccount: {
            '$ref': '#/components/schemas/GetSavingsProductsGlAccount'
        },
        savingsReferenceAccount: {
            '$ref': '#/components/schemas/GetSavingsProductsGlAccount'
        },
        transfersInSuspenseAccount: {
            '$ref': '#/components/schemas/GetSavingsProductsGlAccount'
        },
        writeOffAccount: {
            '$ref': '#/components/schemas/GetSavingsProductsGlAccount'
        }
    }
} as const;

export const $GetSavingsProductsAccountingRule = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountingRuleType.cash'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        value: {
            type: 'string',
            example: 'CASH BASED'
        }
    }
} as const;

export const $GetSavingsProductsAssetAccountOptions = {
    type: 'object',
    properties: {
        disabled: {
            type: 'boolean',
            example: false
        },
        glCode: {
            type: 'string',
            example: '100001'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Cash'
        },
        tagId: {
            '$ref': '#/components/schemas/GetSavingsAssetTagId'
        },
        type: {
            '$ref': '#/components/schemas/GetSavingsAssetLiabilityType'
        },
        usage: {
            '$ref': '#/components/schemas/GetSavingsProductsLiabilityUsage'
        }
    }
} as const;

export const $GetSavingsProductsChargeAppliesTo = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeAppliesTo.savings'
        },
        description: {
            type: 'string',
            example: 'Savings'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetSavingsProductsChargeOptions = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        amount: {
            type: 'integer',
            format: 'int64',
            example: 200
        },
        chargeAppliesTo: {
            '$ref': '#/components/schemas/GetSavingsProductsChargeAppliesTo'
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetSavingsChargeCalculationType'
        },
        chargePaymentMode: {
            '$ref': '#/components/schemas/GetSavingsChargePaymentMode'
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetSavingsChargeTimeType'
        },
        currency: {
            '$ref': '#/components/schemas/GetSavingsCurrency'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        name: {
            type: 'string',
            example: 'Savings charge 1'
        },
        penalty: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetSavingsProductsExpenseAccountOptions = {
    type: 'object',
    properties: {
        disabled: {
            type: 'boolean',
            example: false
        },
        glCode: {
            type: 'string',
            example: '60001'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 6
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Write Off Expenses'
        },
        tagId: {
            '$ref': '#/components/schemas/GetSavingsAssetTagId'
        },
        type: {
            '$ref': '#/components/schemas/GetSavingsProductsExpenseType'
        },
        usage: {
            '$ref': '#/components/schemas/GetSavingsProductsLiabilityUsage'
        }
    }
} as const;

export const $GetSavingsProductsExpenseType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.expense'
        },
        description: {
            type: 'string',
            example: 'EXPENSE'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 5
        }
    }
} as const;

export const $GetSavingsProductsFeeToIncomeAccountMappings = {
    type: 'object',
    properties: {
        charge: {
            '$ref': '#/components/schemas/GetSavingsProductsFeeToIncomeAccountMappingsCharge'
        },
        incomeAccount: {
            '$ref': '#/components/schemas/GetSavingsProductsFeeToIncomeAccountMappingsIncomeAccount'
        }
    }
} as const;

export const $GetSavingsProductsFeeToIncomeAccountMappingsCharge = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        name: {
            type: 'string',
            example: 'sav charge'
        },
        penalty: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetSavingsProductsFeeToIncomeAccountMappingsIncomeAccount = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: '24'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 16
        },
        name: {
            type: 'string',
            example: 'income from savings fee'
        }
    }
} as const;

export const $GetSavingsProductsFundSourceAccount = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: '20'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 12
        },
        name: {
            type: 'string',
            example: 'savings ref'
        }
    }
} as const;

export const $GetSavingsProductsGlAccount = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: '2000001'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 12
        },
        name: {
            type: 'string',
            example: 'savings control'
        }
    }
} as const;

export const $GetSavingsProductsIncomeAccountOptions = {
    type: 'object',
    properties: {
        disabled: {
            type: 'boolean',
            example: false
        },
        glCode: {
            type: 'string',
            example: '40001'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'income from interest'
        },
        tagId: {
            '$ref': '#/components/schemas/GetSavingsAssetTagId'
        },
        type: {
            '$ref': '#/components/schemas/GetSavingsProductsIncomeType'
        },
        usage: {
            '$ref': '#/components/schemas/GetSavingsProductsLiabilityUsage'
        }
    }
} as const;

export const $GetSavingsProductsIncomeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.income'
        },
        description: {
            type: 'string',
            example: 'INCOME'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 4
        }
    }
} as const;

export const $GetSavingsProductsInterestCalculationDaysInYearType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsInterestCalculationDaysInYearType.days365'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 365
        },
        value: {
            type: 'string',
            example: '365 Days'
        }
    }
} as const;

export const $GetSavingsProductsInterestCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsInterestCalculationType.dailybalance'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        value: {
            type: 'string',
            example: 'Daily Balance'
        }
    }
} as const;

export const $GetSavingsProductsInterestCompoundingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.period.savingsCompoundingInterestPeriodType.daily'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        value: {
            type: 'string',
            example: 'Daily'
        }
    }
} as const;

export const $GetSavingsProductsInterestPostingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.posting.period.savingsPostingInterestPeriodType.monthly'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 4
        },
        value: {
            type: 'string',
            example: 'Monthly'
        }
    }
} as const;

export const $GetSavingsProductsLiabilityAccountOptions = {
    type: 'object',
    properties: {
        disabled: {
            type: 'boolean',
            example: false
        },
        glCode: {
            type: 'string',
            example: '50001'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 15
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Savings Control'
        },
        nameDecorated: {
            type: 'string',
            example: 'Savings Control'
        },
        tagId: {
            '$ref': '#/components/schemas/GetSavingsProductsLiabilityTagId'
        },
        type: {
            '$ref': '#/components/schemas/GetSavingsProductsLiabilityType'
        },
        usage: {
            '$ref': '#/components/schemas/GetSavingsProductsLiabilityUsage'
        }
    }
} as const;

export const $GetSavingsProductsLiabilityTagId = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetSavingsProductsLiabilityType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.liability'
        },
        description: {
            type: 'string',
            example: 'LIABILITY'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetSavingsProductsLiabilityUsage = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountUsage.detail'
        },
        description: {
            type: 'string',
            example: 'DETAIL'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSavingsProductsLockinPeriodFrequencyTypeOptions = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.lockin.savingsPeriodFrequencyType.days'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        value: {
            type: 'string',
            example: 'Days'
        }
    }
} as const;

export const $GetSavingsProductsPaymentChannelToFundSourceMappings = {
    type: 'object',
    properties: {
        fundSourceAccount: {
            '$ref': '#/components/schemas/GetSavingsProductsFundSourceAccount'
        },
        paymentType: {
            '$ref': '#/components/schemas/GetSavingsProductsPaymentType'
        }
    }
} as const;

export const $GetSavingsProductsPaymentType = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        name: {
            type: 'string',
            example: 'check'
        }
    }
} as const;

export const $GetSavingsProductsPaymentTypeOptions = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            example: 'Money Transfer'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 14
        },
        isCashPayment: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Wire Transfer'
        },
        position: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetSavingsProductsPenaltyToIncomeAccountMappings = {
    type: 'object',
    properties: {
        charge: {
            '$ref': '#/components/schemas/GetSavingsProductsPenaltyToIncomeAccountMappingsCharge'
        },
        incomeAccount: {
            '$ref': '#/components/schemas/GetSavingsProductsGlAccount'
        }
    }
} as const;

export const $GetSavingsProductsPenaltyToIncomeAccountMappingsCharge = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 12
        },
        name: {
            type: 'string',
            example: 'sav 2'
        },
        penalty: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetSavingsProductsProductIdResponse = {
    type: 'object',
    description: 'GetSavingsProductsProductIdResponse',
    properties: {
        accountingMappings: {
            '$ref': '#/components/schemas/GetSavingsProductsAccountingMappings'
        },
        accountingRule: {
            '$ref': '#/components/schemas/GetSavingsProductsAccountingRule'
        },
        charges: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        currency: {
            '$ref': '#/components/schemas/GetSavingsCurrency'
        },
        description: {
            type: 'string',
            example: 'gtasga'
        },
        feeToIncomeAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsFeeToIncomeAccountMappings'
            },
            uniqueItems: true
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/GetSavingsProductsInterestCalculationDaysInYearType'
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/GetSavingsProductsInterestCalculationType'
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/GetSavingsProductsInterestCompoundingPeriodType'
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/GetSavingsProductsInterestPostingPeriodType'
        },
        name: {
            type: 'string',
            example: 'savings product'
        },
        nominalAnnualInterestRate: {
            type: 'number',
            example: 5
        },
        paymentChannelToFundSourceMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsPaymentChannelToFundSourceMappings'
            },
            uniqueItems: true
        },
        penaltyToIncomeAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsPenaltyToIncomeAccountMappings'
            },
            uniqueItems: true
        },
        shortName: {
            type: 'string',
            example: 'sa1'
        },
        withdrawalFeeForTransfers: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetSavingsProductsResponse = {
    type: 'object',
    description: 'GetSavingsProductsResponse',
    properties: {
        accountingRule: {
            '$ref': '#/components/schemas/GetSavingsProductsAccountingRule'
        },
        currency: {
            '$ref': '#/components/schemas/GetSavingsCurrency'
        },
        description: {
            type: 'string',
            example: 'gtasga'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/GetSavingsProductsInterestCalculationDaysInYearType'
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/GetSavingsProductsInterestCalculationType'
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/GetSavingsProductsInterestCompoundingPeriodType'
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/GetSavingsProductsInterestPostingPeriodType'
        },
        name: {
            type: 'string',
            example: 'Savings product'
        },
        nominalAnnualInterestRate: {
            type: 'number',
            example: 5
        },
        shortName: {
            type: 'string',
            example: 'sa1'
        },
        withdrawalFeeForTransfers: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetSavingsProductsTemplateAccountingRule = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountingRuleType.none'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        value: {
            type: 'string',
            example: 'NONE'
        }
    }
} as const;

export const $GetSavingsProductsTemplateResponse = {
    type: 'object',
    description: 'GetSavingsProductsTemplateResponse',
    properties: {
        accountMapping: {
            '$ref': '#/components/schemas/GetSavingsCurrency'
        },
        accountingMappingOptions: {
            '$ref': '#/components/schemas/GetSavingsProductsAccountingMappingOptions'
        },
        accountingRule: {
            '$ref': '#/components/schemas/GetSavingsProductsTemplateAccountingRule'
        },
        accountingRuleOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsTemplateAccountingRule'
            },
            uniqueItems: true
        },
        chargeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsChargeOptions'
            },
            uniqueItems: true
        },
        currency: {
            '$ref': '#/components/schemas/GetSavingsCurrency'
        },
        currencyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsCurrency'
            },
            uniqueItems: true
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/GetSavingsProductsInterestCalculationDaysInYearType'
        },
        interestCalculationDaysInYearTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsInterestCalculationDaysInYearType'
            },
            uniqueItems: true
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/GetSavingsProductsInterestCalculationType'
        },
        interestCalculationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsInterestCalculationType'
            },
            uniqueItems: true
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/GetSavingsProductsInterestCompoundingPeriodType'
        },
        interestCompoundingPeriodTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsInterestCompoundingPeriodType'
            },
            uniqueItems: true
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/GetSavingsProductsInterestPostingPeriodType'
        },
        interestPostingPeriodTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsInterestPostingPeriodType'
            },
            uniqueItems: true
        },
        lockinPeriodFrequencyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsLockinPeriodFrequencyTypeOptions'
            },
            uniqueItems: true
        },
        paymentTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsPaymentTypeOptions'
            },
            uniqueItems: true
        },
        withdrawalFeeTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsProductsWithdrawalFeeTypeOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetSavingsProductsWithdrawalFeeTypeOptions = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsWithdrawalFeesType.flat'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        value: {
            type: 'string',
            example: 'Flat'
        }
    }
} as const;

export const $GetSavingsStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        approved: {
            type: 'boolean',
            example: false
        },
        closed: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'savingsAccountStatusType.submitted.and.pending.approval'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        rejected: {
            type: 'boolean',
            example: false
        },
        submittedAndPendingApproval: {
            type: 'boolean',
            example: true
        },
        value: {
            type: 'string',
            example: 'Submitted and pending approval'
        },
        withdrawnByApplicant: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetSavingsSummary = {
    type: 'object',
    properties: {
        accountBalance: {
            type: 'number',
            example: 0
        },
        currency: {
            '$ref': '#/components/schemas/GetSavingsCurrency'
        }
    }
} as const;

export const $GetSavingsTimeline = {
    type: 'object',
    properties: {
        activatedOnDate: {
            type: 'string',
            format: 'date'
        },
        approvedByFirstname: {
            type: 'string',
            example: 'name'
        },
        approvedByLastname: {
            type: 'string',
            example: 'lastname'
        },
        approvedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        approvedOnDate: {
            type: 'string',
            format: 'date'
        },
        submittedByFirstname: {
            type: 'string',
            example: 'name'
        },
        submittedByLastname: {
            type: 'string',
            example: 'lastname'
        },
        submittedByUsername: {
            type: 'string',
            example: 'username'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetSchedulerResponse = {
    type: 'object',
    description: 'GetSchedulerResponse',
    properties: {
        active: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetSearchResponse = {
    type: 'object',
    description: 'GetSearchResponse',
    properties: {
        entityAccountNo: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        entityExternalId: {
            type: 'string',
            example: 'ID_JKZGEXF'
        },
        entityId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        entityName: {
            type: 'string',
            example: 'Group_Name_HVCU5'
        },
        entityStatus: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        entityType: {
            type: 'string',
            example: 'GROUP'
        },
        parentId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        parentName: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetSelfBeneficiariesAccountOptions = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.savings'
        },
        description: {
            type: 'string',
            example: 'Savings Account'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetSelfBeneficiariesTPTResponse = {
    type: 'object',
    description: 'GetSelfBeneficiariesTPTResponse',
    properties: {
        accountNumber: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        accountType: {
            '$ref': '#/components/schemas/GetSelfBeneficiariesAccountOptions'
        },
        clientName: {
            type: 'string',
            example: 'FN2 LN2'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Client2Savings'
        },
        officeName: {
            type: 'string',
            example: 'Test Office'
        },
        transferLimit: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetSelfBeneficiariesTPTTemplateResponse = {
    type: 'object',
    description: 'GetSelfBeneficiariesTPTTemplateResponse',
    properties: {
        accountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSelfBeneficiariesAccountOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetSelfClientsChargeCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeCalculationType.flat'
        },
        description: {
            type: 'string',
            example: 'Flat'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSelfClientsChargeTimeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.specifiedDueDate'
        },
        description: {
            type: 'string',
            example: 'Specified due date'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetSelfClientsChargesPageItems = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            format: 'float',
            example: 550
        },
        amountOutstanding: {
            type: 'number',
            format: 'float',
            example: 550
        },
        amountPaid: {
            type: 'number',
            format: 'float',
            example: 0
        },
        amountWaived: {
            type: 'number',
            format: 'float',
            example: 0
        },
        amountWrittenOff: {
            type: 'number',
            format: 'float',
            example: 0
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetSelfClientsChargeCalculationType'
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 6
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetSelfClientsChargeTimeType'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        currency: {
            '$ref': '#/components/schemas/GetSelfClientsSavingsAccountsCurrency'
        },
        dueDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 5
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        isPaid: {
            type: 'boolean',
            example: false
        },
        isWaived: {
            type: 'boolean',
            example: false
        },
        name: {
            type: 'string',
            example: 'Client Fees 2'
        },
        penalty: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetSelfClientsClientIdAccountsResponse = {
    type: 'object',
    description: 'GetSelfClientsClientIdAccountsResponse',
    properties: {
        loanAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSelfClientsLoanAccounts'
            },
            uniqueItems: true
        },
        savingsAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSelfClientsSavingsAccounts'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetSelfClientsClientIdChargesChargeIdResponse = {
    type: 'object',
    description: 'GetSelfClientsClientIdChargesChargeIdResponse',
    properties: {
        amount: {
            type: 'number',
            format: 'float',
            example: 100
        },
        amountOutstanding: {
            type: 'number',
            format: 'float',
            example: 0
        },
        amountPaid: {
            type: 'number',
            format: 'float',
            example: 0
        },
        amountWaived: {
            type: 'number',
            format: 'float',
            example: 100
        },
        amountWrittenOff: {
            type: 'number',
            format: 'float',
            example: 0
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetSelfClientsChargeCalculationType'
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 5
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetSelfClientsChargeTimeType'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        currency: {
            '$ref': '#/components/schemas/GetSelfClientsSavingsAccountsCurrency'
        },
        dueDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        isPaid: {
            type: 'boolean',
            example: false
        },
        isWaived: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Client Fee 1'
        },
        penalty: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetSelfClientsClientIdChargesResponse = {
    type: 'object',
    description: 'GetSelfClientsClientIdChargesResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSelfClientsChargesPageItems'
            },
            uniqueItems: true
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 4
        }
    }
} as const;

export const $GetSelfClientsClientIdResponse = {
    type: 'object',
    description: 'GetSelfClientsClientIdResponse',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 27
        },
        activationDate: {
            type: 'string',
            format: 'date'
        },
        active: {
            type: 'boolean',
            example: true
        },
        displayName: {
            type: 'string',
            example: 'savings test'
        },
        firstname: {
            type: 'string',
            example: 'savings'
        },
        groups: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 27
        },
        lastname: {
            type: 'string',
            example: 'test'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        savingsProductId: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        savingsProductName: {
            type: 'string',
            example: 'account overdraft'
        },
        status: {
            '$ref': '#/components/schemas/GetSelfClientsStatus'
        },
        timeline: {
            '$ref': '#/components/schemas/GetSelfClientsTimeline'
        }
    }
} as const;

export const $GetSelfClientsClientIdTransactionsPageItems = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            format: 'double',
            example: 22
        },
        currency: {
            '$ref': '#/components/schemas/GetSelfClientsSavingsAccountsCurrency'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 226
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        reversed: {
            type: 'boolean',
            example: false
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        type: {
            '$ref': '#/components/schemas/GetSelfClientsClientIdTransactionsType'
        }
    }
} as const;

export const $GetSelfClientsClientIdTransactionsResponse = {
    type: 'object',
    description: 'GetSelfClientsClientIdTransactionsResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSelfClientsClientIdTransactionsPageItems'
            },
            uniqueItems: true
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 20
        }
    }
} as const;

export const $GetSelfClientsClientIdTransactionsTransactionIdResponse = {
    type: 'object',
    description: 'GetSelfClientsClientIdTransactionsTransactionIdResponse',
    properties: {
        amount: {
            type: 'number',
            format: 'float',
            example: 60
        },
        currency: {
            '$ref': '#/components/schemas/GetSelfClientsSavingsAccountsCurrency'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        reversed: {
            type: 'boolean',
            example: true
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        type: {
            '$ref': '#/components/schemas/GetSelfClientsClientIdTransactionsType'
        }
    }
} as const;

export const $GetSelfClientsClientIdTransactionsType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'clientTransactionType.payCharge'
        },
        description: {
            type: 'string',
            example: 'PAY_CHARGE'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSelfClientsLoanAccounts = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        externalId: {
            type: 'string',
            example: '36efeb06-d835-48a1-99eb-09bd1d348c1e'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanCycle: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        loanType: {
            '$ref': '#/components/schemas/GetSelfClientsLoanAccountsType'
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'TestOne'
        },
        status: {
            '$ref': '#/components/schemas/GetSelfClientsLoanAccountsStatus'
        }
    }
} as const;

export const $GetSelfClientsLoanAccountsStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        closed: {
            type: 'boolean',
            example: false
        },
        closedObligationsMet: {
            type: 'boolean',
            example: false
        },
        closedRescheduled: {
            type: 'boolean',
            example: false
        },
        closedWrittenOff: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'loanStatusType.active'
        },
        description: {
            type: 'string',
            example: 'Active'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 300
        },
        overpaid: {
            type: 'boolean',
            example: false
        },
        pendingApproval: {
            type: 'boolean',
            example: false
        },
        waitingForDisbursal: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetSelfClientsLoanAccountsType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'loanType.individual'
        },
        description: {
            type: 'string',
            example: 'Individual'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSelfClientsPageItems = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        activationDate: {
            type: 'string',
            format: 'date'
        },
        active: {
            type: 'boolean',
            example: true
        },
        displayName: {
            type: 'string',
            example: 'Small shop'
        },
        fullname: {
            type: 'string',
            example: 'Small shop'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        status: {
            '$ref': '#/components/schemas/GetSelfClientsStatus'
        }
    }
} as const;

export const $GetSelfClientsResponse = {
    type: 'object',
    description: 'GetSelfClientsResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSelfClientsPageItems'
            },
            uniqueItems: true
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetSelfClientsSavingsAccounts = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 7
        },
        currency: {
            '$ref': '#/components/schemas/GetSelfClientsSavingsAccountsCurrency'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 7
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        productName: {
            type: 'string',
            example: 'Other product'
        },
        status: {
            '$ref': '#/components/schemas/GetSelfClientsSavingsAccountsStatus'
        }
    }
} as const;

export const $GetSelfClientsSavingsAccountsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetSelfClientsSavingsAccountsStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        approved: {
            type: 'boolean',
            example: false
        },
        closed: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'savingsAccountStatusType.submitted.and.pending.approval'
        },
        description: {
            type: 'string',
            example: 'Submitted and pending approval'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        rejected: {
            type: 'boolean',
            example: false
        },
        submittedAndPendingApproval: {
            type: 'boolean',
            example: true
        },
        withdrawnByApplicant: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetSelfClientsStatus = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'clientStatusType.active'
        },
        description: {
            type: 'string',
            example: 'Active'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 300
        }
    }
} as const;

export const $GetSelfClientsTimeline = {
    type: 'object',
    properties: {
        activatedByFirstname: {
            type: 'string',
            example: 'App'
        },
        activatedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        activatedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        activatedOnDate: {
            type: 'string',
            format: 'date'
        },
        submittedByFirstname: {
            type: 'string',
            example: 'App'
        },
        submittedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        submittedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetSelfLoanIdSummary = {
    type: 'object',
    properties: {
        canDisburse: {
            type: 'boolean',
            example: false
        },
        currency: {
            '$ref': '#/components/schemas/GetLoansLoanIdCurrency'
        },
        disbursementDetails: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdDisbursementDetails'
            },
            uniqueItems: true
        },
        emiAmountVariations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdEmiVariations'
            },
            uniqueItems: true
        },
        feeChargesCharged: {
            type: 'number',
            format: 'double',
            example: 18000
        },
        feeChargesDueAtDisbursementCharged: {
            type: 'number',
            format: 'double',
            example: 0
        },
        feeChargesOutstanding: {
            type: 'number',
            format: 'double',
            example: 18000
        },
        feeChargesOverdue: {
            type: 'number',
            format: 'double',
            example: 15000
        },
        feeChargesPaid: {
            type: 'number',
            format: 'double',
            example: 0
        },
        feeChargesWaived: {
            type: 'number',
            format: 'double',
            example: 0
        },
        feeChargesWrittenOff: {
            type: 'number',
            format: 'double',
            example: 0
        },
        fixedEmiAmount: {
            type: 'number',
            format: 'double',
            example: 1100
        },
        inArrears: {
            type: 'boolean',
            example: true
        },
        interestCharged: {
            type: 'number',
            format: 'double',
            example: 240000
        },
        interestOutstanding: {
            type: 'number',
            format: 'double',
            example: 240000
        },
        interestOverdue: {
            type: 'number',
            format: 'double',
            example: 200000
        },
        interestPaid: {
            type: 'number',
            format: 'double',
            example: 0
        },
        interestWaived: {
            type: 'number',
            format: 'double',
            example: 0
        },
        interestWrittenOff: {
            type: 'number',
            format: 'double',
            example: 0
        },
        isNPA: {
            type: 'boolean',
            example: false
        },
        linkedAccount: {
            '$ref': '#/components/schemas/GetLoansLoanIdLinkedAccount'
        },
        maxOutstandingLoanBalance: {
            type: 'number',
            format: 'double',
            example: 35000
        },
        overdueCharges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoansLoanIdOverdueCharges'
            },
            uniqueItems: true
        },
        overdueSinceDate: {
            type: 'string',
            format: 'date'
        },
        penaltyChargesCharged: {
            type: 'number',
            format: 'double',
            example: 0
        },
        penaltyChargesOutstanding: {
            type: 'number',
            format: 'double',
            example: 0
        },
        penaltyChargesOverdue: {
            type: 'number',
            format: 'double',
            example: 0
        },
        penaltyChargesPaid: {
            type: 'number',
            format: 'double',
            example: 0
        },
        penaltyChargesWaived: {
            type: 'number',
            format: 'double',
            example: 0
        },
        penaltyChargesWrittenOff: {
            type: 'number',
            format: 'double',
            example: 0
        },
        principalAdjustments: {
            type: 'number',
            format: 'double',
            example: 0
        },
        principalDisbursed: {
            type: 'number',
            format: 'double',
            example: 1000000
        },
        principalOutstanding: {
            type: 'number',
            format: 'double',
            example: 1000000
        },
        principalOverdue: {
            type: 'number',
            format: 'double',
            example: 833333.3
        },
        principalPaid: {
            type: 'number',
            format: 'double',
            example: 0
        },
        principalWrittenOff: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalChargeAdjustment: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalChargeAdjustmentReversed: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalChargeback: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalCostOfLoan: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalCreditBalanceRefund: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalCreditBalanceRefundReversed: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalExpectedCostOfLoan: {
            type: 'number',
            format: 'double',
            example: 258000
        },
        totalExpectedRepayment: {
            type: 'number',
            format: 'double',
            example: 1258000
        },
        totalGoodwillCredit: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalGoodwillCreditReversed: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalMerchantRefund: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalMerchantRefundReversed: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalOutstanding: {
            type: 'number',
            format: 'double',
            example: 1258000
        },
        totalOverdue: {
            type: 'number',
            format: 'double',
            example: 1048333.3
        },
        totalPayoutRefund: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalPayoutRefundReversed: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalRepayment: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalRepaymentTransaction: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalRepaymentTransactionReversed: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalWaived: {
            type: 'number',
            format: 'double',
            example: 0
        },
        totalWrittenOff: {
            type: 'number',
            format: 'double',
            example: 0
        }
    }
} as const;

export const $GetSelfLoanIdTimeline = {
    type: 'object',
    properties: {
        actualDisbursementDate: {
            type: 'string',
            format: 'date'
        },
        approvedByFirstname: {
            type: 'string',
            example: 'App'
        },
        approvedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        approvedByUsername: {
            type: 'string',
            example: 'admin'
        },
        approvedOnDate: {
            type: 'string',
            format: 'date'
        },
        closedOnDate: {
            type: 'string',
            format: 'date'
        },
        disbursedByFirstname: {
            type: 'string',
            example: 'App'
        },
        disbursedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        disbursedByUsername: {
            type: 'string',
            example: 'admin'
        },
        expectedDisbursementDate: {
            type: 'string',
            format: 'date'
        },
        expectedMaturityDate: {
            type: 'string',
            format: 'date'
        },
        submittedByFirstname: {
            type: 'string',
            example: 'App'
        },
        submittedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        submittedByUsername: {
            type: 'string',
            example: 'admin'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetSelfLoansChargeCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeCalculationType.flat'
        },
        description: {
            type: 'string',
            example: 'Flat'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSelfLoansChargeTimeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.disbursement'
        },
        description: {
            type: 'string',
            example: 'Disbursement'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSelfLoansLoanIdChargesResponse = {
    type: 'object',
    description: 'GetSelfLoansLoanIdChargesResponse',
    properties: {
        amount: {
            type: 'number',
            format: 'float',
            example: 100
        },
        amountOrPercentage: {
            type: 'number',
            format: 'float',
            example: 100
        },
        amountOutstanding: {
            type: 'number',
            format: 'float',
            example: 100
        },
        amountPaid: {
            type: 'number',
            format: 'float',
            example: 0
        },
        amountPercentageAppliedTo: {
            type: 'number',
            format: 'double',
            example: 0
        },
        amountWaived: {
            type: 'number',
            format: 'float',
            example: 0
        },
        amountWrittenOff: {
            type: 'number',
            format: 'float',
            example: 0
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetSelfLoansChargeCalculationType'
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetSelfLoansChargeTimeType'
        },
        currency: {
            '$ref': '#/components/schemas/GetLoanCurrency'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Loan Processing fee'
        },
        penalty: {
            type: 'boolean',
            example: false
        },
        percentage: {
            type: 'number',
            format: 'double',
            example: 0
        }
    }
} as const;

export const $GetSelfLoansLoanIdResponse = {
    type: 'object',
    description: 'GetSelfLoansLoanIdResponse',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        amortizationType: {
            '$ref': '#/components/schemas/GetLoansLoanIdAmortizationType'
        },
        annualInterestRate: {
            type: 'integer',
            format: 'int32',
            example: 24
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'Kampala first Client'
        },
        clientOfficeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        currency: {
            '$ref': '#/components/schemas/GetLoansLoanIdCurrency'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        interestCalculationPeriodType: {
            '$ref': '#/components/schemas/GetLoansLoanIdInterestCalculationPeriodType'
        },
        interestRateFrequencyType: {
            '$ref': '#/components/schemas/GetLoansLoanIdInterestRateFrequencyType'
        },
        interestRatePerPeriod: {
            type: 'integer',
            format: 'int32',
            example: 24
        },
        interestType: {
            '$ref': '#/components/schemas/GetLoansLoanIdInterestType'
        },
        loanOfficerId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        loanOfficerName: {
            type: 'string',
            example: 'LoanOfficer, Kampala'
        },
        loanProductDescription: {
            type: 'string',
            example: 'Typical Kampala loan product with cash accounting enabled for testing.'
        },
        loanProductId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanProductName: {
            type: 'string',
            example: 'Kampala Product (with cash accounting)'
        },
        loanPurposeId: {
            type: 'integer',
            format: 'int32',
            example: 22
        },
        loanPurposeName: {
            type: 'string',
            example: 'option.HousingImprovement'
        },
        loanType: {
            '$ref': '#/components/schemas/GetLoansLoanIdLoanType'
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 12
        },
        principal: {
            type: 'integer',
            format: 'int64',
            example: 1000000
        },
        repaymentEvery: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        repaymentFrequencyType: {
            '$ref': '#/components/schemas/GetLoansLoanIdRepaymentFrequencyType'
        },
        status: {
            '$ref': '#/components/schemas/GetLoansLoanIdStatus'
        },
        summary: {
            '$ref': '#/components/schemas/GetSelfLoanIdSummary'
        },
        termFrequency: {
            type: 'integer',
            format: 'int32',
            example: 12
        },
        termPeriodFrequencyType: {
            '$ref': '#/components/schemas/GetLoansLoanIdTermPeriodFrequencyType'
        },
        timeline: {
            '$ref': '#/components/schemas/GetSelfLoanIdTimeline'
        },
        transactionProcessingStrategyCode: {
            type: 'string',
            example: 'mifos-standard-strategy'
        }
    }
} as const;

export const $GetSelfLoansLoanIdTransactionsTransactionIdResponse = {
    type: 'object',
    description: 'GetSelfLoansLoanIdTransactionsTransactionIdResponse',
    properties: {
        amount: {
            type: 'number',
            format: 'float',
            example: 559.88
        },
        currency: {
            '$ref': '#/components/schemas/GetLoanCurrency'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        interestPortion: {
            type: 'number',
            format: 'float',
            example: 559.88
        },
        manuallyReversed: {
            type: 'boolean',
            example: false
        },
        type: {
            '$ref': '#/components/schemas/GetSelfLoansLoanIdTransactionsType'
        }
    }
} as const;

export const $GetSelfLoansLoanIdTransactionsType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'loanTransactionType.repayment'
        },
        contra: {
            type: 'boolean',
            example: false
        },
        description: {
            type: 'string',
            example: 'Repayment'
        },
        disbursement: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        recoveryRepayment: {
            type: 'boolean',
            example: false
        },
        repayment: {
            type: 'boolean',
            example: true
        },
        repaymentAtDisbursement: {
            type: 'boolean',
            example: false
        },
        waiveCharges: {
            type: 'boolean',
            example: false
        },
        waiveInterest: {
            type: 'boolean',
            example: false
        },
        writeOff: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetSelfLoansProductOptions = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Kampala Product (with cash accounting)'
        }
    }
} as const;

export const $GetSelfLoansTemplateResponse = {
    type: 'object',
    description: 'GetSelfLoansTemplateResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'Kampala first Client'
        },
        clientOfficeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        productOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSelfLoansProductOptions'
            },
            uniqueItems: true
        },
        timeline: {
            '$ref': '#/components/schemas/GetSelfLoansTimeline'
        }
    }
} as const;

export const $GetSelfLoansTimeline = {
    type: 'object',
    properties: {
        expectedDisbursementDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetSelfSavingsAccountsAccountIdChargesResponse = {
    type: 'object',
    description: 'GetSelfSavingsAccountsAccountIdChargesResponse',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64',
            example: 57
        },
        amount: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        amountOrPercentage: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        amountOutstanding: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        amountPaid: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        amountPercentageAppliedTo: {
            type: 'number',
            format: 'double',
            example: 0
        },
        amountWaived: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        amountWrittenOff: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetSelfSavingsChargeCalculationType'
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetSelfSavingsChargeTimeType'
        },
        currency: {
            '$ref': '#/components/schemas/GetSelfSavingsCurrency'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Savings account maintenance fee'
        },
        penalty: {
            type: 'boolean',
            example: false
        },
        percentage: {
            type: 'number',
            format: 'double',
            example: 0
        }
    }
} as const;

export const $GetSelfSavingsAccountsAccountIdChargesSavingsAccountChargeIdResponse = {
    type: 'object',
    description: 'GetSelfSavingsAccountsAccountIdChargesSavingsAccountChargeIdResponse',
    properties: {
        amount: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        amountOrPercentage: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        amountOutstanding: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        amountPaid: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        amountPercentageAppliedTo: {
            type: 'number',
            format: 'double',
            example: 0
        },
        amountWaived: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        amountWrittenOff: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/GetSelfSavingsChargeCalculationType'
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetSelfSavingsChargeTimeType'
        },
        currency: {
            '$ref': '#/components/schemas/GetSelfSavingsCurrency'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Passbook fee'
        },
        penalty: {
            type: 'boolean',
            example: false
        },
        percentage: {
            type: 'number',
            format: 'double',
            example: 0
        }
    }
} as const;

export const $GetSelfSavingsAccountsAccountIdTransactionsTransactionIdResponse = {
    type: 'object',
    description: 'GetSelfSavingsAccountsAccountIdTransactionsTransactionIdResponse',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        amount: {
            type: 'integer',
            format: 'int32',
            example: 5000
        },
        currency: {
            '$ref': '#/components/schemas/GetSelfSavingsTransactionCurrency'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        paymentDetailData: {
            '$ref': '#/components/schemas/GetSelfSavingsPaymentDetailData'
        },
        reversed: {
            type: 'boolean',
            example: true
        },
        runningBalance: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        transactionType: {
            '$ref': '#/components/schemas/GetSelfSavingsTransactionType'
        }
    }
} as const;

export const $GetSelfSavingsAccountsResponse = {
    type: 'object',
    description: 'GetSelfSavingsAccountsResponse',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        clientName: {
            type: 'string',
            example: 'small business'
        },
        currency: {
            '$ref': '#/components/schemas/GetSelfSavingsCurrency'
        },
        fieldOfficerId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/GetSelfSavingsInterestCalculationDaysInYearType'
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/GetSelfSavingsInterestCalculationType'
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/GetSelfSavingsInterestCompoundingPeriodType'
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/GetSelfSavingsInterestPostingPeriodType'
        },
        nominalAnnualInterestRate: {
            type: 'number',
            format: 'double',
            example: 5
        },
        savingsProductId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsProductName: {
            type: 'string',
            example: 'Passbook Savings'
        },
        status: {
            '$ref': '#/components/schemas/GetSelfSavingsStatus'
        },
        summary: {
            '$ref': '#/components/schemas/GetSelfSavingsSummary'
        },
        timeline: {
            '$ref': '#/components/schemas/GetSelfSavingsTimeline'
        }
    }
} as const;

export const $GetSelfSavingsChargeCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeCalculationType.flat'
        },
        description: {
            type: 'string',
            example: 'Flat'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSelfSavingsChargeTimeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.specifiedDueDate'
        },
        description: {
            type: 'string',
            example: 'Specified due date'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSelfSavingsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetSelfSavingsInterestCalculationDaysInYearType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsInterestCalculationDaysInYearType.days365'
        },
        description: {
            type: 'string',
            example: '365 Days'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 365
        }
    }
} as const;

export const $GetSelfSavingsInterestCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsInterestCalculationType.dailybalance'
        },
        description: {
            type: 'string',
            example: 'Daily Balance'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSelfSavingsInterestCompoundingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.period.savingsCompoundingInterestPeriodType.daily'
        },
        description: {
            type: 'string',
            example: 'Daily'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSelfSavingsInterestPostingPeriodType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savings.interest.posting.period.savingsPostingInterestPeriodType.monthly'
        },
        description: {
            type: 'string',
            example: 'Monthly'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 4
        }
    }
} as const;

export const $GetSelfSavingsPaymentDetailData = {
    type: 'object',
    properties: {
        accountNumber: {
            type: 'integer',
            format: 'int32'
        },
        bankNumber: {
            type: 'integer',
            format: 'int32'
        },
        checkNumber: {
            type: 'integer',
            format: 'int32'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 62
        },
        paymentType: {
            '$ref': '#/components/schemas/GetSelfSavingsPaymentType'
        },
        receiptNumber: {
            type: 'integer',
            format: 'int32'
        },
        routingCode: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $GetSelfSavingsPaymentType = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32',
            example: 11
        },
        name: {
            type: 'string',
            example: 'cash'
        }
    }
} as const;

export const $GetSelfSavingsStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        approved: {
            type: 'boolean',
            example: false
        },
        closed: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'savingsAccountStatusType.submitted.and.pending.approval'
        },
        description: {
            type: 'string',
            example: 'Submitted and pending approval'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        rejected: {
            type: 'boolean',
            example: false
        },
        submittedAndPendingApproval: {
            type: 'boolean',
            example: true
        },
        withdrawnByApplicant: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetSelfSavingsSummary = {
    type: 'object',
    properties: {
        accountBalance: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        currency: {
            '$ref': '#/components/schemas/GetSelfSavingsCurrency'
        }
    }
} as const;

export const $GetSelfSavingsTimeline = {
    type: 'object',
    properties: {
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetSelfSavingsTransactionCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetSelfSavingsTransactionType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'savingsAccountTransactionType.withdrawal'
        },
        deposit: {
            type: 'boolean',
            example: false
        },
        description: {
            type: 'string',
            example: 'Withdrawal'
        },
        feeDeduction: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        interestPosting: {
            type: 'boolean',
            example: false
        },
        withdrawal: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $GetSelfUserDetailsOrganisationalRole = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'staffOrganisationalRoleType.programDirector'
        },
        description: {
            type: 'string',
            example: 'Program Director'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 100
        }
    }
} as const;

export const $GetSelfUserDetailsResponse = {
    type: 'object',
    description: 'GetSelfUserDetailsResponse',
    properties: {
        authenticated: {
            type: 'boolean',
            example: true
        },
        base64EncodedAuthenticationKey: {
            type: 'string',
            example: 'bWlmb3M6cGFzc3dvcmQ='
        },
        clients: {
            type: 'array',
            example: [1, 2, 3],
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        isSelfServiceUser: {
            type: 'boolean',
            example: true
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        organisationalRole: {
            '$ref': '#/components/schemas/GetSelfUserDetailsOrganisationalRole'
        },
        permissions: {
            type: 'array',
            example: 'ALL_FUNCTIONS',
            items: {
                type: 'string',
                example: 'ALL_FUNCTIONS'
            }
        },
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSelfUserDetailsRoles'
            },
            uniqueItems: true
        },
        staffDisplayName: {
            type: 'string',
            example: 'Director, Program'
        },
        staffId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        userId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        username: {
            type: 'string',
            example: 'mifos'
        }
    }
} as const;

export const $GetSelfUserDetailsRoles = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            example: 'This role provides all application permissions.'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Super user'
        }
    }
} as const;

export const $GetShareAccountsChargeAppliesTo = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeAppliesTo.shares'
        },
        description: {
            type: 'string',
            example: 'Shares'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 4
        }
    }
} as const;

export const $GetShareAccountsChargeCalculationType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeCalculationType.flat'
        },
        description: {
            type: 'string',
            example: 'Flat'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetShareAccountsChargeOptions = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        amount: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        calculationType: {
            '$ref': '#/components/schemas/GetShareAccountsChargeCalculationType'
        },
        chargeAppliesTo: {
            '$ref': '#/components/schemas/GetShareAccountsChargeAppliesTo'
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/GetShareAccountsChargeTimeType'
        },
        currency: {
            '$ref': '#/components/schemas/GetShareAccountsCurrency'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        name: {
            type: 'string',
            example: 'Activation fee'
        },
        paymentMode: {
            '$ref': '#/components/schemas/GetShareAccountsChargePaymentMode'
        },
        penalty: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetShareAccountsChargePaymentMode = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargepaymentmode.regular'
        },
        description: {
            type: 'string',
            example: 'Regular'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetShareAccountsChargeTimeType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'chargeTimeType.sharespurchase'
        },
        description: {
            type: 'string',
            example: 'Share purchase'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 14
        }
    }
} as const;

export const $GetShareAccountsClientIdProductIdAccountingRule = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountingRuleType.cash'
        },
        description: {
            type: 'string',
            example: 'CASH BASED'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetShareAccountsClientIdProductIdLockPeriodTypeEnum = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'shares.lockin.sharePeriodFrequencyType.days'
        },
        description: {
            type: 'string',
            example: 'days'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetShareAccountsClientIdProductIdMinimumActivePeriodForDividendsTypeEnum = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'shares.minimumactive.sharePeriodFrequencyType.days'
        },
        description: {
            type: 'string',
            example: 'days'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $GetShareAccountsClientIdProductIdResponse = {
    type: 'object',
    description: 'GetShareAccountsClientIdProductIdResponse',
    properties: {
        chargeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetClientIdProductIdChargeOptions'
            },
            uniqueItems: true
        },
        productOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetClientIdProductIdProductOptions'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetShareAccountsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetShareAccountsIncomeFromFeeAccountId = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: '30105'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 40
        },
        name: {
            type: 'string',
            example: 'Other Operating Income'
        }
    }
} as const;

export const $GetShareAccountsShareEquityId = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: '00098'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 56
        },
        name: {
            type: 'string',
            example: 'Share Equity'
        }
    }
} as const;

export const $GetShareAccountsShareReferenceId = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: '20301'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 32
        },
        name: {
            type: 'string',
            example: 'Cash in Hand'
        }
    }
} as const;

export const $GetShareAccountsShareSuspenseId = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: '10200'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        name: {
            type: 'string',
            example: 'Overpayment Liability'
        }
    }
} as const;

export const $GetShareEquityId = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: 'EQUITY1'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 66
        },
        name: {
            type: 'string',
            example: 'Equity Account'
        }
    }
} as const;

export const $GetShareReferenceId = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: 'ASSET_ED1461237837829'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'ACCOUNT_NAME_1FJBQ'
        }
    }
} as const;

export const $GetShareSuspenseId = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: 'LIABILITY_MA1461237860198'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 8
        },
        name: {
            type: 'string',
            example: 'ACCOUNT_NAME_1FJBQ'
        }
    }
} as const;

export const $GetStandingInstructionHistoryFromAccount = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'General Savings'
        }
    }
} as const;

export const $GetStandingInstructionHistoryPageItemsFromClient = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            example: 'Test client'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetStandingInstructionHistoryPageItemsResponse = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            format: 'float',
            example: 10
        },
        errorLog: {
            type: 'string'
        },
        executionTime: {
            type: 'string',
            format: 'date'
        },
        fromAccount: {
            '$ref': '#/components/schemas/GetStandingInstructionHistoryFromAccount'
        },
        fromAccountType: {
            '$ref': '#/components/schemas/GetFromAccountTypeStandingInstructionSwagger'
        },
        fromClient: {
            '$ref': '#/components/schemas/GetStandingInstructionHistoryPageItemsFromClient'
        },
        fromOffice: {
            '$ref': '#/components/schemas/GetFromOfficeStandingInstructionSwagger'
        },
        name: {
            type: 'string',
            example: 'ACC Transfer'
        },
        standingInstructionId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        status: {
            type: 'string',
            example: 'success'
        },
        toAccount: {
            '$ref': '#/components/schemas/GetStandingInstructionHistoryToAccount'
        },
        toAccountType: {
            '$ref': '#/components/schemas/GetToAccountTypeStandingInstructionSwagger'
        },
        toClient: {
            '$ref': '#/components/schemas/GetStandingInstructionHistoryToClient'
        },
        toOffice: {
            '$ref': '#/components/schemas/GetToOfficeStandingInstructionSwagger'
        }
    }
} as const;

export const $GetStandingInstructionHistoryToAccount = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        productName: {
            type: 'string',
            example: 'General Savings'
        }
    }
} as const;

export const $GetStandingInstructionHistoryToClient = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            example: 'Test client'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetStandingInstructionRunHistoryResponse = {
    type: 'object',
    description: 'GetStandingInstructionRunHistoryResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetStandingInstructionHistoryPageItemsResponse'
            },
            uniqueItems: true
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetStandingInstructionsResponse = {
    type: 'object',
    description: 'GetStandingInstructionsResponse',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetPageItemsStandingInstructionSwagger'
            },
            uniqueItems: true
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetStandingInstructionsStandingInstructionIdResponse = {
    type: 'object',
    description: 'GetStandingInstructionsStandingInstructionIdResponse',
    properties: {
        accountDetailId: {
            type: 'integer',
            format: 'int64',
            example: 6
        },
        amount: {
            type: 'number',
            format: 'float',
            example: 150
        },
        fromAccount: {
            '$ref': '#/components/schemas/GetFromAccountStandingInstructionSwagger'
        },
        fromAccountType: {
            '$ref': '#/components/schemas/GetFromAccountTypeStandingInstructionSwagger'
        },
        fromClient: {
            '$ref': '#/components/schemas/GetFromClientStandingInstructionSwagger'
        },
        fromOffice: {
            '$ref': '#/components/schemas/GetFromOfficeStandingInstructionSwagger'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        instructionType: {
            '$ref': '#/components/schemas/GetInstructionTypeStandingInstructionSwagger'
        },
        name: {
            type: 'string',
            example: 'test standing'
        },
        priority: {
            '$ref': '#/components/schemas/GetPriorityStandingInstructionSwagger'
        },
        recurrenceFrequency: {
            '$ref': '#/components/schemas/GetRecurrenceFrequencyStandingInstructionSwagger'
        },
        recurrenceInterval: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recurrenceOnMonthDay: {
            type: 'string',
            format: 'date'
        },
        recurrenceType: {
            '$ref': '#/components/schemas/GetRecurrenceTypeStandingInstructionSwagger'
        },
        status: {
            '$ref': '#/components/schemas/GetStatusStandingInstructionSwagger'
        },
        toAccount: {
            '$ref': '#/components/schemas/GetToAccountStandingInstructionSwagger'
        },
        toAccountType: {
            '$ref': '#/components/schemas/GetToAccountTypeStandingInstructionSwagger'
        },
        toClient: {
            '$ref': '#/components/schemas/GetToClientStandingInstructionSwagger'
        },
        toOffice: {
            '$ref': '#/components/schemas/GetToOfficeStandingInstructionSwagger'
        },
        transferType: {
            '$ref': '#/components/schemas/GetTransferTypeStandingInstructionSwagger'
        },
        validFrom: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $GetStandingInstructionsTemplateResponse = {
    type: 'object',
    description: 'GetStandingInstructionsTemplateResponse',
    properties: {
        fromAccountType: {
            '$ref': '#/components/schemas/GetFromAccountTypeResponseStandingInstructionSwagger'
        },
        fromAccountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetFromAccountTypeOptionsResponseStandingInstructionSwagger'
            },
            uniqueItems: true
        },
        fromClientOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetFromClientOptionsResponseStandingInstructionSwagger'
            },
            uniqueItems: true
        },
        fromOffice: {
            '$ref': '#/components/schemas/GetFromOfficeResponseStandingInstructionSwagger'
        },
        fromOfficeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetFromOfficeOptionsResponseStandingInstructionSwagger'
            },
            uniqueItems: true
        },
        instructionTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetInstructionTypeOptionsResponseStandingInstructionSwagger'
            },
            uniqueItems: true
        },
        priorityOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetPriorityOptionsResponseStandingInstructionSwagger'
            },
            uniqueItems: true
        },
        recurrenceFrequencyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetRecurrenceFrequencyOptionsResponseStandingInstructionSwagger'
            },
            uniqueItems: true
        },
        recurrenceTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetRecurrenceTypeOptionsResponseStandingInstructionSwagger'
            },
            uniqueItems: true
        },
        statusOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetStatusOptionsResponseStandingInstructionSwagger'
            },
            uniqueItems: true
        },
        toAccountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetToAccountTypeOptionsResponseStandingInstructionSwagger'
            },
            uniqueItems: true
        },
        toOfficeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetToOfficeOptionsResponseStandingInstructionSwagger'
            },
            uniqueItems: true
        },
        transferTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetTransferTypeOptionsResponseStandingInstructionSwagger'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetStatusOptionsResponseStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'standingInstructionStatus.active'
        },
        description: {
            type: 'string',
            example: 'Active'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetStatusStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'standingInstructionStatus.deleted'
        },
        description: {
            type: 'string',
            example: 'Deleted'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetSurveyResponse = {
    type: 'object',
    description: 'GetSurveyResponse',
    properties: {
        datatableData: {
            '$ref': '#/components/schemas/GetSurveyResponseDatatableData'
        },
        enabled: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetSurveyResponseDatatableData = {
    type: 'object',
    properties: {
        applicationTableName: {
            type: 'string',
            example: 'm_client'
        },
        columnHeaderData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResultsetColumnHeaderData'
            }
        },
        registeredTableName: {
            type: 'string',
            example: 'ppi_kenya_2005'
        }
    }
} as const;

export const $GetTaxesComponentsCreditAccount = {
    type: 'object',
    properties: {
        glCode: {
            type: 'string',
            example: 'LIABILITY_PA1460364665046'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        name: {
            type: 'string',
            example: 'ACCOUNT_NAME_7BR9C'
        }
    }
} as const;

export const $GetTaxesComponentsCreditAccountType = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.liability'
        },
        description: {
            type: 'string',
            example: 'LIABILITY'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetTaxesComponentsHistories = {
    type: 'object'
} as const;

export const $GetTaxesComponentsResponse = {
    type: 'object',
    description: 'GetTaxesComponentsResponse',
    properties: {
        creditAccount: {
            '$ref': '#/components/schemas/GetTaxesComponentsCreditAccount'
        },
        creditAccountType: {
            '$ref': '#/components/schemas/GetTaxesComponentsCreditAccountType'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'tax component 1'
        },
        percentage: {
            type: 'number',
            format: 'float',
            example: 10
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        taxComponentsHistories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetTaxesComponentsHistories'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetTaxesGroupResponse = {
    type: 'object',
    description: 'GetTaxesGroupResponse',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 7
        },
        name: {
            type: 'string',
            example: 'tax group 1'
        },
        taxAssociations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetTaxesGroupTaxAssociations'
            },
            uniqueItems: true
        }
    }
} as const;

export const $GetTaxesGroupTaxAssociations = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 7
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        taxComponent: {
            '$ref': '#/components/schemas/GetTaxesGroupTaxComponent'
        }
    }
} as const;

export const $GetTaxesGroupTaxComponent = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 7
        },
        name: {
            type: 'string',
            example: 'tax component 2'
        }
    }
} as const;

export const $GetTellersResponse = {
    type: 'object',
    description: 'GetTellersResponse',
    properties: {
        creditAccountId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        debitAccountId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        name: {
            type: 'string',
            example: 'Teller3'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        status: {
            type: 'string',
            enum: ['INVALID', 'PENDING', 'ACTIVE', 'INACTIVE', 'CLOSED'],
            example: 'ACTIVE'
        }
    }
} as const;

export const $GetTellersTellerIdCashiersCashierIdResponse = {
    type: 'object',
    description: 'GetTellersTellerIdCashiersCashierIdResponse',
    properties: {
        description: {
            type: 'string'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        endTime: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        isFullDay: {
            type: 'boolean',
            example: true
        },
        staffId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        staffName: {
            type: 'string',
            example: 'Staff1, Test'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        startTime: {
            type: 'string'
        },
        tellerId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        tellerName: {
            type: 'string',
            example: 'Teller1'
        }
    }
} as const;

export const $GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse = {
    type: 'object',
    description: 'GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse',
    properties: {
        cashierId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        cashierName: {
            type: 'string',
            example: 'Staff1, Test'
        },
        cashierTransactions: {
            '$ref': '#/components/schemas/PageCashierTransactionData'
        },
        netCash: {
            type: 'number',
            example: 6950
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        sumCashAllocation: {
            type: 'number',
            example: 7000
        },
        sumCashSettlement: {
            type: 'number',
            example: 50
        },
        sumInwardCash: {
            type: 'number',
            example: 0
        },
        sumOutwardCash: {
            type: 'number',
            example: 0
        },
        tellerId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        tellerName: {
            type: 'string',
            example: 'Teller1'
        }
    }
} as const;

export const $GetTellersTellerIdCashiersCashiersIdTransactionsResponse = {
    type: 'object',
    description: 'GetTellersTellerIdCashiersCashiersIdTransactionsResponse',
    properties: {
        cashierId: {
            type: 'integer',
            format: 'int64',
            example: 15
        },
        cashierName: {
            type: 'string',
            example: 'B, Ramesh'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        entityId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        entityType: {
            type: 'string',
            example: 'loans'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 8
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        tellerId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        txnAmount: {
            type: 'number',
            example: 1000
        },
        txnDate: {
            type: 'string',
            format: 'date'
        },
        txnNote: {
            type: 'string',
            example: 'Disbursement, Loan:2-000000002,Client:1-Test 1'
        },
        txnType: {
            '$ref': '#/components/schemas/CashierTxnType'
        }
    }
} as const;

export const $GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse = {
    type: 'object',
    description: 'GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse',
    properties: {
        cashierData: {
            '$ref': '#/components/schemas/CashierData'
        },
        cashierId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        cashierName: {
            type: 'string',
            example: 'Staff1, Test'
        },
        currencyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CurrencyData'
            }
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        tellerId: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        tellerName: {
            type: 'string',
            example: 'Teller1'
        }
    }
} as const;

export const $GetTellersTellerIdCashiersResponse = {
    type: 'object',
    description: 'GetTellersTellerIdCashiersResponse',
    properties: {
        cashiers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CashierData'
            }
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        tellerId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        tellerName: {
            type: 'string',
            example: 'Teller1'
        }
    }
} as const;

export const $GetTellersTellerIdCashiersTemplateResponse = {
    type: 'object',
    description: 'GetTellersTellerIdCashiersTemplateResponse',
    properties: {
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        staffOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StaffData'
            }
        },
        tellerId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        tellerName: {
            type: 'string',
            example: 'Teller1'
        }
    }
} as const;

export const $GetTemplatesResponse = {
    type: 'object',
    description: 'GetTemplatesResponse',
    properties: {
        entity: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        mappers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TemplateMapper'
            }
        },
        name: {
            type: 'string',
            example: 'Text'
        },
        text: {
            type: 'string',
            example: 'This is a loan for {{loan.clientName}}'
        },
        type: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetTemplatesTemplateIdResponse = {
    type: 'object',
    description: 'GetTemplatesTemplateIdResponse',
    properties: {
        entity: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        mappers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TemplateMapper'
            }
        },
        name: {
            type: 'string',
            example: 'Text'
        },
        text: {
            type: 'string',
            example: 'This is a loan for {{loan.clientName}}'
        },
        type: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetTemplatesTemplateResponse = {
    type: 'object',
    description: 'GetTemplatesTemplateResponse',
    properties: {
        entity: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        mappers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TemplateMapper'
            }
        },
        name: {
            type: 'string',
            example: 'Text'
        },
        text: {
            type: 'string',
            example: 'This is a loan for {{loan.clientName}}'
        },
        type: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $GetToAccountStandingInstructionSwagger = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        productName: {
            type: 'string',
            example: 'account overdraft'
        }
    }
} as const;

export const $GetToAccountTypeOptionsResponseStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.loan'
        },
        description: {
            type: 'string',
            example: 'Loan Account'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetToAccountTypeStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountType.savings'
        },
        description: {
            type: 'string',
            example: 'Savings Account'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $GetToClientStandingInstructionSwagger = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            example: 'Test test'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetToOfficeOptionsResponseStandingInstructionSwagger = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Head Office'
        },
        nameDecorated: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetToOfficeStandingInstructionSwagger = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Head Office'
        }
    }
} as const;

export const $GetTransactionsCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'USD'
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        displayLabel: {
            type: 'string',
            example: 'US Dollar ($)'
        },
        displaySymbol: {
            type: 'string',
            example: '$'
        },
        isMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        name: {
            type: 'string',
            example: 'US Dollar'
        },
        nameCode: {
            type: 'string',
            example: 'currency.USD'
        }
    }
} as const;

export const $GetTransactionsPaymentDetailData = {
    type: 'object',
    properties: {
        accountNumber: {
            type: 'string',
            example: 'acc123'
        },
        bankNumber: {
            type: 'string',
            example: 'ban123'
        },
        checkNumber: {
            type: 'string',
            example: 'che123'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        paymentType: {
            '$ref': '#/components/schemas/GetPaymentTypeData'
        },
        receiptNumber: {
            type: 'string',
            example: 'rec123'
        },
        routingCode: {
            type: 'string',
            example: 'rou123'
        }
    }
} as const;

export const $GetTranscationEnumData = {
    type: 'object',
    properties: {
        amountHold: {
            type: 'boolean',
            example: false
        },
        amountRelease: {
            type: 'boolean',
            example: false
        },
        approveTransfer: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'savingsAccountTransactionType.deposit'
        },
        deposit: {
            type: 'boolean',
            example: true
        },
        dividendPayout: {
            type: 'boolean',
            example: false
        },
        escheat: {
            type: 'boolean',
            example: false
        },
        feeDeduction: {
            type: 'boolean',
            example: false
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        initiateTransfer: {
            type: 'boolean',
            example: false
        },
        interestPosting: {
            type: 'boolean',
            example: false
        },
        overdraftFee: {
            type: 'boolean',
            example: true
        },
        overdraftInterest: {
            type: 'boolean',
            example: false
        },
        rejectTransfer: {
            type: 'boolean',
            example: false
        },
        value: {
            type: 'string',
            example: 'Deposit'
        },
        withdrawTransfer: {
            type: 'boolean',
            example: false
        },
        withdrawal: {
            type: 'boolean',
            example: false
        },
        withholdTax: {
            type: 'boolean',
            example: false
        },
        writtenoff: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $GetTransferTypeOptionsResponseStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountTransferType.account.transfer'
        },
        description: {
            type: 'string',
            example: 'Account Transfer'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetTransferTypeStandingInstructionSwagger = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'accountTransferType.account.transfer'
        },
        description: {
            type: 'string',
            example: 'Account Transfer'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $GetUserDetailsResponse = {
    type: 'object',
    description: 'GetUserDetailsResponse',
    properties: {
        accessToken: {
            type: 'string',
            example: 'bWlmb3M6cGFzc3dvcmQ='
        },
        authenticated: {
            type: 'boolean',
            example: true
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        organisationalRole: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        permissions: {
            type: 'array',
            example: 'ALL_FUNCTIONS',
            items: {
                type: 'string',
                example: 'ALL_FUNCTIONS'
            }
        },
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleData'
            }
        },
        staffDisplayName: {
            type: 'string',
            example: 'mifosStaffDisplayName'
        },
        staffId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        userId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        username: {
            type: 'string',
            example: 'mifos'
        }
    }
} as const;

export const $GetUsersResponse = {
    type: 'object',
    description: 'GetUsersResponse',
    properties: {
        email: {
            type: 'string',
            example: 'demomfi@mifos.org'
        },
        firstname: {
            type: 'string',
            example: 'App'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        lastname: {
            type: 'string',
            example: 'Administrator'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        passwordNeverExpires: {
            type: 'boolean',
            example: false
        },
        selectedRoles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleData'
            }
        },
        staff: {
            '$ref': '#/components/schemas/StaffData'
        },
        username: {
            type: 'string',
            example: 'mifos'
        }
    }
} as const;

export const $GetUsersTemplateResponse = {
    type: 'object',
    description: 'GetUsersTemplateResponse',
    properties: {
        allowedOffices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OfficeData'
            }
        },
        availableRoles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleData'
            }
        },
        selfServiceRoles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleData'
            }
        }
    }
} as const;

export const $GetUsersUserIdResponse = {
    type: 'object',
    description: 'GetUsersUserIdResponse',
    properties: {
        availableRoles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleData'
            }
        },
        email: {
            type: 'string',
            example: 'demomfi@mifos.org'
        },
        firstname: {
            type: 'string',
            example: 'App'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        lastname: {
            type: 'string',
            example: 'Administrator'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        passwordNeverExpires: {
            type: 'boolean',
            example: false
        },
        selectedRoles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleData'
            }
        },
        staff: {
            '$ref': '#/components/schemas/StaffData'
        },
        username: {
            type: 'string',
            example: 'mifos'
        }
    }
} as const;

export const $GetWorkingDaysTemplateResponse = {
    type: 'object',
    description: 'GetWorkingDaysTemplateResponse',
    properties: {
        repaymentRescheduleOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        }
    }
} as const;

export const $GlobalConfigurationPropertyData = {
    type: 'object',
    properties: {
        dateValue: {
            type: 'string',
            format: 'date'
        },
        description: {
            type: 'string'
        },
        enabled: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        stringValue: {
            type: 'string'
        },
        trapDoor: {
            type: 'boolean'
        },
        value: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $GrantedAuthority = {
    type: 'object',
    properties: {
        authority: {
            type: 'string'
        }
    }
} as const;

export const $Group = {
    type: 'object',
    properties: {
        accountNumber: {
            type: 'string'
        },
        activatedBy: {
            '$ref': '#/components/schemas/AppUser'
        },
        activationDate: {
            type: 'string',
            format: 'date'
        },
        active: {
            type: 'boolean'
        },
        activeClientMembers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Client'
            },
            uniqueItems: true
        },
        center: {
            type: 'boolean'
        },
        childGroup: {
            type: 'boolean'
        },
        clientMembers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Client'
            },
            uniqueItems: true
        },
        closed: {
            type: 'boolean'
        },
        closedBy: {
            '$ref': '#/components/schemas/AppUser'
        },
        closureDate: {
            type: 'string',
            format: 'date'
        },
        closureReason: {
            '$ref': '#/components/schemas/CodeValue'
        },
        externalId: {
            type: 'string'
        },
        group: {
            type: 'boolean'
        },
        groupLevel: {
            '$ref': '#/components/schemas/GroupLevel'
        },
        groupMembers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Group'
            }
        },
        groupRole: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GroupRole'
            },
            uniqueItems: true
        },
        hierarchy: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        notActive: {
            type: 'boolean'
        },
        notPending: {
            type: 'boolean'
        },
        office: {
            '$ref': '#/components/schemas/Office'
        },
        parent: {
            '$ref': '#/components/schemas/Group'
        },
        pending: {
            type: 'boolean'
        },
        staff: {
            '$ref': '#/components/schemas/Staff'
        },
        staffHistory: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StaffAssignmentHistory'
            },
            uniqueItems: true
        },
        status: {
            type: 'integer',
            format: 'int32'
        },
        submittedBy: {
            '$ref': '#/components/schemas/AppUser'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        transferInProgress: {
            type: 'boolean'
        },
        transferInProgressOrOnHold: {
            type: 'boolean'
        },
        transferOnHold: {
            type: 'boolean'
        }
    }
} as const;

export const $GroupGeneralData = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'string'
        },
        activationDate: {
            type: 'string',
            format: 'date'
        },
        active: {
            type: 'boolean'
        },
        activeClientMembers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ClientData'
            }
        },
        availableRoles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        calendarsData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CalendarData'
            }
        },
        centerId: {
            type: 'integer',
            format: 'int64'
        },
        centerName: {
            type: 'string'
        },
        centerOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CenterData'
            }
        },
        childGroup: {
            type: 'boolean'
        },
        clientMembers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ClientData'
            }
        },
        clientOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ClientData'
            }
        },
        closureReasons: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        collectionMeetingCalendar: {
            '$ref': '#/components/schemas/CalendarData'
        },
        datatables: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DatatableData'
            }
        },
        dateFormat: {
            type: 'string'
        },
        externalId: {
            type: 'string'
        },
        groupLevel: {
            type: 'string'
        },
        groupRoles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GroupRoleData'
            }
        },
        hierarchy: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        locale: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        officeName: {
            type: 'string'
        },
        officeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OfficeData'
            }
        },
        parentId: {
            type: 'integer',
            format: 'int64'
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        },
        selectedRole: {
            '$ref': '#/components/schemas/GroupRoleData'
        },
        staffId: {
            type: 'integer',
            format: 'int64'
        },
        staffName: {
            type: 'string'
        },
        staffOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StaffData'
            }
        },
        status: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        timeline: {
            '$ref': '#/components/schemas/GroupTimelineData'
        }
    }
} as const;

export const $GroupLevel = {
    type: 'object',
    properties: {
        center: {
            type: 'boolean'
        },
        group: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        levelName: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        parentId: {
            type: 'integer',
            format: 'int64'
        },
        recursable: {
            type: 'boolean'
        },
        superParent: {
            type: 'boolean'
        }
    }
} as const;

export const $GroupLevelData = {
    type: 'object',
    properties: {
        canHaveClients: {
            type: 'boolean'
        },
        childLevelId: {
            type: 'integer',
            format: 'int64'
        },
        childLevelName: {
            type: 'string'
        },
        levelId: {
            type: 'integer',
            format: 'int64'
        },
        levelName: {
            type: 'string'
        },
        parentLevelId: {
            type: 'integer',
            format: 'int64'
        },
        parentLevelName: {
            type: 'string'
        },
        recursable: {
            type: 'boolean'
        },
        superParent: {
            type: 'boolean'
        }
    }
} as const;

export const $GroupRole = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        new: {
            type: 'boolean'
        }
    }
} as const;

export const $GroupRoleData = {
    type: 'object',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        clientName: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        role: {
            '$ref': '#/components/schemas/CodeValueData'
        }
    }
} as const;

export const $GroupTimelineData = {
    type: 'object'
} as const;

export const $Grouping = {
    type: 'object',
    properties: {
        entities: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Entity'
            }
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $GuarantorData = {
    type: 'object',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64'
        },
        accountLinkingOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PortfolioAccountData'
            }
        },
        addressLine1: {
            type: 'string'
        },
        addressLine2: {
            type: 'string'
        },
        allowedClientRelationshipTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        amount: {
            type: 'number'
        },
        city: {
            type: 'string'
        },
        clientRelationshipType: {
            '$ref': '#/components/schemas/CodeValueData'
        },
        clientRelationshipTypeId: {
            type: 'integer',
            format: 'int32'
        },
        comment: {
            type: 'string'
        },
        country: {
            type: 'string'
        },
        dateFormat: {
            type: 'string'
        },
        dob: {
            type: 'string',
            format: 'date'
        },
        entityId: {
            type: 'integer',
            format: 'int64'
        },
        existingClient: {
            type: 'boolean'
        },
        externalGuarantor: {
            type: 'boolean'
        },
        externalId: {
            type: 'string'
        },
        firstname: {
            type: 'string'
        },
        guarantorFundingDetails: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GuarantorFundingData'
            }
        },
        guarantorType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        guarantorTypeId: {
            type: 'integer',
            format: 'int32'
        },
        guarantorTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        housePhoneNumber: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        joinedDate: {
            type: 'string',
            format: 'date'
        },
        lastname: {
            type: 'string'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        locale: {
            type: 'string'
        },
        mobileNumber: {
            type: 'string'
        },
        officeName: {
            type: 'string'
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        },
        savingsId: {
            type: 'integer',
            format: 'int32'
        },
        staffMember: {
            type: 'boolean'
        },
        state: {
            type: 'string'
        },
        status: {
            type: 'boolean'
        },
        zip: {
            type: 'string'
        }
    }
} as const;

export const $GuarantorFundingData = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        amountReleased: {
            type: 'number'
        },
        amountRemaining: {
            type: 'number'
        },
        amountTransfered: {
            type: 'number'
        },
        guarantorTransactions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GuarantorTransactionData'
            }
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        savingsAccount: {
            '$ref': '#/components/schemas/PortfolioAccountData'
        },
        status: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;

export const $GuarantorTransactionData = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        loanTransactionData: {
            '$ref': '#/components/schemas/LoanTransactionData'
        },
        onHoldTransactionData: {
            '$ref': '#/components/schemas/DepositAccountOnHoldTransactionData'
        },
        reversed: {
            type: 'boolean'
        }
    }
} as const;

export const $GuarantorsRequest = {
    type: 'object',
    properties: {
        addressLine1: {
            type: 'string'
        },
        addressLine2: {
            type: 'string'
        },
        amount: {
            type: 'number'
        },
        city: {
            type: 'string'
        },
        clientRelationshipTypeId: {
            type: 'integer',
            format: 'int64'
        },
        comment: {
            type: 'string'
        },
        country: {
            type: 'string'
        },
        dateFormat: {
            type: 'string'
        },
        dob: {
            type: 'string'
        },
        entityId: {
            type: 'integer',
            format: 'int64'
        },
        firstname: {
            type: 'string'
        },
        guarantorTypeId: {
            type: 'integer',
            format: 'int32'
        },
        housePhoneNumber: {
            type: 'string'
        },
        lastname: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        mobileNumber: {
            type: 'string'
        },
        savingsId: {
            type: 'integer',
            format: 'int64'
        },
        state: {
            type: 'string'
        },
        zip: {
            type: 'string'
        }
    }
} as const;

export const $Header = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $HookTemplateData = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        schema: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Field'
            }
        }
    }
} as const;

export const $IdDocument = {
    type: 'object',
    properties: {
        idNumber: {
            type: 'string'
        },
        idType: {
            type: 'string'
        },
        issuerCountry: {
            type: 'string'
        },
        otherIdDescription: {
            type: 'string'
        }
    }
} as const;

export const $Image = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        location: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        storageType: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $InlineJobRequest = {
    type: 'object',
    description: 'InlineJobRequest',
    properties: {
        loanIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        }
    }
} as const;

export const $InlineJobResponse = {
    type: 'object',
    description: 'InlineJobResponse',
    properties: {
        loanIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        }
    }
} as const;

export const $InterestIncentiveData = {
    type: 'object'
} as const;

export const $InterestIncentiveRequest = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        attributeName: {
            type: 'integer',
            format: 'int32'
        },
        attributeValue: {
            type: 'string'
        },
        conditionType: {
            type: 'integer',
            format: 'int32'
        },
        description: {
            type: 'string'
        },
        entityType: {
            type: 'integer',
            format: 'int32'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        incentiveType: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $InterestPauseRequestDto = {
    type: 'object',
    description: 'Request DTO for creating an interest pause',
    properties: {
        dateFormat: {
            type: 'string',
            description: 'Format of the dates provided',
            example: 'yyyy-MM-dd'
        },
        endDate: {
            type: 'string',
            description: 'End date of the interest pause period',
            example: '2024-01-11'
        },
        locale: {
            type: 'string',
            description: 'Locale to interpret the date format',
            example: 'en'
        },
        startDate: {
            type: 'string',
            description: 'Start date of the interest pause period',
            example: '2024-01-01'
        }
    }
} as const;

export const $InterestPauseResponseDto = {
    type: 'object',
    description: 'Response DTO for Interest Pause periods',
    properties: {
        dateFormat: {
            type: 'string',
            description: 'Date format used to interpret start and end dates',
            example: 'yyyy-MM-dd'
        },
        endDate: {
            type: 'string',
            format: 'date',
            description: 'End date of the interest pause period',
            example: '2024-01-11'
        },
        id: {
            type: 'integer',
            format: 'int64',
            description: 'ID of the loan term variation',
            example: 1
        },
        locale: {
            type: 'string',
            description: 'Locale used for date formatting',
            example: 'en'
        },
        startDate: {
            type: 'string',
            format: 'date',
            description: 'Start date of the interest pause period',
            example: '2024-01-01'
        }
    }
} as const;

export const $InterestPeriod = {
    type: 'object',
    properties: {
        balanceCorrectionAmount: {
            '$ref': '#/components/schemas/Money'
        },
        calculatedDueInterest: {
            type: 'number'
        },
        capitalizedIncomePrincipal: {
            '$ref': '#/components/schemas/Money'
        },
        creditedAmounts: {
            '$ref': '#/components/schemas/Money'
        },
        creditedInterest: {
            '$ref': '#/components/schemas/Money'
        },
        creditedPrincipal: {
            '$ref': '#/components/schemas/Money'
        },
        disbursementAmount: {
            '$ref': '#/components/schemas/Money'
        },
        dueDate: {
            type: 'string',
            format: 'date'
        },
        firstInterestPeriod: {
            type: 'boolean'
        },
        fromDate: {
            type: 'string',
            format: 'date'
        },
        length: {
            type: 'integer',
            format: 'int64'
        },
        lengthTillPeriodDueDate: {
            type: 'integer',
            format: 'int64'
        },
        mc: {
            type: 'object',
            properties: {
                precision: {
                    type: 'integer',
                    format: 'int32'
                },
                roundingMode: {
                    type: 'string',
                    enum: ['UP', 'DOWN', 'CEILING', 'FLOOR', 'HALF_UP', 'HALF_DOWN', 'HALF_EVEN', 'UNNECESSARY']
                }
            }
        },
        outstandingLoanBalance: {
            '$ref': '#/components/schemas/Money'
        },
        paused: {
            type: 'boolean'
        },
        rateFactor: {
            type: 'number'
        },
        rateFactorTillPeriodDueDate: {
            type: 'number'
        },
        repaymentPeriod: {
            '$ref': '#/components/schemas/RepaymentPeriod'
        }
    },
    required: ['dueDate', 'fromDate']
} as const;

export const $InterestRateChartSlabData = {
    type: 'object',
    properties: {
        amountRangeFrom: {
            type: 'number'
        },
        amountRangeTo: {
            type: 'number'
        },
        annualInterestRate: {
            type: 'number'
        },
        attributeNameOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        clientClassificationOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        clientTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        conditionTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        description: {
            type: 'string'
        },
        entityTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        fromPeriod: {
            type: 'integer',
            format: 'int32'
        },
        genderOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        incentiveTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        incentives: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InterestIncentiveData'
            },
            uniqueItems: true
        },
        periodType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        periodTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        toPeriod: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $InterestRateChartStabRequest = {
    type: 'object',
    properties: {
        amountRangeFrom: {
            type: 'number'
        },
        amountRangeTo: {
            type: 'number'
        },
        annualInterestRate: {
            type: 'number'
        },
        currencyCode: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        fromPeriod: {
            type: 'integer',
            format: 'int32'
        },
        incentives: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InterestIncentiveRequest'
            }
        },
        locale: {
            type: 'string'
        },
        periodType: {
            type: 'integer',
            format: 'int32'
        },
        toPeriod: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $InteropAccountData = {
    type: 'object',
    properties: {
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        commandId: {
            type: 'integer',
            format: 'int64'
        },
        creditBureauReportData: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        externalIdOrNull: {
            '$ref': '#/components/schemas/ExternalId'
        },
        glimId: {
            type: 'integer',
            format: 'int64'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        gsimId: {
            type: 'integer',
            format: 'int64'
        },
        loanExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        resourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        resourceId: {
            type: 'integer',
            format: 'int64'
        },
        resourceIdentifier: {
            type: 'string'
        },
        rollbackTransaction: {
            type: 'boolean'
        },
        savingsId: {
            type: 'integer',
            format: 'int64'
        },
        subResourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64'
        },
        transactionId: {
            type: 'string'
        }
    }
} as const;

export const $InteropIdentifierAccountResponseData = {
    type: 'object',
    properties: {
        accountId: {
            type: 'string'
        },
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        commandId: {
            type: 'integer',
            format: 'int64'
        },
        creditBureauReportData: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        externalIdOrNull: {
            '$ref': '#/components/schemas/ExternalId'
        },
        glimId: {
            type: 'integer',
            format: 'int64'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        gsimId: {
            type: 'integer',
            format: 'int64'
        },
        loanExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        resourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        resourceId: {
            type: 'integer',
            format: 'int64'
        },
        resourceIdentifier: {
            type: 'string'
        },
        rollbackTransaction: {
            type: 'boolean'
        },
        savingsId: {
            type: 'integer',
            format: 'int64'
        },
        subResourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64'
        },
        transactionId: {
            type: 'string'
        }
    },
    required: ['accountId']
} as const;

export const $InteropIdentifierRequestData = {
    type: 'object',
    properties: {
        accountId: {
            type: 'string'
        },
        idType: {
            type: 'string',
            enum: ['MSISDN', 'EMAIL', 'PERSONAL_ID', 'BUSINESS', 'DEVICE', 'ACCOUNT_ID', 'IBAN', 'ALIAS', 'BBAN']
        },
        idValue: {
            type: 'string'
        },
        subIdOrType: {
            type: 'string'
        }
    },
    required: ['accountId', 'idType', 'idValue']
} as const;

export const $InteropIdentifiersResponseData = {
    type: 'object',
    properties: {
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        commandId: {
            type: 'integer',
            format: 'int64'
        },
        creditBureauReportData: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        externalIdOrNull: {
            '$ref': '#/components/schemas/ExternalId'
        },
        glimId: {
            type: 'integer',
            format: 'int64'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        gsimId: {
            type: 'integer',
            format: 'int64'
        },
        loanExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        resourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        resourceId: {
            type: 'integer',
            format: 'int64'
        },
        resourceIdentifier: {
            type: 'string'
        },
        rollbackTransaction: {
            type: 'boolean'
        },
        savingsId: {
            type: 'integer',
            format: 'int64'
        },
        subResourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64'
        },
        transactionId: {
            type: 'string'
        }
    }
} as const;

export const $InteropKycResponseData = {
    type: 'object',
    properties: {
        birthCountry: {
            type: 'string'
        },
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        commandId: {
            type: 'integer',
            format: 'int64'
        },
        contactPhone: {
            type: 'string'
        },
        creditBureauReportData: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        dateOfBirth: {
            type: 'string'
        },
        emailAddress: {
            type: 'string'
        },
        externalIdOrNull: {
            '$ref': '#/components/schemas/ExternalId'
        },
        gender: {
            type: 'string'
        },
        glimId: {
            type: 'integer',
            format: 'int64'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        gsimId: {
            type: 'integer',
            format: 'int64'
        },
        idDocument: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IdDocument'
            }
        },
        loanExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        nationality: {
            type: 'string'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        postalAddress: {
            '$ref': '#/components/schemas/PostalAddress'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        resourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        resourceId: {
            type: 'integer',
            format: 'int64'
        },
        resourceIdentifier: {
            type: 'string'
        },
        rollbackTransaction: {
            type: 'boolean'
        },
        savingsId: {
            type: 'integer',
            format: 'int64'
        },
        subResourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64'
        },
        subjectName: {
            '$ref': '#/components/schemas/SubjectName'
        },
        transactionId: {
            type: 'string'
        }
    }
} as const;

export const $InteropQuoteRequestData = {
    type: 'object',
    properties: {
        accountId: {
            type: 'string'
        },
        amount: {
            '$ref': '#/components/schemas/MoneyData'
        },
        amountType: {
            type: 'string',
            enum: ['SEND', 'RECEIVE']
        },
        expiration: {
            type: 'string',
            format: 'date-time'
        },
        expirationLocalDate: {
            type: 'string',
            format: 'date'
        },
        extensionList: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExtensionData'
            }
        },
        fees: {
            '$ref': '#/components/schemas/MoneyData'
        },
        geoCode: {
            '$ref': '#/components/schemas/GeoCodeData'
        },
        note: {
            type: 'string'
        },
        quoteCode: {
            type: 'string'
        },
        requestCode: {
            type: 'string'
        },
        transactionCode: {
            type: 'string'
        },
        transactionRole: {
            type: 'string',
            enum: ['PAYER', 'PAYEE']
        },
        transactionType: {
            '$ref': '#/components/schemas/InteropTransactionTypeData'
        }
    },
    required: ['accountId', 'amount', 'amountType', 'quoteCode', 'transactionCode', 'transactionRole']
} as const;

export const $InteropQuoteResponseData = {
    type: 'object',
    properties: {
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        commandId: {
            type: 'integer',
            format: 'int64'
        },
        creditBureauReportData: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        expiration: {
            type: 'string'
        },
        extensionList: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExtensionData'
            }
        },
        externalIdOrNull: {
            '$ref': '#/components/schemas/ExternalId'
        },
        fspCommission: {
            '$ref': '#/components/schemas/MoneyData'
        },
        fspFee: {
            '$ref': '#/components/schemas/MoneyData'
        },
        glimId: {
            type: 'integer',
            format: 'int64'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        gsimId: {
            type: 'integer',
            format: 'int64'
        },
        loanExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        quoteCode: {
            type: 'string'
        },
        resourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        resourceId: {
            type: 'integer',
            format: 'int64'
        },
        resourceIdentifier: {
            type: 'string'
        },
        rollbackTransaction: {
            type: 'boolean'
        },
        savingsId: {
            type: 'integer',
            format: 'int64'
        },
        state: {
            type: 'string',
            enum: ['ACCEPTED', 'REJECTED']
        },
        subResourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64'
        },
        transactionCode: {
            type: 'string'
        },
        transactionId: {
            type: 'string'
        }
    },
    required: ['quoteCode', 'state', 'transactionCode']
} as const;

export const $InteropTransactionData = {
    type: 'object',
    properties: {
        accountBalance: {
            type: 'number'
        },
        accountId: {
            type: 'string'
        },
        amount: {
            type: 'number'
        },
        bookingDateTime: {
            type: 'string',
            format: 'date'
        },
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        chargeAmount: {
            type: 'number'
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        commandId: {
            type: 'integer',
            format: 'int64'
        },
        creditBureauReportData: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        currency: {
            type: 'string'
        },
        externalIdOrNull: {
            '$ref': '#/components/schemas/ExternalId'
        },
        glimId: {
            type: 'integer',
            format: 'int64'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        gsimId: {
            type: 'integer',
            format: 'int64'
        },
        loanExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        note: {
            type: 'string'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        resourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        resourceId: {
            type: 'integer',
            format: 'int64'
        },
        resourceIdentifier: {
            type: 'string'
        },
        rollbackTransaction: {
            type: 'boolean'
        },
        savingTransactionId: {
            type: 'string'
        },
        savingsId: {
            type: 'integer',
            format: 'int64'
        },
        subResourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64'
        },
        transactionId: {
            type: 'string'
        },
        transactionType: {
            type: 'string',
            enum: ['INVALID', 'DEPOSIT', 'WITHDRAWAL', 'INTEREST_POSTING', 'WITHDRAWAL_FEE', 'ANNUAL_FEE', 'WAIVE_CHARGES', 'PAY_CHARGE', 'DIVIDEND_PAYOUT', 'ACCRUAL', 'INITIATE_TRANSFER', 'APPROVE_TRANSFER', 'WITHDRAW_TRANSFER', 'REJECT_TRANSFER', 'WRITTEN_OFF', 'OVERDRAFT_INTEREST', 'WITHHOLD_TAX', 'ESCHEAT', 'AMOUNT_HOLD', 'AMOUNT_RELEASE']
        },
        valueDateTime: {
            type: 'string',
            format: 'date'
        }
    },
    required: ['accountBalance', 'accountId', 'amount', 'bookingDateTime', 'currency', 'savingTransactionId', 'transactionType', 'valueDateTime']
} as const;

export const $InteropTransactionRequestData = {
    type: 'object',
    properties: {
        accountId: {
            type: 'string'
        },
        amount: {
            '$ref': '#/components/schemas/MoneyData'
        },
        expiration: {
            type: 'string',
            format: 'date-time'
        },
        expirationLocalDate: {
            type: 'string',
            format: 'date'
        },
        extensionList: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExtensionData'
            }
        },
        geoCode: {
            '$ref': '#/components/schemas/GeoCodeData'
        },
        note: {
            type: 'string'
        },
        requestCode: {
            type: 'string'
        },
        transactionCode: {
            type: 'string'
        },
        transactionRole: {
            type: 'string',
            enum: ['PAYER', 'PAYEE']
        },
        transactionType: {
            '$ref': '#/components/schemas/InteropTransactionTypeData'
        }
    },
    required: ['accountId', 'amount', 'transactionCode', 'transactionRole']
} as const;

export const $InteropTransactionRequestResponseData = {
    type: 'object',
    properties: {
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        commandId: {
            type: 'integer',
            format: 'int64'
        },
        creditBureauReportData: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        expiration: {
            type: 'string'
        },
        extensionList: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExtensionData'
            }
        },
        externalIdOrNull: {
            '$ref': '#/components/schemas/ExternalId'
        },
        glimId: {
            type: 'integer',
            format: 'int64'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        gsimId: {
            type: 'integer',
            format: 'int64'
        },
        loanExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        requestCode: {
            type: 'string'
        },
        resourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        resourceId: {
            type: 'integer',
            format: 'int64'
        },
        resourceIdentifier: {
            type: 'string'
        },
        rollbackTransaction: {
            type: 'boolean'
        },
        savingsId: {
            type: 'integer',
            format: 'int64'
        },
        state: {
            type: 'string',
            enum: ['ACCEPTED', 'REJECTED']
        },
        subResourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64'
        },
        transactionCode: {
            type: 'string'
        },
        transactionId: {
            type: 'string'
        }
    },
    required: ['requestCode', 'state', 'transactionCode']
} as const;

export const $InteropTransactionTypeData = {
    type: 'object',
    properties: {
        initiator: {
            type: 'string',
            enum: ['PAYER', 'PAYEE']
        },
        initiatorType: {
            type: 'string',
            enum: ['CONSUMER', 'AGENT', 'BUSINESS', 'DEVICE']
        },
        scenario: {
            type: 'string',
            enum: ['DEPOSIT', 'WITHDRAWAL', 'TRANSFER', 'PAYMENT', 'REFUND']
        },
        subScenario: {
            type: 'string'
        }
    },
    required: ['initiator', 'initiatorType', 'scenario']
} as const;

export const $InteropTransactionsData = {
    type: 'object',
    properties: {
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        commandId: {
            type: 'integer',
            format: 'int64'
        },
        creditBureauReportData: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        externalIdOrNull: {
            '$ref': '#/components/schemas/ExternalId'
        },
        glimId: {
            type: 'integer',
            format: 'int64'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        gsimId: {
            type: 'integer',
            format: 'int64'
        },
        loanExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        resourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        resourceId: {
            type: 'integer',
            format: 'int64'
        },
        resourceIdentifier: {
            type: 'string'
        },
        rollbackTransaction: {
            type: 'boolean'
        },
        savingsId: {
            type: 'integer',
            format: 'int64'
        },
        subResourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64'
        },
        transactionId: {
            type: 'string'
        },
        transactions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InteropTransactionData'
            }
        }
    }
} as const;

export const $InteropTransferRequestData = {
    type: 'object',
    properties: {
        accountId: {
            type: 'string'
        },
        amount: {
            '$ref': '#/components/schemas/MoneyData'
        },
        expiration: {
            type: 'string',
            format: 'date-time'
        },
        expirationLocalDate: {
            type: 'string',
            format: 'date'
        },
        extensionList: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExtensionData'
            }
        },
        fspCommission: {
            '$ref': '#/components/schemas/MoneyData'
        },
        fspFee: {
            '$ref': '#/components/schemas/MoneyData'
        },
        geoCode: {
            '$ref': '#/components/schemas/GeoCodeData'
        },
        note: {
            type: 'string'
        },
        requestCode: {
            type: 'string'
        },
        transactionCode: {
            type: 'string'
        },
        transactionRole: {
            type: 'string',
            enum: ['PAYER', 'PAYEE']
        },
        transactionType: {
            '$ref': '#/components/schemas/InteropTransactionTypeData'
        },
        transferCode: {
            type: 'string'
        }
    },
    required: ['accountId', 'amount', 'transactionCode', 'transactionRole', 'transferCode']
} as const;

export const $InteropTransferResponseData = {
    type: 'object',
    properties: {
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        commandId: {
            type: 'integer',
            format: 'int64'
        },
        completedTimestamp: {
            type: 'string'
        },
        creditBureauReportData: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        expiration: {
            type: 'string'
        },
        extensionList: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExtensionData'
            }
        },
        externalIdOrNull: {
            '$ref': '#/components/schemas/ExternalId'
        },
        glimId: {
            type: 'integer',
            format: 'int64'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        gsimId: {
            type: 'integer',
            format: 'int64'
        },
        loanExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        resourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        resourceId: {
            type: 'integer',
            format: 'int64'
        },
        resourceIdentifier: {
            type: 'string'
        },
        rollbackTransaction: {
            type: 'boolean'
        },
        savingsId: {
            type: 'integer',
            format: 'int64'
        },
        state: {
            type: 'string',
            enum: ['ACCEPTED', 'REJECTED']
        },
        subResourceExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64'
        },
        transactionCode: {
            type: 'string'
        },
        transactionId: {
            type: 'string'
        },
        transferCode: {
            type: 'string'
        }
    },
    required: ['state', 'transactionCode', 'transferCode']
} as const;

export const $IsCatchUpRunningDTO = {
    type: 'object',
    properties: {
        catchUpRunning: {
            type: 'boolean'
        },
        processingDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $JobBusinessStepConfigData = {
    type: 'object',
    properties: {
        businessSteps: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BusinessStep'
            }
        },
        jobName: {
            type: 'string'
        }
    }
} as const;

export const $JobBusinessStepDetail = {
    type: 'object',
    properties: {
        availableBusinessSteps: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BusinessStepDetail'
            }
        },
        jobName: {
            type: 'string'
        }
    }
} as const;

export const $JobDetailHistoryData = {
    type: 'object',
    properties: {
        jobRunEndTime: {
            type: 'string',
            format: 'date-time'
        },
        jobRunErrorLog: {
            type: 'string'
        },
        jobRunErrorMessage: {
            type: 'string'
        },
        jobRunStartTime: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            type: 'string'
        },
        triggerType: {
            type: 'string'
        },
        version: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $JobDetailHistoryDataSwagger = {
    type: 'object',
    properties: {
        jobRunEndTime: {
            type: 'string',
            format: 'date-time'
        },
        jobRunStartTime: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            type: 'string',
            example: 'success'
        },
        triggerType: {
            type: 'string',
            example: 'cron'
        },
        version: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $JobParameterDTO = {
    type: 'object',
    example: 'Update loan Summary',
    properties: {
        parameterName: {
            type: 'string'
        },
        parameterValue: {
            type: 'string'
        }
    }
} as const;

export const $JournalEntryCommand = {
    type: 'object',
    properties: {
        accountNumber: {
            type: 'string'
        },
        accountingRuleId: {
            type: 'integer',
            format: 'int64'
        },
        amount: {
            type: 'number'
        },
        bankNumber: {
            type: 'string'
        },
        checkNumber: {
            type: 'string'
        },
        comments: {
            type: 'string'
        },
        credits: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SingleDebitOrCreditEntryCommand'
            }
        },
        currencyCode: {
            type: 'string'
        },
        dateFormat: {
            type: 'string'
        },
        debits: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SingleDebitOrCreditEntryCommand'
            }
        },
        externalAssetOwner: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int64'
        },
        receiptNumber: {
            type: 'string'
        },
        referenceNumber: {
            type: 'string'
        },
        routingCode: {
            type: 'string'
        },
        transactionDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $JournalEntryData = {
    type: 'object',
    properties: {
        accountNumber: {
            type: 'string'
        },
        amount: {
            type: 'number'
        },
        bankNumber: {
            type: 'string'
        },
        checkNumber: {
            type: 'string'
        },
        comments: {
            type: 'string'
        },
        createdByUserId: {
            type: 'integer',
            format: 'int64'
        },
        createdByUserName: {
            type: 'string'
        },
        createdDate: {
            type: 'string',
            format: 'date'
        },
        credits: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreditDebit'
            }
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        currencyCode: {
            type: 'string'
        },
        dateFormat: {
            type: 'string'
        },
        debits: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreditDebit'
            }
        },
        entityId: {
            type: 'integer',
            format: 'int64'
        },
        entityType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        entryType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        externalAssetOwner: {
            type: 'string'
        },
        glAccountCode: {
            type: 'string'
        },
        glAccountId: {
            type: 'integer',
            format: 'int64'
        },
        glAccountName: {
            type: 'string'
        },
        glAccountType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        locale: {
            type: 'string'
        },
        manualEntry: {
            type: 'boolean'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        officeName: {
            type: 'string'
        },
        officeRunningBalance: {
            type: 'number'
        },
        organizationRunningBalance: {
            type: 'number'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int64'
        },
        receiptNumber: {
            type: 'string'
        },
        referenceNumber: {
            type: 'string'
        },
        reversed: {
            type: 'boolean'
        },
        routingCode: {
            type: 'string'
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        },
        runningBalanceComputed: {
            type: 'boolean'
        },
        savingTransactionId: {
            type: 'integer',
            format: 'int64'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        transactionDate: {
            type: 'string',
            format: 'date'
        },
        transactionDetails: {
            '$ref': '#/components/schemas/TransactionDetailData'
        },
        transactionId: {
            type: 'string'
        }
    }
} as const;

export const $JournalEntryTransactionItem = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            format: 'double',
            example: 100
        },
        comments: {
            type: 'string',
            example: 'Manual entry'
        },
        createdByUserId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        createdByUserName: {
            type: 'string',
            example: 'mifos'
        },
        createdDate: {
            type: 'string',
            format: 'date'
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyItem'
        },
        entityId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        entityType: {
            '$ref': '#/components/schemas/EnumOptionType'
        },
        entryType: {
            '$ref': '#/components/schemas/EnumOptionType'
        },
        externalAssetOwner: {
            type: 'string',
            example: 'qwerty1234'
        },
        glAccountCode: {
            type: 'string',
            example: '0123-4567'
        },
        glAccountId: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        glAccountName: {
            type: 'string',
            example: 'Cash Account'
        },
        glAccountType: {
            '$ref': '#/components/schemas/EnumOptionType'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        manualEntry: {
            type: 'boolean',
            example: false
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        officeRunningBalance: {
            type: 'number',
            example: 1234.56
        },
        organizationRunningBalance: {
            type: 'number',
            example: 1234.56
        },
        referenceNumber: {
            type: 'string',
            example: 'QWERTY'
        },
        reversed: {
            type: 'boolean',
            example: false
        },
        runningBalanceComputed: {
            type: 'boolean',
            example: false
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        transactionDate: {
            type: 'string',
            format: 'date'
        },
        transactionDetails: {
            '$ref': '#/components/schemas/TransactionDetails'
        },
        transactionId: {
            type: 'string',
            example: 'L12'
        }
    }
} as const;

export const $LoanAccountLock = {
    type: 'object',
    properties: {
        error: {
            type: 'string'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        lockOwner: {
            type: 'string',
            enum: ['LOAN_COB_CHUNK_PROCESSING', 'LOAN_INLINE_COB_PROCESSING']
        },
        lockPlacedOn: {
            type: 'string',
            format: 'date-time'
        },
        lockPlacedOnCobBusinessDate: {
            type: 'string',
            format: 'date'
        },
        newLockOwner: {
            type: 'string',
            enum: ['LOAN_COB_CHUNK_PROCESSING', 'LOAN_INLINE_COB_PROCESSING'],
            writeOnly: true
        },
        stacktrace: {
            type: 'string'
        },
        version: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $LoanAccountLockResponseDTO = {
    type: 'object',
    properties: {
        content: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanAccountLock'
            }
        },
        limit: {
            type: 'integer',
            format: 'int32'
        },
        page: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $LoanApprovedAmountHistoryData = {
    type: 'object',
    properties: {
        dateOfChange: {
            type: 'string',
            format: 'date-time'
        },
        externalLoanId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        newApprovedAmount: {
            type: 'number'
        },
        oldApprovedAmount: {
            type: 'number'
        }
    }
} as const;

export const $LoanArrearsData = {
    type: 'object',
    properties: {
        feeOverdue: {
            type: 'number'
        },
        interestOverdue: {
            type: 'number'
        },
        overDueSince: {
            type: 'string',
            format: 'date'
        },
        overdue: {
            type: 'boolean'
        },
        penaltyOverdue: {
            type: 'number'
        },
        principalOverdue: {
            type: 'number'
        },
        totalOverdue: {
            type: 'number'
        }
    }
} as const;

export const $LoanCapitalizedIncomeData = {
    type: 'object',
    properties: {
        capitalizedIncomeData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CapitalizedIncomeDetails'
            }
        }
    }
} as const;

export const $LoanChargePaidByData = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        chargeId: {
            type: 'integer',
            format: 'int64'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        installmentNumber: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string'
        },
        transactionId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $LoanCollateralResponseData = {
    type: 'object',
    properties: {
        clientCollateralId: {
            type: 'integer',
            format: 'int64'
        },
        collateralId: {
            type: 'integer',
            format: 'int64'
        },
        quantity: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        totalCollateral: {
            type: 'number'
        }
    }
} as const;

export const $LoanCollateralTemplateData = {
    type: 'object',
    properties: {
        basePrice: {
            type: 'number'
        },
        collateralId: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        pctToBase: {
            type: 'number'
        },
        quantity: {
            type: 'number'
        }
    }
} as const;

export const $LoanFeeData = {
    type: 'object',
    properties: {
        feeAdjustments: {
            type: 'number'
        },
        feeChargesCharged: {
            type: 'number'
        },
        feeChargesDueAtDisbursementCharged: {
            type: 'number'
        },
        feeChargesOutstanding: {
            type: 'number'
        },
        feeChargesPaid: {
            type: 'number'
        },
        feeChargesWaived: {
            type: 'number'
        },
        feeChargesWrittenOff: {
            type: 'number'
        }
    }
} as const;

export const $LoanInterestData = {
    type: 'object',
    properties: {
        interestCharged: {
            type: 'number'
        },
        interestOutstanding: {
            type: 'number'
        },
        interestPaid: {
            type: 'number'
        },
        interestWaived: {
            type: 'number'
        },
        interestWrittenOff: {
            type: 'number'
        }
    }
} as const;

export const $LoanPenaltyData = {
    type: 'object',
    properties: {
        penaltyAdjustments: {
            type: 'number'
        },
        penaltyChargesCharged: {
            type: 'number'
        },
        penaltyChargesOutstanding: {
            type: 'number'
        },
        penaltyChargesPaid: {
            type: 'number'
        },
        penaltyChargesWaived: {
            type: 'number'
        },
        penaltyChargesWrittenOff: {
            type: 'number'
        }
    }
} as const;

export const $LoanPointInTimeData = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'string'
        },
        arrears: {
            '$ref': '#/components/schemas/LoanArrearsData'
        },
        clientAccountNo: {
            type: 'string'
        },
        clientDisplayName: {
            type: 'string'
        },
        clientExternalId: {
            type: 'string'
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        clientOfficeId: {
            type: 'integer',
            format: 'int64'
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        externalId: {
            type: 'string'
        },
        fee: {
            '$ref': '#/components/schemas/LoanFeeData'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        interest: {
            '$ref': '#/components/schemas/LoanInterestData'
        },
        loanProductId: {
            type: 'integer',
            format: 'int64'
        },
        loanProductName: {
            type: 'string'
        },
        penalty: {
            '$ref': '#/components/schemas/LoanPenaltyData'
        },
        principal: {
            '$ref': '#/components/schemas/LoanPrincipalData'
        },
        status: {
            '$ref': '#/components/schemas/LoanStatusEnumData'
        },
        total: {
            '$ref': '#/components/schemas/LoanTotalAmountData'
        }
    }
} as const;

export const $LoanPrincipalData = {
    type: 'object',
    properties: {
        principalAdjustments: {
            type: 'number'
        },
        principalDisbursed: {
            type: 'number'
        },
        principalOutstanding: {
            type: 'number'
        },
        principalPaid: {
            type: 'number'
        },
        principalWrittenOff: {
            type: 'number'
        }
    }
} as const;

export const $LoanProduct = {
    type: 'object',
    properties: {
        accountMovesOutOfNPAOnlyOnArrearsCompletion: {
            type: 'boolean'
        },
        accountingDisabled: {
            type: 'boolean'
        },
        accountingRule: {
            type: 'string',
            enum: ['NONE', 'CASH BASED', 'ACCRUAL PERIODIC', 'ACCRUAL UPFRONT']
        },
        allowApprovedDisbursedAmountsOverApplied: {
            type: 'boolean'
        },
        allowVariabeInstallments: {
            type: 'boolean'
        },
        arrearsBasedOnOriginalSchedule: {
            type: 'boolean'
        },
        borrowerCycleVariations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductBorrowerCycleVariations'
            },
            uniqueItems: true
        },
        canDefineInstallmentAmount: {
            type: 'boolean'
        },
        canUseForTopup: {
            type: 'boolean'
        },
        cashBasedAccountingEnabled: {
            type: 'boolean'
        },
        charges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Charge'
            }
        },
        closeDate: {
            type: 'string',
            format: 'date'
        },
        creditAllocationRules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductCreditAllocationRule'
            }
        },
        currency: {
            '$ref': '#/components/schemas/MonetaryCurrency'
        },
        delinquencyBucket: {
            '$ref': '#/components/schemas/DelinquencyBucket'
        },
        description: {
            type: 'string'
        },
        disallowExpectedDisbursements: {
            type: 'boolean'
        },
        dueDaysForRepaymentEvent: {
            type: 'integer',
            format: 'int32'
        },
        enableInstallmentLevelDelinquency: {
            type: 'boolean'
        },
        equalAmortization: {
            type: 'boolean'
        },
        externalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        fixedPrincipalPercentagePerInstallment: {
            type: 'number'
        },
        floatingRates: {
            '$ref': '#/components/schemas/LoanProductFloatingRates'
        },
        fund: {
            '$ref': '#/components/schemas/Fund'
        },
        holdGuaranteeFunds: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        includeInBorrowerCycle: {
            type: 'boolean'
        },
        interestPeriodFrequencyType: {
            type: 'string',
            enum: ['DAYS', 'WEEKS', 'MONTHS', 'YEARS', 'WHOLE_TERM', 'INVALID']
        },
        interestRecalculationEnabled: {
            type: 'boolean'
        },
        linkedToFloatingInterestRate: {
            type: 'boolean'
        },
        loanConfigurableAttributes: {
            '$ref': '#/components/schemas/LoanProductConfigurableAttributes'
        },
        loanProductGuaranteeDetails: {
            '$ref': '#/components/schemas/LoanProductGuaranteeDetails'
        },
        loanProductMinMaxConstraints: {
            '$ref': '#/components/schemas/LoanProductMinMaxConstraints'
        },
        loanProductRelatedDetail: {
            '$ref': '#/components/schemas/LoanProductRelatedDetail'
        },
        loanProductTrancheDetails: {
            '$ref': '#/components/schemas/LoanProductTrancheDetails'
        },
        maxNominalInterestRatePerPeriod: {
            type: 'number'
        },
        maxNumberOfRepayments: {
            type: 'integer',
            format: 'int32'
        },
        maxPrincipalAmount: {
            '$ref': '#/components/schemas/Money'
        },
        minNominalInterestRatePerPeriod: {
            type: 'number'
        },
        minNumberOfRepayments: {
            type: 'integer',
            format: 'int32'
        },
        minPrincipalAmount: {
            '$ref': '#/components/schemas/Money'
        },
        minimumDaysBetweenDisbursalAndFirstRepayment: {
            type: 'integer',
            format: 'int32'
        },
        multiDisburseLoan: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        nominalInterestRatePerPeriod: {
            type: 'number'
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32'
        },
        overAppliedCalculationType: {
            type: 'string'
        },
        overAppliedNumber: {
            type: 'integer',
            format: 'int32'
        },
        overDueDaysForRepaymentEvent: {
            type: 'integer',
            format: 'int32'
        },
        overdueDaysForNPA: {
            type: 'integer',
            format: 'int32'
        },
        paymentAllocationRules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductPaymentAllocationRule'
            }
        },
        periodicAccrualAccountingEnabled: {
            type: 'boolean'
        },
        principalAmount: {
            '$ref': '#/components/schemas/Money'
        },
        principalThresholdForLastInstallment: {
            type: 'number'
        },
        productInterestRecalculationDetails: {
            '$ref': '#/components/schemas/LoanProductInterestRecalculationDetails'
        },
        rates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Rate'
            }
        },
        repaymentStartDateType: {
            type: 'string',
            enum: ['INVALID', 'DISBURSEMENT_DATE', 'SUBMITTED_ON_DATE']
        },
        shortName: {
            type: 'string'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        syncExpectedWithDisbursementDate: {
            type: 'boolean'
        },
        transactionProcessingStrategyCode: {
            type: 'string'
        },
        transactionProcessingStrategyName: {
            type: 'string'
        },
        upfrontAccrualAccountingEnabled: {
            type: 'boolean'
        },
        useBorrowerCycle: {
            type: 'boolean'
        },
        variableInstallmentConfig: {
            '$ref': '#/components/schemas/LoanProductVariableInstallmentConfig'
        }
    }
} as const;

export const $LoanProductBorrowerCycleVariationData = {
    type: 'object',
    properties: {
        borrowerCycleNumber: {
            type: 'integer',
            format: 'int32'
        },
        defaultValue: {
            type: 'number'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        loanProductParamType: {
            type: 'string',
            enum: ['INVALID', 'PRINCIPAL', 'INTERESTRATE', 'REPAYMENT']
        },
        loanProductValueConditionType: {
            type: 'string',
            enum: ['INVALID', 'EQUAL', 'GREATERTHAN']
        },
        maxValue: {
            type: 'number'
        },
        minValue: {
            type: 'number'
        },
        paramType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        valueConditionType: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;

export const $LoanProductBorrowerCycleVariations = {
    type: 'object',
    properties: {
        borrowerCycleNumber: {
            type: 'integer',
            format: 'int32'
        },
        defaultValue: {
            type: 'number'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        maxValue: {
            type: 'number'
        },
        minValue: {
            type: 'number'
        },
        new: {
            type: 'boolean'
        },
        paramType: {
            type: 'string',
            enum: ['INVALID', 'PRINCIPAL', 'INTERESTRATE', 'REPAYMENT']
        },
        valueConditionType: {
            type: 'string',
            enum: ['INVALID', 'EQUAL', 'GREATERTHAN']
        }
    }
} as const;

export const $LoanProductChargeData = {
    type: 'object',
    description: 'LoanProductChargeData',
    properties: {
        amount: {
            type: 'number',
            example: 60
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $LoanProductChargeToGLAccountMapper = {
    type: 'object',
    description: 'LoanProductChargeToGLAccountMapper',
    properties: {
        charge: {
            '$ref': '#/components/schemas/LoanProductChargeData'
        },
        incomeAccount: {
            '$ref': '#/components/schemas/GLAccountData'
        }
    }
} as const;

export const $LoanProductConfigurableAttributes = {
    type: 'object',
    properties: {
        amortizationBoolean: {
            type: 'boolean'
        },
        amortizationType: {
            type: 'boolean',
            writeOnly: true
        },
        arrearsToleranceBoolean: {
            type: 'boolean'
        },
        graceOnArrearsAgeing: {
            type: 'boolean',
            writeOnly: true
        },
        graceOnArrearsAgingBoolean: {
            type: 'boolean'
        },
        graceOnPrincipalAndInterestPayment: {
            type: 'boolean',
            writeOnly: true
        },
        graceOnPrincipalAndInterestPaymentBoolean: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        inArrearsTolerance: {
            type: 'boolean',
            writeOnly: true
        },
        interestCalcPeriodBoolean: {
            type: 'boolean'
        },
        interestCalculationPeriodType: {
            type: 'boolean',
            writeOnly: true
        },
        interestMethodBoolean: {
            type: 'boolean'
        },
        interestType: {
            type: 'boolean',
            writeOnly: true
        },
        loanProduct: {
            '$ref': '#/components/schemas/LoanProduct'
        },
        new: {
            type: 'boolean'
        },
        repaymentEvery: {
            type: 'boolean',
            writeOnly: true
        },
        repaymentEveryBoolean: {
            type: 'boolean'
        },
        transactionProcessingStrategyBoolean: {
            type: 'boolean'
        },
        transactionProcessingStrategyCode: {
            type: 'boolean',
            writeOnly: true
        }
    }
} as const;

export const $LoanProductCreditAllocationRule = {
    type: 'object',
    properties: {
        allocationTypes: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['PENALTY', 'FEE', 'PRINCIPAL', 'INTEREST']
            }
        },
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        },
        loanProduct: {
            '$ref': '#/components/schemas/LoanProduct'
        },
        new: {
            type: 'boolean'
        },
        transactionType: {
            type: 'string',
            enum: ['CHARGEBACK']
        }
    },
    required: ['createdBy', 'createdDate', 'lastModifiedBy', 'lastModifiedDate']
} as const;

export const $LoanProductData = {
    type: 'object',
    properties: {
        accountMovesOutOfNPAOnlyOnArrearsCompletion: {
            type: 'boolean'
        },
        accountingMappingOptions: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/GLAccountData'
                }
            }
        },
        accountingMappings: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        accountingRule: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        accountingRuleOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        advancedPaymentAllocationFutureInstallmentAllocationRules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        advancedPaymentAllocationTransactionTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        advancedPaymentAllocationTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        allowApprovedDisbursedAmountsOverApplied: {
            type: 'boolean'
        },
        allowAttributeOverrides: {
            '$ref': '#/components/schemas/LoanProductConfigurableAttributes'
        },
        allowPartialPeriodInterestCalculation: {
            type: 'boolean'
        },
        allowVariableInstallments: {
            type: 'boolean'
        },
        amortizationType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        amortizationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        annualInterestRate: {
            type: 'number'
        },
        buyDownFeeCalculationType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        buyDownFeeCalculationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        buyDownFeeIncomeType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        buyDownFeeIncomeTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        buyDownFeeStrategy: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        buyDownFeeStrategyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        canDefineInstallmentAmount: {
            type: 'boolean'
        },
        canUseForTopup: {
            type: 'boolean'
        },
        capitalizedIncomeCalculationType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeCalculationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        capitalizedIncomeStrategy: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeStrategyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        capitalizedIncomeType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        capitalizedIncomeTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        chargeOffBehaviour: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        chargeOffBehaviourOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        chargeOffReasonOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        chargeOffReasonToExpenseAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChargeOffReasonToGLAccountMapper'
            }
        },
        chargeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChargeData'
            }
        },
        charges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChargeData'
            }
        },
        closeDate: {
            type: 'string',
            format: 'date'
        },
        compoundingToBePostedAsTransaction: {
            type: 'boolean'
        },
        creditAllocation: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreditAllocationData'
            }
        },
        creditAllocationAllocationTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        creditAllocationTransactionTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        currencyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CurrencyData'
            }
        },
        daysInMonthType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        daysInMonthTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        daysInYearCustomStrategy: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        daysInYearCustomStrategyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        daysInYearType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        daysInYearTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        defaultDifferentialLendingRate: {
            type: 'number'
        },
        delinquencyBucket: {
            '$ref': '#/components/schemas/DelinquencyBucketData'
        },
        delinquencyBucketOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DelinquencyBucketData'
            }
        },
        description: {
            type: 'string'
        },
        disallowExpectedDisbursements: {
            type: 'boolean'
        },
        disbursedAmountPercentageForDownPayment: {
            type: 'number'
        },
        dueDaysForRepaymentEvent: {
            type: 'integer',
            format: 'int32'
        },
        enableAccrualActivityPosting: {
            type: 'boolean'
        },
        enableAutoRepaymentForDownPayment: {
            type: 'boolean'
        },
        enableBuyDownFee: {
            type: 'boolean'
        },
        enableDownPayment: {
            type: 'boolean'
        },
        enableIncomeCapitalization: {
            type: 'boolean'
        },
        enableInstallmentLevelDelinquency: {
            type: 'boolean'
        },
        equalAmortization: {
            type: 'boolean'
        },
        externalId: {
            type: 'string'
        },
        feeToIncomeAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChargeToGLAccountMapper'
            }
        },
        fixedLength: {
            type: 'integer',
            format: 'int32'
        },
        fixedPrincipalPercentagePerInstallment: {
            type: 'number'
        },
        floatingInterestRateCalculationAllowed: {
            type: 'boolean'
        },
        floatingRateId: {
            type: 'integer',
            format: 'int32'
        },
        floatingRateName: {
            type: 'string'
        },
        floatingRateOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FloatingRateData'
            }
        },
        fundId: {
            type: 'integer',
            format: 'int64'
        },
        fundName: {
            type: 'string'
        },
        fundOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FundData'
            }
        },
        graceOnArrearsAgeing: {
            type: 'integer',
            format: 'int32'
        },
        graceOnInterestCharged: {
            type: 'integer',
            format: 'int32'
        },
        graceOnInterestPayment: {
            type: 'integer',
            format: 'int32'
        },
        graceOnPrincipalPayment: {
            type: 'integer',
            format: 'int32'
        },
        holdGuaranteeFunds: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        inArrearsTolerance: {
            type: 'number'
        },
        includeInBorrowerCycle: {
            type: 'boolean'
        },
        installmentAmountInMultiplesOf: {
            type: 'integer',
            format: 'int32'
        },
        interestCalculationPeriodType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        interestCalculationPeriodTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        interestRateDifferential: {
            type: 'number'
        },
        interestRateFrequencyType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        interestRateFrequencyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        interestRatePerPeriod: {
            type: 'number'
        },
        interestRateVariationsForBorrowerCycle: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductBorrowerCycleVariationData'
            }
        },
        interestRecalculationCompoundingTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        interestRecalculationData: {
            '$ref': '#/components/schemas/LoanProductInterestRecalculationData'
        },
        interestRecalculationDayOfWeekTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        interestRecalculationEnabled: {
            type: 'boolean'
        },
        interestRecalculationFrequencyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        interestRecalculationNthDayTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        interestRecognitionOnDisbursementDate: {
            type: 'boolean'
        },
        interestType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        interestTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        isAllowPartialPeriodInterestCalculation: {
            type: 'boolean'
        },
        isEqualAmortization: {
            type: 'boolean'
        },
        isFloatingInterestRateCalculationAllowed: {
            type: 'boolean'
        },
        isInterestRecalculationEnabled: {
            type: 'boolean'
        },
        isLinkedToFloatingInterestRates: {
            type: 'boolean'
        },
        isRatesEnabled: {
            type: 'boolean'
        },
        linkedToFloatingInterestRates: {
            type: 'boolean'
        },
        loanProductConfigurableAttributes: {
            '$ref': '#/components/schemas/LoanProductConfigurableAttributes'
        },
        loanScheduleProcessingType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        loanScheduleProcessingTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        loanScheduleType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        loanScheduleTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        maxDifferentialLendingRate: {
            type: 'number'
        },
        maxInterestRatePerPeriod: {
            type: 'number'
        },
        maxNumberOfRepayments: {
            type: 'integer',
            format: 'int32'
        },
        maxPrincipal: {
            type: 'number'
        },
        maxTrancheCount: {
            type: 'integer',
            format: 'int32'
        },
        maximumGap: {
            type: 'integer',
            format: 'int32'
        },
        merchantBuyDownFee: {
            type: 'boolean'
        },
        minDifferentialLendingRate: {
            type: 'number'
        },
        minInterestRatePerPeriod: {
            type: 'number'
        },
        minNumberOfRepayments: {
            type: 'integer',
            format: 'int32'
        },
        minPrincipal: {
            type: 'number'
        },
        minimumDaysBetweenDisbursalAndFirstRepayment: {
            type: 'integer',
            format: 'int32'
        },
        minimumGap: {
            type: 'integer',
            format: 'int32'
        },
        multiDisburseLoan: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        numberOfRepaymentVariationsForBorrowerCycle: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductBorrowerCycleVariationData'
            }
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32'
        },
        outstandingLoanBalance: {
            type: 'number'
        },
        overAppliedCalculationType: {
            type: 'string'
        },
        overAppliedNumber: {
            type: 'integer',
            format: 'int32'
        },
        overDueDaysForRepaymentEvent: {
            type: 'integer',
            format: 'int32'
        },
        overdueDaysForNPA: {
            type: 'integer',
            format: 'int32'
        },
        paymentAllocation: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AdvancedPaymentData'
            }
        },
        paymentChannelToFundSourceMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaymentTypeToGLAccountMapper'
            }
        },
        paymentTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaymentTypeData'
            }
        },
        penaltyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChargeData'
            }
        },
        penaltyToIncomeAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChargeToGLAccountMapper'
            }
        },
        preClosureInterestCalculationStrategyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        principal: {
            type: 'number'
        },
        principalThresholdForLastInstallment: {
            type: 'number'
        },
        principalVariationsForBorrowerCycle: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductBorrowerCycleVariationData'
            }
        },
        productGuaranteeData: {
            '$ref': '#/components/schemas/LoanProductGuaranteeData'
        },
        rateOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateData'
            }
        },
        rates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateData'
            }
        },
        ratesEnabled: {
            type: 'boolean'
        },
        recurringMoratoriumOnPrincipalPeriods: {
            type: 'integer',
            format: 'int32'
        },
        repaymentEvery: {
            type: 'integer',
            format: 'int32'
        },
        repaymentFrequencyType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        repaymentFrequencyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        repaymentStartDateType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        repaymentStartDateTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        rescheduleStrategyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        shortName: {
            type: 'string'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        status: {
            type: 'string'
        },
        supportedInterestRefundTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        supportedInterestRefundTypesOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringEnumOptionData'
            }
        },
        syncExpectedWithDisbursementDate: {
            type: 'boolean'
        },
        transactionProcessingStrategyCode: {
            type: 'string'
        },
        transactionProcessingStrategyName: {
            type: 'string'
        },
        transactionProcessingStrategyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TransactionProcessingStrategyData'
            }
        },
        useBorrowerCycle: {
            type: 'boolean'
        },
        valueConditionTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        }
    }
} as const;

export const $LoanProductFloatingRates = {
    type: 'object',
    properties: {
        defaultDifferentialLendingRate: {
            type: 'number'
        },
        floatingInterestRateCalculationAllowed: {
            type: 'boolean'
        },
        floatingRate: {
            '$ref': '#/components/schemas/FloatingRate'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        interestRateDifferential: {
            type: 'number'
        },
        loanProduct: {
            '$ref': '#/components/schemas/LoanProduct'
        },
        maxDifferentialLendingRate: {
            type: 'number'
        },
        minDifferentialLendingRate: {
            type: 'number'
        },
        new: {
            type: 'boolean'
        }
    }
} as const;

export const $LoanProductGuaranteeData = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        mandatoryGuarantee: {
            type: 'number'
        },
        minimumGuaranteeFromGuarantor: {
            type: 'number'
        },
        minimumGuaranteeFromOwnFunds: {
            type: 'number'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $LoanProductGuaranteeDetails = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        loanProduct: {
            '$ref': '#/components/schemas/LoanProduct'
        },
        mandatoryGuarantee: {
            type: 'number'
        },
        minimumGuaranteeFromGuarantor: {
            type: 'number'
        },
        minimumGuaranteeFromOwnFunds: {
            type: 'number'
        },
        new: {
            type: 'boolean'
        }
    }
} as const;

export const $LoanProductInterestRecalculationData = {
    type: 'object',
    properties: {
        allowCompoundingOnEod: {
            type: 'boolean'
        },
        arrearsBasedOnOriginalSchedule: {
            type: 'boolean'
        },
        compoundingToBePostedAsTransaction: {
            type: 'boolean'
        },
        disallowInterestCalculationOnPastDue: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        interestRecalculationCompoundingType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        isArrearsBasedOnOriginalSchedule: {
            type: 'boolean'
        },
        isCompoundingToBePostedAsTransaction: {
            type: 'boolean'
        },
        preClosureInterestCalculationStrategy: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        recalculationCompoundingFrequencyInterval: {
            type: 'integer',
            format: 'int32'
        },
        recalculationCompoundingFrequencyNthDay: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        recalculationCompoundingFrequencyOnDay: {
            type: 'integer',
            format: 'int32'
        },
        recalculationCompoundingFrequencyType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        recalculationCompoundingFrequencyWeekday: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        recalculationRestFrequencyInterval: {
            type: 'integer',
            format: 'int32'
        },
        recalculationRestFrequencyNthDay: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        recalculationRestFrequencyOnDay: {
            type: 'integer',
            format: 'int32'
        },
        recalculationRestFrequencyType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        recalculationRestFrequencyWeekday: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        rescheduleStrategyType: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;

export const $LoanProductInterestRecalculationDetails = {
    type: 'object',
    properties: {
        allowCompoundingOnEod: {
            type: 'boolean'
        },
        arrearsBasedOnOriginalSchedule: {
            type: 'boolean'
        },
        compoundingFrequencyNthDay: {
            type: 'integer',
            format: 'int32'
        },
        compoundingFrequencyOnDay: {
            type: 'integer',
            format: 'int32'
        },
        compoundingFrequencyType: {
            type: 'string',
            enum: ['INVALID', 'SAME_AS_REPAYMENT_PERIOD', 'DAILY', 'WEEKLY', 'MONTHLY']
        },
        compoundingFrequencyWeekday: {
            type: 'integer',
            format: 'int32'
        },
        compoundingInterval: {
            type: 'integer',
            format: 'int32'
        },
        disallowInterestCalculationOnPastDue: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        interestRecalculationCompoundingMethod: {
            type: 'integer',
            format: 'int32'
        },
        isCompoundingToBePostedAsTransaction: {
            type: 'boolean'
        },
        loanProduct: {
            '$ref': '#/components/schemas/LoanProduct'
        },
        new: {
            type: 'boolean'
        },
        preCloseInterestCalculationStrategy: {
            type: 'string',
            enum: ['NONE', 'TILL_PRE_CLOSURE_DATE', 'TILL_REST_FREQUENCY_DATE']
        },
        rescheduleStrategyMethod: {
            type: 'integer',
            format: 'int32'
        },
        restFrequencyNthDay: {
            type: 'integer',
            format: 'int32'
        },
        restFrequencyOnDay: {
            type: 'integer',
            format: 'int32'
        },
        restFrequencyType: {
            type: 'string',
            enum: ['INVALID', 'SAME_AS_REPAYMENT_PERIOD', 'DAILY', 'WEEKLY', 'MONTHLY']
        },
        restFrequencyWeekday: {
            type: 'integer',
            format: 'int32'
        },
        restInterval: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $LoanProductMinMaxConstraints = {
    type: 'object',
    properties: {
        maxNominalInterestRatePerPeriod: {
            type: 'number'
        },
        maxNumberOfRepayments: {
            type: 'integer',
            format: 'int32'
        },
        maxPrincipal: {
            type: 'number'
        },
        minNominalInterestRatePerPeriod: {
            type: 'number'
        },
        minNumberOfRepayments: {
            type: 'integer',
            format: 'int32'
        },
        minPrincipal: {
            type: 'number'
        }
    }
} as const;

export const $LoanProductMinimumRepaymentScheduleRelatedDetail = {
    type: 'object',
    properties: {
        allowPartialPeriodInterestCalculation: {
            type: 'boolean'
        },
        amortizationMethod: {
            type: 'string',
            enum: ['EQUAL_PRINCIPAL', 'EQUAL_INSTALLMENTS', 'INVALID']
        },
        annualNominalInterestRate: {
            type: 'number'
        },
        currencyData: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        daysInMonthType: {
            type: 'integer',
            format: 'int32'
        },
        daysInYearCustomStrategy: {
            type: 'string',
            enum: ['FULL_LEAP_YEAR', 'FEB_29_PERIOD_ONLY']
        },
        daysInYearType: {
            type: 'integer',
            format: 'int32'
        },
        graceOnArrearsAgeing: {
            type: 'integer',
            format: 'int32'
        },
        graceOnInterestCharged: {
            type: 'integer',
            format: 'int32'
        },
        graceOnInterestPayment: {
            type: 'integer',
            format: 'int32'
        },
        graceOnPrincipalPayment: {
            type: 'integer',
            format: 'int32'
        },
        interestCalculationPeriodMethod: {
            type: 'string',
            enum: ['DAILY', 'SAME_AS_REPAYMENT_PERIOD', 'INVALID']
        },
        interestMethod: {
            type: 'string',
            enum: ['DECLINING_BALANCE', 'FLAT', 'INVALID']
        },
        interestPeriodFrequencyType: {
            type: 'string',
            enum: ['DAYS', 'WEEKS', 'MONTHS', 'YEARS', 'WHOLE_TERM', 'INVALID']
        },
        interestRecognitionOnDisbursementDate: {
            type: 'boolean'
        },
        nominalInterestRatePerPeriod: {
            type: 'number'
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32'
        },
        recurringMoratoriumOnPrincipalPeriods: {
            type: 'integer',
            format: 'int32'
        },
        repayEvery: {
            type: 'integer',
            format: 'int32'
        },
        repaymentPeriodFrequencyType: {
            type: 'string',
            enum: ['DAYS', 'WEEKS', 'MONTHS', 'YEARS', 'WHOLE_TERM', 'INVALID']
        }
    }
} as const;

export const $LoanProductPaymentAllocationRule = {
    type: 'object',
    properties: {
        allocationTypes: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['PAST_DUE_PENALTY', 'PAST_DUE_FEE', 'PAST_DUE_PRINCIPAL', 'PAST_DUE_INTEREST', 'DUE_PENALTY', 'DUE_FEE', 'DUE_PRINCIPAL', 'DUE_INTEREST', 'IN_ADVANCE_PENALTY', 'IN_ADVANCE_FEE', 'IN_ADVANCE_PRINCIPAL', 'IN_ADVANCE_INTEREST']
            }
        },
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        futureInstallmentAllocationRule: {
            type: 'string',
            enum: ['NEXT_INSTALLMENT', 'LAST_INSTALLMENT', 'NEXT_LAST_INSTALLMENT', 'REAMORTIZATION']
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        },
        loanProduct: {
            '$ref': '#/components/schemas/LoanProduct'
        },
        new: {
            type: 'boolean'
        },
        transactionType: {
            type: 'string',
            enum: ['DEFAULT', 'REPAYMENT', 'DOWN_PAYMENT', 'MERCHANT_ISSUED_REFUND', 'PAYOUT_REFUND', 'GOODWILL_CREDIT', 'CHARGE_REFUND', 'CHARGE_ADJUSTMENT', 'WAIVE_INTEREST', 'CHARGE_PAYMENT', 'REFUND_FOR_ACTIVE_LOAN', 'INTEREST_PAYMENT_WAIVER', 'INTEREST_REFUND', 'CAPITALIZED_INCOME_ADJUSTMENT']
        }
    },
    required: ['createdBy', 'createdDate', 'lastModifiedBy', 'lastModifiedDate']
} as const;

export const $LoanProductProvisioningEntryData = {
    type: 'object',
    properties: {
        amountreserved: {
            type: 'number'
        },
        balance: {
            type: 'number'
        },
        categoryId: {
            type: 'integer',
            format: 'int64'
        },
        categoryName: {
            type: 'string'
        },
        criteriaId: {
            type: 'integer',
            format: 'int64'
        },
        currencyCode: {
            type: 'string'
        },
        expenseAccount: {
            type: 'integer',
            format: 'int64'
        },
        expenseAccountCode: {
            type: 'string'
        },
        expenseAccountName: {
            type: 'string'
        },
        historyId: {
            type: 'integer',
            format: 'int64'
        },
        liabilityAccountCode: {
            type: 'string'
        },
        liabilityAccountName: {
            type: 'string'
        },
        liablityAccount: {
            type: 'integer',
            format: 'int64'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        officeName: {
            type: 'string'
        },
        overdueInDays: {
            type: 'integer',
            format: 'int64'
        },
        percentage: {
            type: 'number'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        productName: {
            type: 'string'
        }
    }
} as const;

export const $LoanProductRelatedDetail = {
    type: 'object',
    properties: {
        allowPartialPeriodInterestCalculation: {
            type: 'boolean'
        },
        amortizationMethod: {
            type: 'string',
            enum: ['EQUAL_PRINCIPAL', 'EQUAL_INSTALLMENTS', 'INVALID']
        },
        annualNominalInterestRate: {
            type: 'number'
        },
        buyDownFeeCalculationType: {
            type: 'string',
            enum: ['FLAT']
        },
        buyDownFeeIncomeType: {
            type: 'string',
            enum: ['FEE', 'INTEREST']
        },
        buyDownFeeStrategy: {
            type: 'string',
            enum: ['EQUAL_AMORTIZATION']
        },
        capitalizedIncomeCalculationType: {
            type: 'string',
            enum: ['FLAT']
        },
        capitalizedIncomeStrategy: {
            type: 'string',
            enum: ['EQUAL_AMORTIZATION']
        },
        capitalizedIncomeType: {
            type: 'string',
            enum: ['FEE', 'INTEREST']
        },
        chargeOffBehaviour: {
            type: 'string',
            enum: ['REGULAR', 'ZERO_INTEREST', 'ACCELERATE_MATURITY']
        },
        currency: {
            '$ref': '#/components/schemas/MonetaryCurrency'
        },
        currencyData: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        daysInMonthType: {
            type: 'integer',
            format: 'int32'
        },
        daysInYearCustomStrategy: {
            type: 'string',
            enum: ['FULL_LEAP_YEAR', 'FEB_29_PERIOD_ONLY']
        },
        daysInYearType: {
            type: 'integer',
            format: 'int32'
        },
        disbursedAmountPercentageForDownPayment: {
            type: 'number'
        },
        enableAccrualActivityPosting: {
            type: 'boolean'
        },
        enableAutoRepaymentForDownPayment: {
            type: 'boolean'
        },
        enableBuyDownFee: {
            type: 'boolean'
        },
        enableDownPayment: {
            type: 'boolean'
        },
        enableIncomeCapitalization: {
            type: 'boolean'
        },
        equalAmortization: {
            type: 'boolean'
        },
        fixedLength: {
            type: 'integer',
            format: 'int32'
        },
        graceOnArrearsAgeing: {
            type: 'integer',
            format: 'int32'
        },
        graceOnInterestCharged: {
            type: 'integer',
            format: 'int32'
        },
        graceOnInterestPayment: {
            type: 'integer',
            format: 'int32'
        },
        graceOnPrincipalPayment: {
            type: 'integer',
            format: 'int32'
        },
        inArrearsTolerance: {
            '$ref': '#/components/schemas/Money'
        },
        installmentAmountInMultiplesOf: {
            type: 'integer',
            format: 'int32'
        },
        interestCalculationPeriodMethod: {
            type: 'string',
            enum: ['DAILY', 'SAME_AS_REPAYMENT_PERIOD', 'INVALID']
        },
        interestMethod: {
            type: 'string',
            enum: ['DECLINING_BALANCE', 'FLAT', 'INVALID']
        },
        interestPeriodFrequencyType: {
            type: 'string',
            enum: ['DAYS', 'WEEKS', 'MONTHS', 'YEARS', 'WHOLE_TERM', 'INVALID']
        },
        interestRecalculationEnabled: {
            type: 'boolean'
        },
        interestRecognitionOnDisbursementDate: {
            type: 'boolean'
        },
        loanScheduleProcessingType: {
            type: 'string',
            enum: ['HORIZONTAL', 'VERTICAL']
        },
        loanScheduleType: {
            type: 'string',
            enum: ['CUMULATIVE', 'PROGRESSIVE']
        },
        merchantBuyDownFee: {
            type: 'boolean'
        },
        nominalInterestRatePerPeriod: {
            type: 'number'
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32'
        },
        principal: {
            '$ref': '#/components/schemas/Money'
        },
        recurringMoratoriumOnPrincipalPeriods: {
            type: 'integer',
            format: 'int32'
        },
        repayEvery: {
            type: 'integer',
            format: 'int32'
        },
        repaymentPeriodFrequencyType: {
            type: 'string',
            enum: ['DAYS', 'WEEKS', 'MONTHS', 'YEARS', 'WHOLE_TERM', 'INVALID']
        },
        supportedInterestRefundTypes: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['MERCHANT_ISSUED_REFUND', 'PAYOUT_REFUND']
            }
        }
    }
} as const;

export const $LoanProductTrancheDetails = {
    type: 'object',
    properties: {
        maxTrancheCount: {
            type: 'integer',
            format: 'int32'
        },
        multiDisburseLoan: {
            type: 'boolean'
        },
        outstandingLoanBalance: {
            type: 'number'
        }
    }
} as const;

export const $LoanProductVariableInstallmentConfig = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        loanProduct: {
            '$ref': '#/components/schemas/LoanProduct'
        },
        maximumGap: {
            type: 'integer',
            format: 'int32'
        },
        minimumGap: {
            type: 'integer',
            format: 'int32'
        },
        new: {
            type: 'boolean'
        }
    }
} as const;

export const $LoanRepaymentScheduleInstallmentData = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        installmentId: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $LoanStatusEnumData = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean'
        },
        closed: {
            type: 'boolean'
        },
        closedObligationsMet: {
            type: 'boolean'
        },
        closedRescheduled: {
            type: 'boolean'
        },
        closedWrittenOff: {
            type: 'boolean'
        },
        code: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        overpaid: {
            type: 'boolean'
        },
        pendingApproval: {
            type: 'boolean'
        },
        value: {
            type: 'string'
        },
        waitingForDisbursal: {
            type: 'boolean'
        }
    }
} as const;

export const $LoanTermTypeOptions = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'loanTermType.dueDate'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        value: {
            type: 'string',
            example: 'dueDate'
        }
    }
} as const;

export const $LoanTermVariationsData = {
    type: 'object',
    properties: {
        dateValue: {
            type: 'string',
            format: 'date'
        },
        decimalValue: {
            type: 'number',
            example: 100
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        isProcessed: {
            type: 'boolean',
            example: true
        },
        isSpecificToInstallment: {
            type: 'boolean',
            example: true
        },
        termType: {
            '$ref': '#/components/schemas/LoanTermTypeOptions'
        },
        termVariationApplicableFrom: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $LoanTotalAmountData = {
    type: 'object',
    properties: {
        totalCostOfLoan: {
            type: 'number'
        },
        totalExpectedCostOfLoan: {
            type: 'number'
        },
        totalExpectedRepayment: {
            type: 'number'
        },
        totalOutstanding: {
            type: 'number'
        },
        totalRepayment: {
            type: 'number'
        },
        totalWaived: {
            type: 'number'
        },
        totalWrittenOff: {
            type: 'number'
        }
    }
} as const;

export const $LoanTransactionData = {
    type: 'object',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64'
        },
        accountNumber: {
            type: 'string'
        },
        amount: {
            type: 'number'
        },
        availableDisbursementAmountWithOverApplied: {
            type: 'number'
        },
        bankNumber: {
            type: 'integer',
            format: 'int32'
        },
        chargeOffReasonOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        },
        checkNumber: {
            type: 'integer',
            format: 'int32'
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        dateFormat: {
            type: 'string'
        },
        externalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        externalLoanId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        feeChargesPortion: {
            type: 'number'
        },
        fixedEmiAmount: {
            type: 'number'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        interestPortion: {
            type: 'number'
        },
        loanChargePaidByList: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanChargePaidByData'
            }
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        loanRepaymentScheduleInstallments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanRepaymentScheduleInstallmentData'
            }
        },
        loanTransactionRelations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanTransactionRelationData'
            },
            writeOnly: true
        },
        locale: {
            type: 'string'
        },
        manuallyReversed: {
            type: 'boolean'
        },
        netDisbursalAmount: {
            type: 'number'
        },
        notDisbursement: {
            type: 'boolean'
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        officeName: {
            type: 'string'
        },
        outstandingLoanBalance: {
            type: 'number'
        },
        overpaymentPortion: {
            type: 'number'
        },
        paymentDetailData: {
            '$ref': '#/components/schemas/PaymentDetailData'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int64'
        },
        paymentTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaymentTypeData'
            }
        },
        penaltyChargesPortion: {
            type: 'number'
        },
        possibleNextRepaymentDate: {
            type: 'string',
            format: 'date'
        },
        principalPortion: {
            type: 'number'
        },
        receiptNumber: {
            type: 'integer',
            format: 'int32'
        },
        reversalExternalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        reversedOnDate: {
            type: 'string',
            format: 'date'
        },
        routingCode: {
            type: 'integer',
            format: 'int32'
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        transactionAmount: {
            type: 'number'
        },
        transactionDate: {
            type: 'string',
            format: 'date'
        },
        transactionRelations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanTransactionRelationData'
            }
        },
        transactionType: {
            type: 'string'
        },
        transfer: {
            '$ref': '#/components/schemas/AccountTransferData'
        },
        type: {
            '$ref': '#/components/schemas/LoanTransactionEnumData'
        },
        unrecognizedIncomePortion: {
            type: 'number'
        },
        writeOffReasonOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodeValueData'
            }
        }
    }
} as const;

export const $LoanTransactionEnumData = {
    type: 'object',
    properties: {
        accrual: {
            type: 'boolean'
        },
        accrualActivity: {
            type: 'boolean'
        },
        accrualAdjustment: {
            type: 'boolean'
        },
        approveTransfer: {
            type: 'boolean'
        },
        buyDownFee: {
            type: 'boolean'
        },
        buyDownFeeAdjustment: {
            type: 'boolean'
        },
        buyDownFeeAmortization: {
            type: 'boolean'
        },
        buyDownFeeAmortizationAdjustment: {
            type: 'boolean'
        },
        capitalizedIncome: {
            type: 'boolean'
        },
        capitalizedIncomeAdjustment: {
            type: 'boolean'
        },
        capitalizedIncomeAmortization: {
            type: 'boolean'
        },
        capitalizedIncomeAmortizationAdjustment: {
            type: 'boolean'
        },
        chargeAdjustment: {
            type: 'boolean'
        },
        chargePayment: {
            type: 'boolean'
        },
        chargeRefund: {
            type: 'boolean'
        },
        chargeback: {
            type: 'boolean'
        },
        chargeoff: {
            type: 'boolean'
        },
        code: {
            type: 'string'
        },
        contra: {
            type: 'boolean'
        },
        contractTermination: {
            type: 'boolean'
        },
        creditBalanceRefund: {
            type: 'boolean'
        },
        disbursement: {
            type: 'boolean'
        },
        downPayment: {
            type: 'boolean'
        },
        goodwillCredit: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        initiateTransfer: {
            type: 'boolean'
        },
        interestPaymentWaiver: {
            type: 'boolean'
        },
        interestRefund: {
            type: 'boolean'
        },
        merchantIssuedRefund: {
            type: 'boolean'
        },
        payoutRefund: {
            type: 'boolean'
        },
        reAge: {
            type: 'boolean'
        },
        reAmortize: {
            type: 'boolean'
        },
        recoveryRepayment: {
            type: 'boolean'
        },
        refund: {
            type: 'boolean'
        },
        refundForActiveLoans: {
            type: 'boolean'
        },
        rejectTransfer: {
            type: 'boolean'
        },
        repayment: {
            type: 'boolean'
        },
        repaymentAtDisbursement: {
            type: 'boolean'
        },
        repaymentType: {
            type: 'boolean'
        },
        value: {
            type: 'string'
        },
        waiveCharges: {
            type: 'boolean'
        },
        waiveInterest: {
            type: 'boolean'
        },
        withdrawTransfer: {
            type: 'boolean'
        },
        writeOff: {
            type: 'boolean'
        }
    }
} as const;

export const $LoanTransactionRelationData = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        fromLoanTransaction: {
            type: 'integer',
            format: 'int64'
        },
        paymentType: {
            type: 'string'
        },
        relationType: {
            type: 'string',
            enum: ['INVALID', 'CHARGEBACK', 'CHARGE_ADJUSTMENT', 'REPLAYED', 'RELATED', 'ADJUSTMENT']
        },
        toLoanCharge: {
            type: 'integer',
            format: 'int64'
        },
        toLoanTransaction: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $LoansLoanIdCollateralsRequest = {
    type: 'object',
    properties: {
        collateralTypeId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $LoansLoandIdCollateralsCollateralIdRequest = {
    type: 'object',
    properties: {
        description: {
            type: 'string'
        }
    }
} as const;

export const $LocalTime = {
    type: 'object',
    properties: {
        hour: {
            type: 'integer',
            format: 'int32'
        },
        minute: {
            type: 'integer',
            format: 'int32'
        },
        nano: {
            type: 'integer',
            format: 'int32'
        },
        second: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $LookupTableData = {
    type: 'object',
    properties: {
        description: {
            type: 'string'
        },
        entries: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LookupTableEntry'
            }
        },
        key: {
            type: 'string'
        }
    }
} as const;

export const $LookupTableEntry = {
    type: 'object',
    properties: {
        score: {
            type: 'number',
            format: 'double'
        },
        valueFrom: {
            type: 'integer',
            format: 'int32'
        },
        valueTo: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $MediaType = {
    type: 'object',
    properties: {
        parameters: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        subtype: {
            type: 'string'
        },
        type: {
            type: 'string'
        },
        wildcardSubtype: {
            type: 'boolean'
        },
        wildcardType: {
            type: 'boolean'
        }
    }
} as const;

export const $MessageBodyWorkers = {
    type: 'object'
} as const;

export const $MixTaxonomyData = {
    type: 'object',
    properties: {
        description: {
            type: 'string'
        },
        dimension: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        namespace: {
            type: 'string'
        },
        type: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $MixTaxonomyMappingData = {
    type: 'object',
    properties: {
        config: {
            type: 'string'
        },
        identifier: {
            type: 'string'
        }
    }
} as const;

export const $MixTaxonomyRequest = {
    type: 'object',
    properties: {
        config: {
            type: 'string'
        },
        identifier: {
            type: 'string'
        }
    }
} as const;

export const $MonetaryCurrency = {
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        currencyData: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        digitsAfterDecimal: {
            type: 'integer',
            format: 'int32'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Money = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        amountDefaultedToNullIfZero: {
            type: 'number'
        },
        currency: {
            '$ref': '#/components/schemas/MonetaryCurrency'
        },
        currencyCode: {
            type: 'string'
        },
        currencyData: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        greaterThanZero: {
            type: 'boolean'
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32'
        },
        lessThanZero: {
            type: 'boolean'
        },
        mc: {
            type: 'object',
            properties: {
                precision: {
                    type: 'integer',
                    format: 'int32'
                },
                roundingMode: {
                    type: 'string',
                    enum: ['UP', 'DOWN', 'CEILING', 'FLOOR', 'HALF_UP', 'HALF_DOWN', 'HALF_EVEN', 'UNNECESSARY']
                }
            }
        },
        zero: {
            type: 'boolean'
        }
    }
} as const;

export const $MoneyData = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        currency: {
            type: 'string'
        }
    },
    required: ['amount', 'currency']
} as const;

export const $MultiPart = {
    type: 'object',
    properties: {
        bodyParts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BodyPart'
            }
        },
        contentDisposition: {
            '$ref': '#/components/schemas/ContentDisposition'
        },
        entity: {
            type: 'object'
        },
        headers: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            properties: {
                empty: {
                    type: 'boolean'
                }
            }
        },
        mediaType: {
            '$ref': '#/components/schemas/MediaType'
        },
        messageBodyWorkers: {
            '$ref': '#/components/schemas/MessageBodyWorkers'
        },
        parameterizedHeaders: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/ParameterizedHeader'
                }
            },
            properties: {
                empty: {
                    type: 'boolean'
                }
            }
        },
        parent: {
            '$ref': '#/components/schemas/MultiPart'
        },
        providers: {
            '$ref': '#/components/schemas/Providers'
        }
    }
} as const;

export const $MultivaluedMapStringParameterizedHeader = {
    type: 'object',
    additionalProperties: {
        type: 'array',
        items: {
            '$ref': '#/components/schemas/ParameterizedHeader'
        }
    },
    properties: {
        empty: {
            type: 'boolean'
        }
    }
} as const;

export const $MultivaluedMapStringString = {
    type: 'object',
    additionalProperties: {
        type: 'array',
        items: {
            type: 'string'
        }
    },
    properties: {
        empty: {
            type: 'boolean'
        }
    }
} as const;

export const $NoteData = {
    type: 'object',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        createdById: {
            type: 'integer',
            format: 'int64'
        },
        createdByUsername: {
            type: 'string'
        },
        createdOn: {
            type: 'string',
            format: 'date-time'
        },
        depositAccountId: {
            type: 'integer',
            format: 'int64'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        loanTransactionId: {
            type: 'integer',
            format: 'int64'
        },
        note: {
            type: 'string'
        },
        noteType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        savingAccountId: {
            type: 'integer',
            format: 'int64'
        },
        updatedById: {
            type: 'integer',
            format: 'int64'
        },
        updatedByUsername: {
            type: 'string'
        },
        updatedOn: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $NoteRequest = {
    type: 'object',
    properties: {
        note: {
            type: 'string'
        }
    }
} as const;

export const $Office = {
    type: 'object',
    properties: {
        children: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Office'
            }
        },
        externalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        hierarchy: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        openingDate: {
            type: 'string',
            format: 'date'
        },
        openingLocalDate: {
            type: 'string',
            format: 'date'
        },
        parent: {
            '$ref': '#/components/schemas/Office'
        }
    }
} as const;

export const $OfficeData = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string'
        },
        externalId: {
            '$ref': '#/components/schemas/ExternalId'
        },
        hierarchy: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        locale: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        nameDecorated: {
            type: 'string'
        },
        openingDate: {
            type: 'string',
            format: 'date'
        },
        parentId: {
            type: 'integer',
            format: 'int64'
        },
        parentName: {
            type: 'string'
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $OldestCOBProcessedLoanDTO = {
    type: 'object',
    properties: {
        cobBusinessDate: {
            type: 'string',
            format: 'date'
        },
        cobProcessedDate: {
            type: 'string',
            format: 'date'
        },
        loanIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        }
    }
} as const;

export const $PageAccountData = {
    type: 'object',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountData'
            }
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PageAccountTransferData = {
    type: 'object',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountTransferData'
            }
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PageCashierTransactionData = {
    type: 'object',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CashierTransactionData'
            }
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PageClientSearchData = {
    type: 'object',
    properties: {
        content: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ClientSearchData'
            }
        },
        empty: {
            type: 'boolean'
        },
        first: {
            type: 'boolean'
        },
        last: {
            type: 'boolean'
        },
        number: {
            type: 'integer',
            format: 'int32'
        },
        numberOfElements: {
            type: 'integer',
            format: 'int32'
        },
        pageable: {
            '$ref': '#/components/schemas/Pageable'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        sort: {
            '$ref': '#/components/schemas/Sort'
        },
        totalElements: {
            type: 'integer',
            format: 'int64'
        },
        totalPages: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PageExternalTransferData = {
    type: 'object',
    properties: {
        content: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExternalTransferData'
            }
        },
        empty: {
            type: 'boolean'
        },
        first: {
            type: 'boolean'
        },
        last: {
            type: 'boolean'
        },
        number: {
            type: 'integer',
            format: 'int32'
        },
        numberOfElements: {
            type: 'integer',
            format: 'int32'
        },
        pageable: {
            '$ref': '#/components/schemas/Pageable'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        sort: {
            '$ref': '#/components/schemas/Sort'
        },
        totalElements: {
            type: 'integer',
            format: 'int64'
        },
        totalPages: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PageExternalTransferLoanProductAttributesData = {
    type: 'object',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExternalTransferLoanProductAttributesData'
            }
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PageJournalEntryData = {
    type: 'object',
    properties: {
        content: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/JournalEntryData'
            }
        },
        empty: {
            type: 'boolean'
        },
        first: {
            type: 'boolean'
        },
        last: {
            type: 'boolean'
        },
        number: {
            type: 'integer',
            format: 'int32'
        },
        numberOfElements: {
            type: 'integer',
            format: 'int32'
        },
        pageable: {
            '$ref': '#/components/schemas/Pageable'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        sort: {
            '$ref': '#/components/schemas/Sort'
        },
        totalElements: {
            type: 'integer',
            format: 'int64'
        },
        totalPages: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PageLoanProductProvisioningEntryData = {
    type: 'object',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductProvisioningEntryData'
            }
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PageLoanTransactionData = {
    type: 'object',
    properties: {
        content: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanTransactionData'
            }
        },
        empty: {
            type: 'boolean'
        },
        first: {
            type: 'boolean'
        },
        last: {
            type: 'boolean'
        },
        number: {
            type: 'integer',
            format: 'int32'
        },
        numberOfElements: {
            type: 'integer',
            format: 'int32'
        },
        pageable: {
            '$ref': '#/components/schemas/Pageable'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        sort: {
            '$ref': '#/components/schemas/Sort'
        },
        totalElements: {
            type: 'integer',
            format: 'int64'
        },
        totalPages: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PageProvisioningEntryData = {
    type: 'object',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProvisioningEntryData'
            }
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PageSmsCampaignData = {
    type: 'object',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SmsCampaignData'
            }
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PageSmsData = {
    type: 'object',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SmsData'
            }
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PageStandingInstructionData = {
    type: 'object',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StandingInstructionData'
            }
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PageStandingInstructionHistoryData = {
    type: 'object',
    properties: {
        pageItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StandingInstructionHistoryData'
            }
        },
        totalFilteredRecords: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Pageable = {
    type: 'object',
    properties: {
        offset: {
            type: 'integer',
            format: 'int64'
        },
        pageNumber: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        },
        paged: {
            type: 'boolean'
        },
        sort: {
            '$ref': '#/components/schemas/Sort'
        },
        unpaged: {
            type: 'boolean'
        }
    }
} as const;

export const $PagedLocalRequestAdvancedQueryData = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string'
        },
        dateTimeFormat: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        localeObject: {
            type: 'object',
            properties: {
                country: {
                    type: 'string'
                },
                displayCountry: {
                    type: 'string'
                },
                displayLanguage: {
                    type: 'string'
                },
                displayName: {
                    type: 'string'
                },
                displayScript: {
                    type: 'string'
                },
                displayVariant: {
                    type: 'string'
                },
                extensionKeys: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    uniqueItems: true
                },
                iso3Country: {
                    type: 'string'
                },
                iso3Language: {
                    type: 'string'
                },
                language: {
                    type: 'string'
                },
                script: {
                    type: 'string'
                },
                unicodeLocaleAttributes: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    uniqueItems: true
                },
                unicodeLocaleKeys: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    uniqueItems: true
                },
                variant: {
                    type: 'string'
                }
            }
        },
        page: {
            type: 'integer',
            format: 'int32'
        },
        request: {
            '$ref': '#/components/schemas/AdvancedQueryData'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        sorts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SortOrder'
            }
        }
    }
} as const;

export const $PagedLocalRequestAdvancedQueryRequest = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string'
        },
        dateTimeFormat: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        localeObject: {
            type: 'object',
            properties: {
                country: {
                    type: 'string'
                },
                displayCountry: {
                    type: 'string'
                },
                displayLanguage: {
                    type: 'string'
                },
                displayName: {
                    type: 'string'
                },
                displayScript: {
                    type: 'string'
                },
                displayVariant: {
                    type: 'string'
                },
                extensionKeys: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    uniqueItems: true
                },
                iso3Country: {
                    type: 'string'
                },
                iso3Language: {
                    type: 'string'
                },
                language: {
                    type: 'string'
                },
                script: {
                    type: 'string'
                },
                unicodeLocaleAttributes: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    uniqueItems: true
                },
                unicodeLocaleKeys: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    uniqueItems: true
                },
                variant: {
                    type: 'string'
                }
            }
        },
        page: {
            type: 'integer',
            format: 'int32'
        },
        request: {
            '$ref': '#/components/schemas/AdvancedQueryRequest'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        sorts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SortOrder'
            }
        }
    }
} as const;

export const $PagedRequestClientTextSearch = {
    type: 'object',
    properties: {
        page: {
            type: 'integer',
            format: 'int32'
        },
        request: {
            '$ref': '#/components/schemas/ClientTextSearch'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        sorts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SortOrder'
            }
        }
    }
} as const;

export const $PagedRequestExternalAssetOwnerSearchRequest = {
    type: 'object',
    properties: {
        page: {
            type: 'integer',
            format: 'int32'
        },
        request: {
            '$ref': '#/components/schemas/ExternalAssetOwnerSearchRequest'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        sorts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SortOrder'
            }
        }
    }
} as const;

export const $ParameterizedHeader = {
    type: 'object',
    properties: {
        parameters: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $PaymentAllocationOrder = {
    type: 'object',
    properties: {
        order: {
            type: 'integer',
            format: 'int32'
        },
        paymentAllocationRule: {
            type: 'string'
        }
    }
} as const;

export const $PaymentDetailData = {
    type: 'object',
    properties: {
        accountNumber: {
            type: 'string'
        },
        bankNumber: {
            type: 'string'
        },
        checkNumber: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        paymentType: {
            '$ref': '#/components/schemas/PaymentTypeData'
        },
        receiptNumber: {
            type: 'string'
        },
        routingCode: {
            type: 'string'
        }
    }
} as const;

export const $PaymentType = {
    type: 'object',
    properties: {
        codeName: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        isCashPayment: {
            type: 'boolean'
        },
        isSystemDefined: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        position: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $PaymentTypeData = {
    type: 'object',
    properties: {
        codeName: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        isCashPayment: {
            type: 'boolean'
        },
        isSystemDefined: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        position: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PaymentTypeRequest = {
    type: 'object',
    properties: {
        codeName: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        isCashPayment: {
            type: 'boolean'
        },
        isSystemDefined: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        position: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PaymentTypeToGLAccountMapper = {
    type: 'object',
    properties: {
        fundSourceAccount: {
            '$ref': '#/components/schemas/GLAccountData'
        },
        paymentType: {
            '$ref': '#/components/schemas/PaymentTypeData'
        }
    }
} as const;

export const $Permission = {
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        grouping: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        new: {
            type: 'boolean'
        }
    }
} as const;

export const $PortfolioAccountData = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'string'
        },
        amtForTransfer: {
            type: 'number'
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        clientName: {
            type: 'string'
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        currencyCodeFromCurrency: {
            type: 'string'
        },
        externalId: {
            type: 'string'
        },
        fieldOfficerId: {
            type: 'integer',
            format: 'int64'
        },
        fieldOfficerName: {
            type: 'string'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        groupName: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        productName: {
            type: 'string'
        }
    }
} as const;

export const $PostAccountNumberFormatsRequest = {
    type: 'object',
    description: 'PostAccountNumberFormatsRequest',
    properties: {
        accountType: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        prefixType: {
            type: 'integer',
            format: 'int64',
            example: 101
        }
    }
} as const;

export const $PostAccountNumberFormatsResponse = {
    type: 'object',
    description: 'PostAccountNumberFormatsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $PostAccountTransfersRefundByTransferResponse = {
    type: 'object',
    description: 'PostAccountTransfersRefundByTransferResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostAccountTransfersResponse = {
    type: 'object',
    description: 'PostAccountTransfersResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostAccountingRulesResponse = {
    type: 'object',
    description: 'PostAccountingRulesResponse',
    properties: {
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostAccountsRequestedShares = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 35
        }
    }
} as const;

export const $PostAccountsTypeAccountIdRequest = {
    type: 'object',
    description: 'PostAccountsTypeAccountIdRequest',
    properties: {
        requestedShares: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostAccountsRequestedShares'
            },
            uniqueItems: true
        }
    }
} as const;

export const $PostAccountsTypeAccountIdResponse = {
    type: 'object',
    description: 'PostAccountsTypeAccountIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 5
        }
    }
} as const;

export const $PostAccountsTypeResponse = {
    type: 'object',
    description: 'PostAccountsTypeResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostAddAndDeleteDisbursementDetailRequest = {
    type: 'object',
    description: 'PostAddAndDeleteDisbursementDetailRequest',
    properties: {
        approvedLoanAmount: {
            type: 'number',
            format: 'double',
            example: 1000
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        disbursementData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DisbursementDetail'
            }
        },
        locale: {
            type: 'string',
            example: 'de_DE'
        }
    }
} as const;

export const $PostAdhocQuerySearchRequest = {
    type: 'object',
    description: 'PostAdhocQuerySearchRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        includeOutStandingAmountPercentage: {
            type: 'boolean',
            example: true
        },
        includeOutstandingAmount: {
            type: 'boolean',
            example: true
        },
        loanDateOption: {
            type: 'string',
            example: 'approvalDate'
        },
        loanFromDate: {
            type: 'string',
            format: 'date',
            example: '2013-01-01'
        },
        loanToDate: {
            type: 'string',
            format: 'date',
            example: '2014-01-27'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        maxOutstandingAmount: {
            type: 'integer',
            format: 'int64',
            example: 10000
        },
        minOutstandingAmount: {
            type: 'integer',
            format: 'int64',
            example: 100
        },
        outStandingAmountPercentage: {
            type: 'integer',
            format: 'int64',
            example: 80
        },
        outStandingAmountPercentageCondition: {
            type: 'string',
            example: '<='
        },
        outstandingAmountCondition: {
            type: 'string',
            example: 'between'
        }
    }
} as const;

export const $PostAuthenticationRequest = {
    type: 'object',
    description: 'PostAuthenticationRequest',
    properties: {
        password: {
            type: 'string',
            example: 'password'
        },
        username: {
            type: 'string',
            example: 'mifos'
        }
    },
    required: ['password', 'username']
} as const;

export const $PostAuthenticationResponse = {
    type: 'object',
    description: 'PostAuthenticationResponse',
    properties: {
        authenticated: {
            type: 'boolean',
            example: true
        },
        base64EncodedAuthenticationKey: {
            type: 'string',
            example: 'bWlmb3M6cGFzc3dvcmQ='
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        organisationalRole: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        permissions: {
            type: 'array',
            example: 'ALL_FUNCTIONS',
            items: {
                type: 'string',
                example: 'ALL_FUNCTIONS'
            }
        },
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleData'
            }
        },
        staffDisplayName: {
            type: 'string',
            example: 'Director, Program'
        },
        staffId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        userId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        username: {
            type: 'string',
            example: 'mifos'
        }
    }
} as const;

export const $PostCentersCenterIdRequest = {
    type: 'object',
    description: 'PostCentersCenterIdRequest',
    properties: {
        closureDate: {
            type: 'string',
            example: '05 May 2014'
        },
        closureReasonId: {
            type: 'integer',
            format: 'int64',
            example: 32
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PostCentersCenterIdResponse = {
    type: 'object',
    description: 'PostCentersCenterIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostCentersRequest = {
    type: 'object',
    description: 'PostCentersRequest',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        name: {
            type: 'string',
            example: 'First Center (No groups)'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostCentersResponse = {
    type: 'object',
    description: 'PostCentersResponse',
    properties: {
        groupId: {
            type: 'integer',
            format: 'int64',
            example: 8
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 8
        }
    }
} as const;

export const $PostChargeOffReasonToExpenseAccountMappings = {
    type: 'object',
    properties: {
        chargeOffReasonCodeValueId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        expenseAccountId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostChargesResponse = {
    type: 'object',
    description: 'PostChargesResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostClientClientIdAddressesResponse = {
    type: 'object',
    description: 'PostClientClientIdAddressesResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 15
        }
    }
} as const;

export const $PostClientCollateralResponse = {
    type: 'object',
    description: 'PostClientCollateralResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 14
        }
    }
} as const;

export const $PostClientsClientIdChargesChargeIdRequest = {
    type: 'object',
    description: 'PostClientsClientIdChargesChargeIdRequest',
    properties: {
        amount: {
            type: 'integer',
            format: 'int32',
            example: 200
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        externalId: {
            type: 'string',
            example: '3e7791ce-aa10-11ec-b909-0242ac120002'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        transactionDate: {
            type: 'string',
            example: '01 September 2015'
        }
    }
} as const;

export const $PostClientsClientIdChargesChargeIdResponse = {
    type: 'object',
    description: 'PostClientsClientIdChargesChargeIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 189
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 157
        },
        transactionId: {
            type: 'integer',
            format: 'int64',
            example: 221
        }
    }
} as const;

export const $PostClientsClientIdChargesRequest = {
    type: 'object',
    description: 'PostClientsClientIdChargesRequest',
    properties: {
        amount: {
            type: 'integer',
            format: 'int32',
            example: 100
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 226
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        dueDate: {
            type: 'string',
            example: '01 September 2015'
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PostClientsClientIdChargesResponse = {
    type: 'object',
    description: 'PostClientsClientIdChargesResponse',
    properties: {
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 189
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 164
        }
    }
} as const;

export const $PostClientsClientIdIdentifiersRequest = {
    type: 'object',
    description: 'PostClientsClientIdIdentifiersRequest',
    properties: {
        description: {
            type: 'string',
            example: 'Document has been verified'
        },
        documentKey: {
            type: 'string',
            example: 'KA-54677'
        },
        documentTypeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        status: {
            type: 'string',
            example: 'Active'
        }
    }
} as const;

export const $PostClientsClientIdIdentifiersResponse = {
    type: 'object',
    description: 'PostClientsClientIdIdentifiersResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $PostClientsClientIdRequest = {
    type: 'object',
    description: 'PostClientsClientIdRequest',
    properties: {
        activationDate: {
            type: 'string',
            example: '03 August 2021'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PostClientsClientIdResponse = {
    type: 'object',
    description: 'PostClientsClientIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        resourceExternalId: {
            type: 'string',
            example: '123-456'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $PostClientsClientIdTransactionsTransactionIdResponse = {
    type: 'object',
    description: 'PostClientsClientIdTransactionsTransactionIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 189
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 222
        }
    }
} as const;

export const $PostClientsDatatable = {
    type: 'object',
    description: 'List of PostClientsDatatable',
    properties: {
        data: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                example: 'data'
            },
            example: 'data'
        },
        registeredTableName: {
            type: 'string',
            example: 'Client Beneficiary information'
        }
    }
} as const;

export const $PostClientsRequest = {
    type: 'object',
    description: 'PostClientsRequest',
    properties: {
        activationDate: {
            type: 'string',
            example: '04 March 2009'
        },
        active: {
            type: 'boolean',
            example: true
        },
        address: {
            type: 'array',
            description: 'Address requests',
            items: {
                '$ref': '#/components/schemas/ClientAddressRequest'
            }
        },
        datatables: {
            type: 'array',
            description: 'List of PostClientsDatatable',
            items: {
                '$ref': '#/components/schemas/PostClientsDatatable'
            }
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        dateOfBirth: {
            type: 'string',
            format: 'date'
        },
        emailAddress: {
            type: 'string',
            example: 'test@test.com'
        },
        externalId: {
            type: 'string',
            example: '123'
        },
        firstname: {
            type: 'string',
            example: 'Client_FirstName'
        },
        fullname: {
            type: 'string',
            example: 'Client of group'
        },
        groupId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        lastname: {
            type: 'string',
            example: 'Client_LastName'
        },
        legalFormId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        middlename: {
            type: 'string',
            example: 'Client_MiddleName'
        },
        mobileNo: {
            type: 'string',
            example: '+353851239876'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostClientsResponse = {
    type: 'object',
    description: 'PostClientsResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        groupId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceExternalId: {
            type: 'string',
            example: '123-456'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $PostCodeValueDataResponse = {
    type: 'object',
    description: 'PostCodeValueDataResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        subResourceId: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $PostCodeValuesDataRequest = {
    type: 'object',
    description: 'PostCodeValuesDataRequest',
    properties: {
        description: {
            type: 'string',
            example: 'Passport information'
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Passport'
        },
        position: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $PostCodesRequest = {
    type: 'object',
    description: 'PostCodesRequest',
    properties: {
        name: {
            type: 'string',
            example: 'MyNewCode'
        }
    }
} as const;

export const $PostCodesResponse = {
    type: 'object',
    description: 'PostCodesResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $PostCollateralManagementProductResponse = {
    type: 'object',
    description: 'PostCollateralManagementProductResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 14
        }
    }
} as const;

export const $PostCollectionSheetChanges = {
    type: 'object',
    properties: {
        SavingsTransactions: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        loanTransactions: {
            type: 'array',
            example: [15],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PostCollectionSheetResponse = {
    type: 'object',
    description: 'PostCollectionSheetResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PostCollectionSheetChanges'
        },
        groupId: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 10
        }
    }
} as const;

export const $PostColumnHeaderData = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            description: 'Used in Code Value fields. Column name becomes: code_cd_name. Mandatory if using type Dropdown, otherwise an error is returned.',
            example: 'Gender'
        },
        indexed: {
            type: 'boolean',
            description: 'Defaults to false',
            example: true
        },
        length: {
            type: 'integer',
            format: 'int64',
            description: 'Length of the text field. Mandatory if type String is used, otherwise an error is returned.',
            example: 1653
        },
        mandatory: {
            type: 'boolean',
            description: 'Defaults to false',
            example: true
        },
        name: {
            type: 'string',
            example: 'DOB'
        },
        type: {
            type: 'string',
            description: 'Any of them: Boolean | Date | DateTime | Decimal | Dropdown | Number | String | Text',
            example: 'String'
        },
        unique: {
            type: 'boolean',
            description: 'Defaults to false',
            example: true
        }
    },
    required: ['name', 'type']
} as const;

export const $PostCreateRescheduleLoansRequest = {
    type: 'object',
    description: 'PostCreateRescheduleLoansRequest',
    properties: {
        adjustedDueDate: {
            type: 'string',
            example: '20 September 2011'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        extraTerms: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        graceOnInterest: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        graceOnPrincipal: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        newInterestRate: {
            type: 'number',
            example: 1.1
        },
        rescheduleFromDate: {
            type: 'string',
            example: '20 September 2011'
        },
        rescheduleReasonComment: {
            type: 'string',
            example: 'comment'
        },
        rescheduleReasonId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        submittedOnDate: {
            type: 'string',
            example: '20 September 2011'
        }
    }
} as const;

export const $PostCreateRescheduleLoansResponse = {
    type: 'object',
    description: 'PostCreateRescheduleLoansResponse ',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 12
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 18
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 12
        }
    }
} as const;

export const $PostDataTablesAppTableIdResponse = {
    type: 'object',
    description: 'PostDataTablesAppTableIdResponse ',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostDataTablesRegisterDatatableAppTable = {
    type: 'object',
    description: 'PostDataTablesRegisterDatatableAppTable'
} as const;

export const $PostDataTablesRequest = {
    type: 'object',
    description: 'PostDataTablesRequest',
    properties: {
        apptableName: {
            type: 'string',
            example: 'm_client'
        },
        columns: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostColumnHeaderData'
            }
        },
        datatableName: {
            type: 'string',
            example: 'extra_client_details'
        },
        entitySubType: {
            type: 'string',
            example: 'abc'
        },
        multiRow: {
            type: 'boolean',
            description: 'Allows to create multiple entries in the Data Table. Optional, defaults to false. If this property is not provided Data Table will allow only one entry.',
            example: true
        }
    },
    required: ['apptableName', 'columns', 'datatableName']
} as const;

export const $PostDataTablesResponse = {
    type: 'object',
    description: 'PostDataTablesResponse',
    properties: {
        resourceIdentifier: {
            type: 'string',
            example: 'extra_client_details'
        }
    }
} as const;

export const $PostDelinquencyBucketResponse = {
    type: 'object',
    description: 'PostDelinquencyBucketResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostDelinquencyRangeResponse = {
    type: 'object',
    description: 'PostDelinquencyRangeResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostEntityDatatableChecksTemplateRequest = {
    type: 'object',
    description: 'PostEntityDatatableChecksTemplateRequest',
    properties: {
        datatableName: {
            type: 'string',
            example: 'Additional Details'
        },
        entity: {
            type: 'string',
            example: 'm_loan'
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        status: {
            type: 'integer',
            format: 'int64',
            example: 100
        }
    }
} as const;

export const $PostEntityDatatableChecksTemplateResponse = {
    type: 'object',
    description: 'PostEntityDatatableChecksTemplateResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostEntityTypeEntityIdDocumentsResponse = {
    type: 'object',
    description: 'PostEntityTypeEntityIdDocumentsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        resourceIdentifier: {
            type: 'string',
            example: '3'
        }
    }
} as const;

export const $PostExternalAssetOwnerLoanProductAttributeRequest = {
    type: 'object',
    description: 'PostExternalAssetOwnerLoanProductAttributeRequest',
    properties: {
        attributeKey: {
            type: 'string',
            example: 'SETTLEMENT_MODEL'
        },
        attributeValue: {
            type: 'string',
            example: 'DELAYED_SETTLEMENT'
        }
    }
} as const;

export const $PostFinancialActivityAccountsRequest = {
    type: 'object',
    description: 'PostFinancialActivityAccountsRequest',
    properties: {
        financialActivityId: {
            type: 'integer',
            format: 'int64',
            example: 200
        },
        glAccountId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $PostFinancialActivityAccountsResponse = {
    type: 'object',
    description: 'PostFinancialActivityAccountsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostFixedDepositAccountsAccountIdRequest = {
    type: 'object',
    description: 'PostFixedDepositAccountsAccountIdRequest'
} as const;

export const $PostFixedDepositAccountsAccountIdResponse = {
    type: 'object',
    description: 'PostFixedDepositAccountsAccountIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostFixedDepositAccountsRequest = {
    type: 'object',
    description: 'PostFixedDepositAccountsRequest',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        depositAmount: {
            type: 'number',
            format: 'float',
            example: 5000
        },
        depositPeriod: {
            type: 'integer',
            format: 'int32',
            example: 6
        },
        depositPeriodFrequencyId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        submittedOnDate: {
            type: 'string',
            example: '01 March 2014'
        }
    }
} as const;

export const $PostFixedDepositAccountsResponse = {
    type: 'object',
    description: 'PostFixedDepositAccountsResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostFixedDepositProductsChartSlabs = {
    type: 'object',
    properties: {
        annualInterestRate: {
            type: 'number',
            format: 'double',
            example: 4.5
        },
        description: {
            type: 'string',
            example: 'from 0 to 90 days'
        },
        fromPeriod: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        periodType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        toPeriod: {
            type: 'integer',
            format: 'int32',
            example: 90
        }
    }
} as const;

export const $PostFixedDepositProductsCharts = {
    type: 'object',
    properties: {
        chartSlabs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostFixedDepositProductsChartSlabs'
            },
            uniqueItems: true
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        fromDate: {
            type: 'string',
            example: '01 Jan 2014'
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PostFixedDepositProductsRequest = {
    type: 'object',
    description: 'PostFixedDepositProductsRequest',
    properties: {
        accountingRule: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        charts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostFixedDepositProductsCharts'
            },
            uniqueItems: true
        },
        currencyCode: {
            type: 'string',
            example: 'USD'
        },
        description: {
            type: 'string',
            example: 'Daily compounding using Daily Balance, 5% per year, 365 days in year'
        },
        digitsAfterDecimal: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        interestCalculationDaysInYearType: {
            type: 'integer',
            format: 'int32',
            example: 365
        },
        interestCalculationType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestCompoundingPeriodType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestPostingPeriodType: {
            type: 'integer',
            format: 'int32',
            example: 4
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        maxDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 5
        },
        maxDepositTermTypeId: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        minDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        minDepositTermTypeId: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Fixed deposit product'
        },
        preClosurePenalApplicable: {
            type: 'boolean',
            example: true
        },
        preClosurePenalInterest: {
            type: 'number',
            format: 'double',
            example: 1.75
        },
        preClosurePenalInterestOnTypeId: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        shortName: {
            type: 'string',
            example: 'FD01'
        }
    }
} as const;

export const $PostFixedDepositProductsResponse = {
    type: 'object',
    description: 'PostFixedDepositProductsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostFloatingRatesRatePeriods = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        fromDate: {
            type: 'string',
            example: '19 November 2015'
        },
        interestRate: {
            type: 'number',
            format: 'double',
            example: 10
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PostFloatingRatesResponse = {
    type: 'object',
    description: 'PostFloatingRatesResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostFundsResponse = {
    type: 'object',
    description: 'PostFundsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostGLAccountsRequest = {
    type: 'object',
    description: 'PostGLAccountsRequest',
    properties: {
        description: {
            type: 'string',
            example: 'Desc'
        },
        glCode: {
            type: 'string',
            example: '100001'
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Cash at Bangalore'
        },
        parentId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        tagId: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        type: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        usage: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $PostGLAccountsResponse = {
    type: 'object',
    description: 'PostGLAccountsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 22
        }
    }
} as const;

export const $PostGlClosuresRequest = {
    type: 'object',
    description: 'PostGLCLosuresRequest',
    properties: {
        closingDate: {
            type: 'string',
            format: 'date'
        },
        comments: {
            type: 'string',
            example: 'The accountants are heading for a carribean vacation'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostGlClosuresResponse = {
    type: 'object',
    description: 'PostGlClosuresResponse',
    properties: {
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 9
        }
    }
} as const;

export const $PostGroupsGroupIdClients = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostGroupsGroupIdCommandUnassignStaffChanges = {
    type: 'object'
} as const;

export const $PostGroupsGroupIdCommandUnassignStaffRequest = {
    type: 'object',
    description: 'PostGroupsGroupIdCommandUnassignStaffRequest',
    properties: {
        staffId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostGroupsGroupIdCommandUnassignStaffResponse = {
    type: 'object',
    description: 'PostGroupsGroupIdCommandUnassignStaffResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PostGroupsGroupIdCommandUnassignStaffChanges'
        },
        groupId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostGroupsGroupIdRequest = {
    type: 'object',
    description: 'PostGroupsGroupIdRequest',
    properties: {
        clients: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostGroupsGroupIdClients'
            },
            uniqueItems: true
        },
        destinationGroupId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $PostGroupsGroupIdResponse = {
    type: 'object',
    description: 'PostGroupsGroupIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostGroupsRequest = {
    type: 'object',
    description: 'PostGroupsRequest',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        name: {
            type: 'string',
            example: 'Pending Group'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostGroupsResponse = {
    type: 'object',
    description: 'PostGroupsResponse',
    properties: {
        groupId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $PostHolidaysHolidayIdRequest = {
    type: 'object',
    description: 'PostHolidaysHolidayIdRequest'
} as const;

export const $PostHolidaysHolidayIdResponse = {
    type: 'object',
    description: 'PostHolidaysHolidayIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostHolidaysRequest = {
    type: 'object',
    description: 'PostHolidaysRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        description: {
            type: 'string',
            example: 'Good Friday'
        },
        fromDate: {
            type: 'string',
            format: 'date'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'Good Friday'
        },
        offices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostHolidaysRequestOffices'
            }
        },
        repaymentsRescheduledTo: {
            type: 'string',
            format: 'date'
        },
        toDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $PostHolidaysRequestOffices = {
    type: 'object',
    properties: {
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostHolidaysResponse = {
    type: 'object',
    description: 'PostHolidaysResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostHookRequest = {
    type: 'object',
    description: 'PostHookRequest',
    properties: {
        config: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Field'
            }
        },
        displayName: {
            type: 'string',
            example: 'Kremlin'
        },
        events: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Event'
            }
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Web'
        },
        templateId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostHookResponse = {
    type: 'object',
    description: 'PostHookResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $PostInitiateTransferResponse = {
    type: 'object',
    description: 'PostInitiateTransferResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/ExternalAssetOwnerTransferChangesData'
        },
        dateFormat: {
            type: 'string',
            example: 'yyyy-MM-dd'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        resourceExternalId: {
            type: 'string',
            description: 'transfer external ID',
            example: '36efeb06-d835-48a1-99eb-09bd1d348c1e'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            description: 'transfer ID',
            example: 1
        },
        subResourceExternalId: {
            type: 'string',
            description: 'loan external ID',
            example: '36efeb06-d835-48a1-99eb-09bd1d348c2e'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64',
            description: 'loan ID',
            example: 2
        }
    }
} as const;

export const $PostInterestRateChartsChartIdChartSlabsResponse = {
    type: 'object',
    description: 'PostInterestRateChartsChartIdChartSlabsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostInterestRateChartsRequest = {
    type: 'object',
    description: 'PostInterestRateChartsRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        description: {
            type: 'string',
            example: 'This chart is applicable for year 2014'
        },
        fromDate: {
            type: 'string',
            example: '01 Jan 2014'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'Chart - 2014'
        },
        type: {
            type: 'string',
            example: 'Document'
        }
    }
} as const;

export const $PostInterestRateChartsResponse = {
    type: 'object',
    description: 'PostInterestRateChartsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostJournalEntriesResponse = {
    type: 'object',
    description: 'PostJournalEntriesResponse',
    properties: {
        officeId: {
            type: 'integer',
            format: 'int64',
            description: '1'
        },
        transactionId: {
            type: 'string',
            description: 'RS9MCISID4WK1ZM'
        }
    }
} as const;

export const $PostJournalEntriesTransactionIdRequest = {
    type: 'object',
    description: 'PostJournalEntriesTransactionIdRequest',
    properties: {
        officeId: {
            type: 'integer',
            format: 'int64',
            description: '1'
        }
    }
} as const;

export const $PostJournalEntriesTransactionIdResponse = {
    type: 'object',
    description: 'PostJournalEntriesTransactionIdResponse',
    properties: {
        officeId: {
            type: 'integer',
            format: 'int64',
            description: '1'
        }
    }
} as const;

export const $PostLinkDelinkAccountsToFromPocketResponse = {
    type: 'object',
    description: 'PostLinkDelinkAccountsToFromPocketResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 6
        }
    }
} as const;

export const $PostLoanChanges = {
    type: 'object',
    properties: {
        removedEntityIds: {
            type: 'array',
            example: [21, 22],
            items: {
                type: 'integer',
                format: 'int64'
            }
        }
    }
} as const;

export const $PostLoanProductsRequest = {
    type: 'object',
    description: 'PostLoanProductsRequest',
    properties: {
        accountMovesOutOfNPAOnlyOnArrearsCompletion: {
            type: 'boolean',
            example: false
        },
        accountingRule: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        allowApprovedDisbursedAmountsOverApplied: {
            type: 'boolean',
            example: true
        },
        allowAttributeOverrides: {
            '$ref': '#/components/schemas/AllowAttributeOverrides'
        },
        allowCompoundingOnEod: {
            type: 'boolean',
            example: false
        },
        allowPartialPeriodInterestCalcualtion: {
            type: 'boolean',
            example: true
        },
        allowVariableInstallments: {
            type: 'boolean',
            example: false
        },
        amortizationType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        buyDownExpenseAccountId: {
            type: 'integer',
            format: 'int64',
            example: 27
        },
        buyDownFeeCalculationType: {
            type: 'string',
            enum: ['FLAT'],
            example: 'FLAT'
        },
        buyDownFeeIncomeType: {
            type: 'string',
            enum: ['FEE', 'INTEREST'],
            example: 'FEE'
        },
        buyDownFeeStrategy: {
            type: 'string',
            enum: ['EQUAL_AMORTIZATION'],
            example: 'EQUAL_AMORTIZATION'
        },
        canDefineInstallmentAmount: {
            type: 'boolean',
            example: true
        },
        canUseForTopup: {
            type: 'boolean',
            example: false
        },
        capitalizedIncomeCalculationType: {
            type: 'string',
            enum: ['FLAT'],
            example: 'FLAT'
        },
        capitalizedIncomeStrategy: {
            type: 'string',
            enum: ['EQUAL_AMORTIZATION'],
            example: 'EQUAL_AMORTIZATION'
        },
        capitalizedIncomeType: {
            type: 'string',
            enum: ['FEE', 'INTEREST'],
            example: 'FEE'
        },
        chargeOffBehaviour: {
            type: 'string',
            example: 'REGULAR'
        },
        chargeOffExpenseAccountId: {
            type: 'integer',
            format: 'int64',
            example: 12
        },
        chargeOffFraudExpenseAccountId: {
            type: 'integer',
            format: 'int64',
            example: 13
        },
        chargeOffReasonToExpenseAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostChargeOffReasonToExpenseAccountMappings'
            }
        },
        charges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductChargeData'
            }
        },
        closeDate: {
            type: 'string',
            example: '10 July 2022'
        },
        creditAllocation: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreditAllocationData'
            }
        },
        currencyCode: {
            type: 'string',
            example: 'USD'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        daysInMonthType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        daysInYearCustomStrategy: {
            type: 'string',
            example: 'FULL_LEAP_YEAR'
        },
        daysInYearType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        deferredIncomeLiabilityAccountId: {
            type: 'integer',
            format: 'int64',
            example: 25
        },
        delinquencyBucketId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        description: {
            type: 'string',
            example: 'non-interest bearing product'
        },
        digitsAfterDecimal: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        disallowExpectedDisbursements: {
            type: 'boolean',
            example: true
        },
        disallowInterestCalculationOnPastDue: {
            type: 'boolean',
            example: false
        },
        disbursedAmountPercentageForDownPayment: {
            type: 'number',
            example: 5.5
        },
        dueDaysForRepaymentEvent: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        enableAccrualActivityPosting: {
            type: 'boolean',
            example: false
        },
        enableAutoRepaymentForDownPayment: {
            type: 'boolean',
            example: false
        },
        enableBuyDownFee: {
            type: 'boolean',
            example: false
        },
        enableDownPayment: {
            type: 'boolean',
            example: false
        },
        enableIncomeCapitalization: {
            type: 'boolean',
            example: false
        },
        enableInstallmentLevelDelinquency: {
            type: 'boolean',
            example: false
        },
        externalId: {
            type: 'string',
            example: '2075e308-d4a8-44d9-8203-f5a947b8c2f4'
        },
        feeToIncomeAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductChargeToGLAccountMapper'
            }
        },
        fixedLength: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        fixedPrincipalPercentagePerInstallment: {
            type: 'number',
            example: 5.5
        },
        fundId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        fundSourceAccountId: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        goodwillCreditAccountId: {
            type: 'integer',
            format: 'int64',
            example: 48
        },
        graceOnArrearsAgeing: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        graceOnInterestPayment: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        graceOnPrincipalPayment: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        holdGuaranteeFunds: {
            type: 'boolean',
            example: false
        },
        inArrearsTolerance: {
            type: 'integer',
            format: 'int32',
            example: 90
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        includeInBorrowerCycle: {
            type: 'boolean',
            example: false
        },
        incomeFromBuyDownAccountId: {
            type: 'integer',
            format: 'int64',
            example: 38
        },
        incomeFromCapitalizationAccountId: {
            type: 'integer',
            format: 'int64',
            example: 37
        },
        incomeFromChargeOffFeesAccountId: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        incomeFromChargeOffInterestAccountId: {
            type: 'integer',
            format: 'int64',
            example: 20
        },
        incomeFromChargeOffPenaltyAccountId: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        incomeFromFeeAccountId: {
            type: 'integer',
            format: 'int64',
            example: 37
        },
        incomeFromGoodwillCreditFeesAccountId: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        incomeFromGoodwillCreditInterestAccountId: {
            type: 'integer',
            format: 'int64',
            example: 20
        },
        incomeFromGoodwillCreditPenaltyAccountId: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        incomeFromPenaltyAccountId: {
            type: 'integer',
            format: 'int64',
            example: 35
        },
        incomeFromRecoveryAccountId: {
            type: 'integer',
            format: 'int64',
            example: 15
        },
        installmentAmountInMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestCalculationPeriodType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestOnLoanAccountId: {
            type: 'integer',
            format: 'int64',
            example: 34
        },
        interestRateFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        interestRatePerPeriod: {
            type: 'number',
            format: 'double',
            example: 1.75
        },
        interestRateVariationsForBorrowerCycle: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        interestRecalculationCompoundingMethod: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestRecognitionOnDisbursementDate: {
            type: 'boolean',
            example: false
        },
        interestType: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        isArrearsBasedOnOriginalSchedule: {
            type: 'boolean',
            example: false
        },
        isCompoundingToBePostedAsTransaction: {
            type: 'boolean',
            example: false
        },
        isEqualAmortization: {
            type: 'boolean',
            example: false
        },
        isInterestRecalculationEnabled: {
            type: 'boolean',
            example: false
        },
        isLinkedToFloatingInterestRates: {
            type: 'boolean',
            example: false
        },
        loanPortfolioAccountId: {
            type: 'integer',
            format: 'int64',
            example: 8
        },
        loanScheduleProcessingType: {
            type: 'string',
            example: 'HORIZONTAL'
        },
        loanScheduleType: {
            type: 'string',
            example: 'CUMULATIVE'
        },
        locale: {
            type: 'string',
            example: 'en_GB'
        },
        maxInterestRatePerPeriod: {
            type: 'number',
            format: 'double',
            example: 23.4
        },
        maxNumberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        maxPrincipal: {
            type: 'number',
            format: 'double',
            example: 15000
        },
        maxTrancheCount: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        merchantBuyDownFee: {
            type: 'boolean',
            example: false
        },
        minInterestRatePerPeriod: {
            type: 'number',
            format: 'double',
            example: 0
        },
        minNumberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        minPrincipal: {
            type: 'number',
            format: 'double',
            example: 5000
        },
        minimumDaysBetweenDisbursalAndFirstRepayment: {
            type: 'integer',
            format: 'int32',
            example: 30
        },
        multiDisburseLoan: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'LP Accrual Accounting'
        },
        numberOfRepaymentVariationsForBorrowerCycle: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 12
        },
        outstandingLoanBalance: {
            type: 'number',
            format: 'double',
            example: 36000
        },
        overAppliedCalculationType: {
            type: 'string',
            example: 'percentage'
        },
        overAppliedNumber: {
            type: 'integer',
            format: 'int32',
            example: 50
        },
        overDueDaysForRepaymentEvent: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        overdueDaysForNPA: {
            type: 'integer',
            format: 'int32',
            example: 179
        },
        overpaymentLiabilityAccountId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        paymentAllocation: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AdvancedPaymentData'
            }
        },
        paymentChannelToFundSourceMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanPaymentChannelToFundSourceMappings'
            }
        },
        penaltyToIncomeAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductChargeToGLAccountMapper'
            }
        },
        preClosureInterestCalculationStrategy: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        principal: {
            type: 'number',
            format: 'double',
            example: 10000
        },
        principalThresholdForLastInstallment: {
            type: 'integer',
            format: 'int32',
            example: 50
        },
        principalVariationsForBorrowerCycle: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        rates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateData'
            }
        },
        recalculationCompoundingFrequencyInterval: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recalculationCompoundingFrequencyOnDayType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recalculationCompoundingFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recalculationRestFrequencyInterval: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recalculationRestFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 50
        },
        receivableFeeAccountId: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        receivableInterestAccountId: {
            type: 'integer',
            format: 'int64',
            example: 9
        },
        receivablePenaltyAccountId: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        repaymentEvery: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        repaymentFrequencyType: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        repaymentStartDateType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        rescheduleStrategyMethod: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        shortName: {
            type: 'string',
            example: 'LPAA'
        },
        startDate: {
            type: 'string',
            example: '10 July 2022'
        },
        supportedInterestRefundTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        transactionProcessingStrategyCode: {
            type: 'string',
            example: 'mifos-standard-strategy'
        },
        transfersInSuspenseAccountId: {
            type: 'integer',
            format: 'int64',
            example: 5
        },
        useBorrowerCycle: {
            type: 'boolean',
            example: false
        },
        writeOffAccountId: {
            type: 'integer',
            format: 'int64',
            example: 41
        }
    }
} as const;

export const $PostLoanProductsResponse = {
    type: 'object',
    description: 'PostLoanProductsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $PostLoansDataTable = {
    type: 'object',
    example: 'List of PostLoansDataTable',
    properties: {
        data: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                example: 'Datatable data'
            },
            example: 'Datatable data'
        },
        registeredTableName: {
            type: 'string',
            example: 'm_loan'
        }
    }
} as const;

export const $PostLoansDelinquencyActionRequest = {
    type: 'object',
    description: 'PostLoansDelinquencyActionRequest',
    properties: {
        action: {
            type: 'string',
            example: 'pause'
        },
        dateFormat: {
            type: 'string',
            example: 'yyyy-MM-dd'
        },
        endDate: {
            type: 'string',
            example: '2013-02-20'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        startDate: {
            type: 'string',
            example: '2013-01-02'
        }
    }
} as const;

export const $PostLoansDelinquencyActionResponse = {
    type: 'object',
    description: 'PostLoansDelinquencyActionResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostLoansDisbursementData = {
    type: 'object',
    description: 'List of PostLoansDisbursementData',
    properties: {
        expectedDisbursementDate: {
            type: 'string',
            example: '1 November 2023'
        },
        principal: {
            type: 'number',
            example: 1000
        }
    }
} as const;

export const $PostLoansLoanIdChanges = {
    type: 'object',
    description: 'PostLoansLoanIdChanges',
    properties: {
        approvedOnDate: {
            type: 'string',
            example: '28 June 2022'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        note: {
            type: 'string',
            example: 'Loan approval note'
        },
        status: {
            '$ref': '#/components/schemas/PostLoansLoanIdStatus'
        }
    }
} as const;

export const $PostLoansLoanIdChargesChargeIdChanges = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            format: 'double',
            example: 100
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        date: {
            type: 'number',
            format: 'double'
        },
        dueDate: {
            type: 'string',
            format: 'date'
        },
        externalId: {
            type: 'string',
            example: '786444UUUYYH7'
        },
        feeChargesPortion: {
            type: 'number',
            format: 'double',
            example: 100
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        installmentNumber: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        interestPortion: {
            type: 'number',
            format: 'double',
            example: 100
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        outstandingLoanBalance: {
            type: 'number',
            format: 'double',
            example: 100
        },
        penaltyChargesPortion: {
            type: 'number',
            format: 'double',
            example: 100
        },
        principalPortion: {
            type: 'number',
            format: 'double',
            example: 100
        },
        transactionDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $PostLoansLoanIdChargesChargeIdRequest = {
    type: 'object',
    description: 'PostLoansLoanIdChargesChargeIdRequest',
    properties: {
        accountNumber: {
            type: 'string',
            example: 'acc123'
        },
        amount: {
            type: 'number',
            format: 'double',
            example: 100
        },
        bankNumber: {
            type: 'string',
            example: 'ban123'
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        checkNumber: {
            type: 'string',
            example: 'che123'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        dueDate: {
            type: 'string',
            example: '19 September 2013'
        },
        externalId: {
            type: 'string',
            example: '786444UUUYYH7'
        },
        installmentNumber: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        note: {
            type: 'string',
            example: 'An optional note'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        receiptNumber: {
            type: 'string',
            example: 'rec123'
        },
        routingCode: {
            type: 'string',
            example: 'rou123'
        },
        transactionDate: {
            type: 'string',
            example: '19 September 2013'
        }
    }
} as const;

export const $PostLoansLoanIdChargesChargeIdResponse = {
    type: 'object',
    description: 'PostLoansLoanIdChargesChargeIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PostLoansLoanIdChargesChargeIdChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 6
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceExternalId: {
            type: 'string',
            example: '786444UUUYYH7'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 12
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        subResourceExternalId: {
            type: 'string',
            example: '786444UUUYYH7'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64',
            example: 12
        }
    }
} as const;

export const $PostLoansLoanIdChargesRequest = {
    type: 'object',
    description: ' PostLoansLoanIdChargesRequest',
    properties: {
        amount: {
            type: 'number',
            format: 'double',
            example: 100
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        dueDate: {
            type: 'string',
            example: '29 April 2013'
        },
        externalId: {
            type: 'string',
            example: '786444UUUYYH7'
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PostLoansLoanIdChargesResponse = {
    type: 'object',
    description: ' PostLoansLoanIdChargesResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 31
        }
    }
} as const;

export const $PostLoansLoanIdCollateralsResponse = {
    type: 'object',
    description: 'PostLoansLoanIdCollateralsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 12
        }
    }
} as const;

export const $PostLoansLoanIdDisbursementData = {
    type: 'object',
    description: 'List of PostLoansLoanIdDisbursementData',
    properties: {
        expectedDisbursementDate: {
            type: 'string',
            format: 'date'
        },
        principal: {
            type: 'number',
            example: 22000
        }
    }
} as const;

export const $PostLoansLoanIdRequest = {
    type: 'object',
    description: 'PostLoansLoanIdRequest',
    properties: {
        actualDisbursementDate: {
            type: 'string',
            example: '28 June 2022'
        },
        adjustRepaymentDate: {
            type: 'string',
            example: '28 July 2022'
        },
        approvedLoanAmount: {
            type: 'number',
            example: 1000
        },
        approvedOnDate: {
            type: 'string',
            example: '28 June 2022'
        },
        assignmentDate: {
            type: 'string',
            example: '02 September 2014'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        disbursementData: {
            type: 'array',
            description: 'List of PostLoansLoanIdDisbursementData',
            items: {
                '$ref': '#/components/schemas/PostLoansLoanIdDisbursementData'
            }
        },
        expectedDisbursementDate: {
            type: 'string',
            example: '28 June 2022'
        },
        externalId: {
            type: 'string',
            example: '3e7791ce-aa10-11ec-b909-0242ac120002'
        },
        fixedEmiAmount: {
            type: 'number',
            example: 500
        },
        fromLoanOfficerId: {
            type: 'integer',
            format: 'int64'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        note: {
            type: 'string',
            example: 'Description of disbursement details.'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        rejectedOnDate: {
            type: 'string',
            example: '28 June 2022'
        },
        toLoanOfficerId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        transactionAmount: {
            type: 'number',
            example: 5000.33
        },
        unassignedDate: {
            type: 'string',
            example: '02 September 2014'
        },
        withdrawnOnDate: {
            type: 'string',
            example: '28 June 2022'
        }
    }
} as const;

export const $PostLoansLoanIdResponse = {
    type: 'object',
    description: 'PostLoansLoanIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PostLoansLoanIdChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 6
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        resourceExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        subResourceExternalId: {
            type: 'string',
            example: 'b4f8fefd-a14d-4487-8d80-6f2fb0e07836'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64',
            example: 22
        }
    }
} as const;

export const $PostLoansLoanIdScheduleRequest = {
    type: 'object',
    description: 'PostLoansLoanIdScheduleRequest'
} as const;

export const $PostLoansLoanIdScheduleResponse = {
    type: 'object',
    description: 'PostLoansLoanIdScheduleResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PostLoanChanges'
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostLoansLoanIdStatus = {
    type: 'object',
    description: 'PostLoansLoanIdStatus',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        closed: {
            type: 'boolean',
            example: false
        },
        closedObligationsMet: {
            type: 'boolean',
            example: false
        },
        closedRescheduled: {
            type: 'boolean',
            example: false
        },
        closedWrittenOff: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'loanStatusType.approved'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 300
        },
        overpaid: {
            type: 'boolean',
            example: false
        },
        pendingApproval: {
            type: 'boolean',
            example: false
        },
        value: {
            type: 'string',
            example: 'Approved'
        },
        waitingForDisbursal: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $PostLoansLoanIdTransactionsRequest = {
    type: 'object',
    description: 'PostLoansLoanIdTransactionsRequest',
    properties: {
        accountNumber: {
            type: 'string',
            example: 'acc123'
        },
        bankNumber: {
            type: 'string',
            example: 'ban123'
        },
        chargeOffReasonId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        checkNumber: {
            type: 'string',
            example: 'che123'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        dueDate: {
            type: 'string',
            example: '28 June 2022'
        },
        externalId: {
            type: 'string',
            example: '3e7791ce-aa10-11ec-b909-0242ac120002'
        },
        frequencyNumber: {
            type: 'integer',
            format: 'int32'
        },
        frequencyType: {
            type: 'string',
            example: 'frequencyType'
        },
        interestRefundCalculation: {
            type: 'boolean',
            description: 'Optional. Controls whether Interest Refund transaction should be created for this refund. If not provided, loan product config is used.',
            example: false
        },
        loanChargeId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        locale: {
            type: 'string',
            example: 'en_GB'
        },
        note: {
            type: 'string',
            example: 'An optional note about why your adjusting or changing the transaction.'
        },
        numberOfInstallments: {
            type: 'integer',
            format: 'int32'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        receiptNumber: {
            type: 'string',
            example: 'rec123'
        },
        reversalExternalId: {
            type: 'string',
            example: '3f7791cf-bb10-11ec-b909-0242ac120012'
        },
        routingCode: {
            type: 'string',
            example: 'rou123'
        },
        startDate: {
            type: 'string',
            example: 'startDate'
        },
        transactionAmount: {
            type: 'number',
            format: 'double',
            example: 50000
        },
        transactionDate: {
            type: 'string',
            example: '28 June 2022'
        },
        writeoffReasonId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostLoansLoanIdTransactionsResponse = {
    type: 'object',
    description: 'PostLoansLoanIdTransactionsResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PostLoansLoanIdTransactionsResponseChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 22
        },
        subResourceExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64',
            example: 22
        }
    }
} as const;

export const $PostLoansLoanIdTransactionsResponseChanges = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        externalId: {
            type: 'string',
            example: '4ff9b1cb988b7'
        },
        locale: {
            type: 'string',
            example: 'en_GB'
        },
        note: {
            type: 'string',
            example: 'An optional note about why your adjusting or changing the transaction.'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        reversalExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        transactionAmount: {
            type: 'string',
            example: '50,000.00'
        },
        transactionDate: {
            type: 'string',
            example: '28 June 2022'
        }
    }
} as const;

export const $PostLoansLoanIdTransactionsTransactionIdRequest = {
    type: 'object',
    description: 'PostLoansLoanIdTransactionsTransactionIdRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        externalId: {
            type: 'string',
            example: '4ff9b1cb988b7'
        },
        locale: {
            type: 'string',
            example: 'en_GB'
        },
        note: {
            type: 'string',
            example: 'An optional note about why your adjusting or changing the transaction.'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        reversalExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        transactionAmount: {
            type: 'number',
            format: 'double'
        },
        transactionDate: {
            type: 'string',
            example: '28 June 2022'
        }
    }
} as const;

export const $PostLoansRepaymentSchedulePeriods = {
    type: 'object',
    properties: {
        dueDate: {
            type: 'string',
            format: 'date'
        },
        feeChargesDue: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        feeChargesOutstanding: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        period: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        principalDisbursed: {
            type: 'integer',
            format: 'int64',
            example: 100000
        },
        principalLoanBalanceOutstanding: {
            type: 'integer',
            format: 'int64',
            example: 100000
        },
        totalActualCostOfLoanForPeriod: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        totalDueForPeriod: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        totalOriginalDueForPeriod: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        totalOutstandingForPeriod: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        totalOverdue: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $PostLoansRequest = {
    type: 'object',
    description: 'PostLoansRequest',
    properties: {
        amortizationType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        buyDownFeeCalculationType: {
            type: 'string',
            enum: ['FLAT'],
            example: 'FLAT'
        },
        buyDownFeeIncomeType: {
            type: 'string',
            enum: ['FEE', 'INTEREST'],
            example: 'FEE'
        },
        buyDownFeeStrategy: {
            type: 'string',
            enum: ['EQUAL_AMORTIZATION'],
            example: 'EQUAL_AMORTIZATION'
        },
        capitalizedIncomeCalculationType: {
            type: 'string',
            enum: ['FLAT'],
            example: 'FLAT'
        },
        capitalizedIncomeStrategy: {
            type: 'string',
            enum: ['EQUAL_AMORTIZATION'],
            example: 'EQUAL_AMORTIZATION'
        },
        capitalizedIncomeType: {
            '$ref': '#/components/schemas/StringEnumOptionData'
        },
        charges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostLoansRequestChargeData'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        datatables: {
            type: 'array',
            example: 'List of PostLoansDataTable',
            items: {
                '$ref': '#/components/schemas/PostLoansDataTable'
            }
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        daysInYearCustomStrategy: {
            type: 'string',
            enum: ['FULL_LEAP_YEAR, FEB_29_PERIOD_ONLY'],
            example: 'FULL_LEAP_YEAR'
        },
        daysInYearType: {
            type: 'integer',
            format: 'int32',
            enum: [
                null
            ],
            example: 360
        },
        disbursedAmountPercentageForDownPayment: {
            type: 'number',
            example: 0
        },
        disbursementData: {
            type: 'array',
            description: 'List of PostLoansDisbursementData',
            items: {
                '$ref': '#/components/schemas/PostLoansDisbursementData'
            }
        },
        enableAutoRepaymentForDownPayment: {
            type: 'boolean',
            example: false
        },
        enableBuyDownFee: {
            type: 'boolean',
            example: false
        },
        enableDownPayment: {
            type: 'boolean',
            example: false
        },
        enableIncomeCapitalization: {
            type: 'boolean',
            example: false
        },
        enableInstallmentLevelDelinquency: {
            type: 'boolean',
            example: false
        },
        expectedDisbursementDate: {
            type: 'string',
            example: '20 September 2011'
        },
        externalId: {
            type: 'string',
            example: '786444UUUYYH7'
        },
        fixedEmiAmount: {
            type: 'number',
            example: 10
        },
        fixedLength: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        fixedPrincipalPercentagePerInstallment: {
            type: 'number',
            example: 5.5
        },
        graceOnArrearsAgeing: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        graceOnInterestCharged: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        graceOnInterestPayment: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        graceOnPrincipalPayment: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestCalculationPeriodType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestRateFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        interestRatePerPeriod: {
            type: 'number',
            example: 2
        },
        interestRecognitionOnDisbursementDate: {
            type: 'boolean',
            example: false
        },
        interestType: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        loanScheduleProcessingType: {
            type: 'string',
            example: 'HORIZONTAL'
        },
        loanTermFrequency: {
            type: 'integer',
            format: 'int32',
            example: 12
        },
        loanTermFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        loanType: {
            type: 'string',
            example: 'individual'
        },
        locale: {
            type: 'string',
            example: 'en_GB'
        },
        maxOutstandingLoanBalance: {
            type: 'number',
            description: 'Maximum allowed outstanding balance'
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 12
        },
        principal: {
            type: 'number',
            example: 1000
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        repaymentEvery: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        repaymentFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        repaymentsStartingFromDate: {
            type: 'string',
            format: 'date'
        },
        submittedOnDate: {
            type: 'string',
            example: '20 September 2011'
        },
        transactionProcessingStrategyCode: {
            type: 'string',
            example: 'mifos-standard-strategy'
        }
    }
} as const;

export const $PostLoansRequestChargeData = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            example: 1
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostLoansResponse = {
    type: 'object',
    description: 'PostLoansResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        currency: {
            '$ref': '#/components/schemas/GetLoansLoanIdCurrency'
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanTermInDays: {
            type: 'integer',
            format: 'int32',
            example: 366
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        periods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostLoansRepaymentSchedulePeriods'
            },
            uniqueItems: true
        },
        resourceExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        totalFeeChargesCharged: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        totalInterestCharged: {
            type: 'number',
            example: 13471.52
        },
        totalOutstanding: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        totalPenaltyChargesCharged: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        totalPrincipalDisbursed: {
            type: 'integer',
            format: 'int64',
            example: 100000
        },
        totalPrincipalExpected: {
            type: 'integer',
            format: 'int64',
            example: 100000
        },
        totalPrincipalPaid: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        totalRepayment: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        totalRepaymentExpected: {
            type: 'number',
            example: 113471.52
        },
        totalWaived: {
            type: 'integer',
            format: 'int64',
            example: 0
        },
        totalWrittenOff: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $PostMakerCheckersResponse = {
    type: 'object',
    description: 'PostMakerCheckersResponse',
    properties: {
        auditId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostNewShareApplicationResponse = {
    type: 'object',
    description: 'PostNewShareApplicationResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int32',
            example: 12
        }
    }
} as const;

export const $PostNewTransferResponse = {
    type: 'object',
    description: 'PostNewTransferResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostOfficesRequest = {
    type: 'object',
    description: 'PostOfficesRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        externalId: {
            type: 'string',
            example: 'SYS54-88'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'Good Friday'
        },
        openingDate: {
            type: 'string',
            format: 'date'
        },
        parentId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $PostOfficesResponse = {
    type: 'object',
    description: 'PostOfficesResponse',
    properties: {
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $PostPaymentTypesResponse = {
    type: 'object',
    description: 'PostPaymentTypesResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostProductsChargesSelected = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 20
        }
    }
} as const;

export const $PostProductsMarketPricePeriods = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        fromDate: {
            type: 'string',
            example: '04 May 2016'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        shareValue: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $PostProductsTypeRequest = {
    type: 'object',
    description: 'PostProductsTypeRequest',
    properties: {
        accountingRule: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        allowDividendCalculationForInactiveClients: {
            type: 'boolean',
            example: true
        },
        chargesSelected: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostProductsChargesSelected'
            },
            uniqueItems: true
        },
        currencyCode: {
            type: 'string',
            example: 'USD'
        },
        description: {
            type: 'string',
            example: 'Description'
        },
        digitsAfterDecimal: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        lockinPeriodFrequency: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        lockinPeriodFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        marketPricePeriods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostProductsMarketPricePeriods'
            },
            uniqueItems: true
        },
        maximumShares: {
            type: 'integer',
            format: 'int32',
            example: 30
        },
        minimumActivePeriodForDividends: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        minimumShares: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        minimumactiveperiodFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        name: {
            type: 'string',
            example: 'Share Product'
        },
        nominalShares: {
            type: 'integer',
            format: 'int32',
            example: 20
        },
        sharesIssued: {
            type: 'integer',
            format: 'int32',
            example: 1000
        },
        shortName: {
            type: 'string',
            example: 'SP'
        },
        totalShares: {
            type: 'integer',
            format: 'int32',
            example: 1000
        },
        unitPrice: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $PostProductsTypeResponse = {
    type: 'object',
    description: 'PostProductsTypeResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostProvisioningCriteriaRequest = {
    type: 'object',
    description: 'PostProvisioningCriteriaRequest',
    properties: {
        criteriaName: {
            type: 'string',
            example: 'High Risk Products Criteria'
        },
        loanProducts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductData'
            }
        },
        provisioningcriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProvisioningCriteriaDefinitionData'
            }
        }
    }
} as const;

export const $PostProvisioningCriteriaResponse = {
    type: 'object',
    description: 'PostProvisioningCriteriaResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostProvisioningEntriesResponse = {
    type: 'object',
    description: 'PostProvisioningEntriesResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostRecurringChanges = {
    type: 'object',
    properties: {
        accountNumber: {
            type: 'string',
            example: 'acc123'
        },
        bankNumber: {
            type: 'string',
            example: 'ban123'
        },
        checkNumber: {
            type: 'string',
            example: 'che123'
        },
        receiptNumber: {
            type: 'string',
            example: 'rec123'
        },
        routingCode: {
            type: 'string',
            example: 'rou123'
        }
    }
} as const;

export const $PostRecurringDepositAccountsAccountIdRequest = {
    type: 'object',
    description: 'PostRecurringDepositAccountsAccountIdRequest'
} as const;

export const $PostRecurringDepositAccountsAccountIdResponse = {
    type: 'object',
    description: 'PostRecurringDepositAccountsAccountIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest = {
    type: 'object',
    description: 'PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest',
    properties: {
        accountNumber: {
            type: 'string',
            example: 'acc123'
        },
        bankNumber: {
            type: 'string',
            example: 'ban123'
        },
        checkNumber: {
            type: 'string',
            example: 'che123'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int32',
            example: 14
        },
        receiptNumber: {
            type: 'string',
            example: 'rec123'
        },
        routingCode: {
            type: 'string',
            example: 'rou123'
        },
        transactionAmount: {
            type: 'number',
            format: 'double',
            example: 500
        },
        transactionDate: {
            type: 'string',
            example: '27 May 2013'
        }
    }
} as const;

export const $PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse = {
    type: 'object',
    description: 'PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PostRecurringChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 47
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse = {
    type: 'object',
    description: 'PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PostRecurringChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 48
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostRecurringDepositAccountsRequest = {
    type: 'object',
    description: 'PostRecurringDepositAccountsRequest',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        depositAmount: {
            type: 'number',
            format: 'float',
            example: 10000
        },
        depositPeriod: {
            type: 'integer',
            format: 'int32',
            example: 20
        },
        depositPeriodFrequencyId: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        isCalendarInherited: {
            type: 'boolean',
            example: false
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        mandatoryRecommendedDepositAmount: {
            type: 'integer',
            format: 'int64',
            example: 2000
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        recurringFrequency: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        recurringFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        submittedOnDate: {
            type: 'string',
            example: '02 June 2014'
        }
    }
} as const;

export const $PostRecurringDepositAccountsResponse = {
    type: 'object',
    description: 'PostRecurringDepositAccountsResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostRecurringDepositProductsChartSlabs = {
    type: 'object',
    properties: {
        annualInterestRate: {
            type: 'number',
            format: 'double',
            example: 4.5
        },
        description: {
            type: 'string',
            example: 'from 0 to 90 days'
        },
        fromPeriod: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        periodType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        toPeriod: {
            type: 'integer',
            format: 'int32',
            example: 90
        }
    }
} as const;

export const $PostRecurringDepositProductsCharts = {
    type: 'object',
    properties: {
        chartSlabs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostRecurringDepositProductsChartSlabs'
            },
            uniqueItems: true
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        fromDate: {
            type: 'string',
            example: '01 Jan 2014'
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PostRecurringDepositProductsRequest = {
    type: 'object',
    description: 'PostRecurringDepositProductsRequest',
    properties: {
        accountingRule: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        charts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostRecurringDepositProductsCharts'
            },
            uniqueItems: true
        },
        currencyCode: {
            type: 'string',
            example: 'USD'
        },
        depositAmount: {
            type: 'integer',
            format: 'int64',
            example: 10000
        },
        description: {
            type: 'string',
            example: 'Daily compounding using Daily Balance, 5% per year, 365 days in year'
        },
        digitsAfterDecimal: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        interestCalculationDaysInYearType: {
            type: 'integer',
            format: 'int32',
            example: 365
        },
        interestCalculationType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestCompoundingPeriodType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestPostingPeriodType: {
            type: 'integer',
            format: 'int32',
            example: 4
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        maxDepositAmount: {
            type: 'integer',
            format: 'int64',
            example: 1000000
        },
        maxDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 5
        },
        maxDepositTermTypeId: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        minDepositAmount: {
            type: 'integer',
            format: 'int64',
            example: 100
        },
        minDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        minDepositTermTypeId: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Recurring deposit product'
        },
        preClosurePenalApplicable: {
            type: 'boolean',
            example: true
        },
        preClosurePenalInterest: {
            type: 'number',
            format: 'double',
            example: 1.75
        },
        preClosurePenalInterestOnTypeId: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recurringDepositFrequency: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recurringDepositFrequencyTypeId: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        shortName: {
            type: 'string',
            example: 'RD01'
        }
    }
} as const;

export const $PostRecurringDepositProductsResponse = {
    type: 'object',
    description: 'PostRecurringDepositProductsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostReportMailingJobsRequest = {
    type: 'object',
    description: 'PostReportMailingJobsRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd-MM-yyyy HH:mm:ss'
        },
        description: {
            type: 'string',
            example: 'Client Numbers Report'
        },
        emailMessage: {
            type: 'string',
            example: 'Client Numbers Report'
        },
        emailRecipients: {
            type: 'string',
            example: 'info@musonisystem.com'
        },
        emailSubject: {
            type: 'string',
            example: 'Client Numbers Report'
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        locale: {
            type: 'string',
            example: 'en_GB'
        },
        name: {
            type: 'string',
            example: 'Client Numbers Report'
        },
        recurrence: {
            type: 'string',
            example: 'FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,WE,FR'
        },
        startDateTime: {
            type: 'string',
            format: 'date-time'
        },
        stretchyReportId: {
            type: 'integer',
            format: 'int64',
            example: 120
        },
        stretchyReportParamMap: {
            type: 'string',
            example: '{"startDate":"2016-07-01","endDate":"2016-08-02","selectOffice":"1","environementUrl":"environementUrl"}'
        }
    }
} as const;

export const $PostReportMailingJobsResponse = {
    type: 'object',
    description: 'PostReportMailingJobsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostReportsResponse = {
    type: 'object',
    description: 'PostReportsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 132
        }
    }
} as const;

export const $PostRepostRequest = {
    type: 'object',
    description: 'PostRepostRequest',
    properties: {
        description: {
            type: 'string',
            example: 'Just An Example'
        },
        reportCategory: {
            type: 'string',
            example: 'Loan'
        },
        reportName: {
            type: 'string',
            example: 'Completely New Report'
        },
        reportParameters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReportParameterData'
            }
        },
        reportSql: {
            type: 'string',
            example: "select 'very good sql' as AComment"
        },
        reportSubType: {
            type: 'string'
        },
        reportType: {
            type: 'string',
            example: 'Table'
        }
    }
} as const;

export const $PostResourceTypeResourceIdNotesResponse = {
    type: 'object',
    description: 'PostResourceTypeResourceIdNotesResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 76
        }
    }
} as const;

export const $PostRolesRequest = {
    type: 'object',
    description: 'PostRolesRequest',
    properties: {
        description: {
            type: 'string',
            example: 'A description outlining the purpose of this role in relation to the application.'
        },
        name: {
            type: 'string',
            example: 'Another Role Name'
        }
    }
} as const;

export const $PostRolesResponse = {
    type: 'object',
    description: 'PostRolesResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostRolesRoleIdResponse = {
    type: 'object',
    description: 'PostRolesRoleIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostRunaccrualsRequest = {
    type: 'object',
    description: 'runaccrualsRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        tillDate: {
            type: 'string',
            description: 'which specifies periodic accruals should happen till the given Date',
            example: '04 June 2014'
        }
    }
} as const;

export const $PostSavingsAccountBulkReversalTransactionsRequest = {
    type: 'object',
    description: 'PostSavingsAccountBulkReversalTransactionsRequest',
    properties: {
        isBulk: {
            type: 'string',
            example: 'true'
        }
    }
} as const;

export const $PostSavingsAccountTransactionsRequest = {
    type: 'object',
    description: 'PostSavingsAccountTransactionsRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        lienAllowed: {
            type: 'string',
            example: 'true'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        reasonForBlock: {
            type: 'string',
            example: 'String'
        },
        transactionAmount: {
            type: 'number',
            example: 1000
        },
        transactionDate: {
            type: 'string',
            example: '27 March 2022'
        }
    }
} as const;

export const $PostSavingsAccountTransactionsResponse = {
    type: 'object',
    description: 'PostSavingsAccountTransactionsResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostSavingsAccountsAccountIdChanges = {
    type: 'object'
} as const;

export const $PostSavingsAccountsAccountIdRequest = {
    type: 'object',
    description: 'PostSavingsAccountsAccountIdRequest',
    properties: {
        activatedOnDate: {
            type: 'string',
            example: '05 September 2014'
        },
        approvedOnDate: {
            type: 'string',
            example: '05 September 2014'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PostSavingsAccountsAccountIdResponse = {
    type: 'object',
    description: 'PostSavingsAccountsAccountIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PostSavingsAccountsAccountIdChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 8
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 8
        }
    }
} as const;

export const $PostSavingsAccountsRequest = {
    type: 'object',
    description: 'PostSavingsAccountsRequest',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        externalId: {
            type: 'string',
            example: '123'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        submittedOnDate: {
            type: 'string',
            example: '01 March 2011'
        }
    }
} as const;

export const $PostSavingsAccountsResponse = {
    type: 'object',
    description: 'PostSavingsAccountsResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostSavingsAccountsSavingsAccountIdChargesRequest = {
    type: 'object',
    description: 'PostSavingsAccountsSavingsAccountIdChargesRequest',
    properties: {
        amount: {
            type: 'number',
            format: 'float',
            example: 100
        },
        chargeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        dueDate: {
            type: 'string',
            example: '29 April 2013'
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PostSavingsAccountsSavingsAccountIdChargesResponse = {
    type: 'object',
    description: 'PostSavingsAccountsSavingsAccountIdChargesResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 6
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest = {
    type: 'object',
    description: 'PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest',
    properties: {
        amount: {
            type: 'number',
            format: 'float',
            example: 60
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        dueDate: {
            type: 'string',
            example: '12 September 2013'
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse = {
    type: 'object',
    description: 'PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostSavingsCharges = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostSavingsProductsRequest = {
    type: 'object',
    description: 'PostSavingsProductsRequest',
    properties: {
        accountMappingForPayment: {
            type: 'string',
            example: 'accountMappingForPayment'
        },
        accountingRule: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        allowOverdraft: {
            type: 'boolean',
            example: false
        },
        charges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostSavingsCharges'
            }
        },
        currencyCode: {
            type: 'string',
            example: 'USD'
        },
        description: {
            type: 'string',
            example: 'Daily compounding using Daily Balance, 5% per year, 365 days in year'
        },
        digitsAfterDecimal: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        enforceMinRequiredBalance: {
            type: 'boolean',
            example: false
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        interestCalculationDaysInYearType: {
            type: 'integer',
            format: 'int32',
            example: 365
        },
        interestCalculationType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestCompoundingPeriodType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestPostingPeriodType: {
            type: 'integer',
            format: 'int32',
            example: 4
        },
        isDormancyTrackingActive: {
            type: 'boolean',
            example: false
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'Passbook Savings'
        },
        nominalAnnualInterestRate: {
            type: 'number',
            format: 'double',
            example: 5
        },
        shortName: {
            type: 'string',
            example: 'PBSV'
        },
        withHoldTax: {
            type: 'boolean',
            example: false
        },
        withdrawalFeeForTransfers: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $PostSavingsProductsResponse = {
    type: 'object',
    description: 'PostSavingsProductsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostSelfAuthenticationResponse = {
    type: 'object',
    description: 'PostSelfAuthenticationResponse',
    properties: {
        authenticated: {
            type: 'boolean',
            example: true
        },
        base64EncodedAuthenticationKey: {
            type: 'string',
            example: 'bWlmb3M6cGFzc3dvcmQ='
        },
        clients: {
            type: 'array',
            example: '1, 2, 3',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        isSelfServiceUser: {
            type: 'boolean',
            example: true
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeName: {
            type: 'string',
            example: 'Head Office'
        },
        organisationalRole: {
            '$ref': '#/components/schemas/GetSelfUserDetailsOrganisationalRole'
        },
        permissions: {
            type: 'array',
            example: 'ALL_FUNCTIONS',
            items: {
                type: 'string',
                example: 'ALL_FUNCTIONS'
            }
        },
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSelfUserDetailsRoles'
            },
            uniqueItems: true
        },
        staffDisplayName: {
            type: 'string',
            example: 'Director, Program'
        },
        staffId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        userId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        username: {
            type: 'string',
            example: 'mifos'
        }
    }
} as const;

export const $PostSelfBeneficiariesTPTRequest = {
    type: 'object',
    description: 'PostSelfBeneficiariesTPTRequest',
    properties: {
        accountNumber: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        accountType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        locale: {
            type: 'string',
            example: 'en_GB'
        },
        name: {
            type: 'string',
            example: 'beneficiary nick name'
        },
        officeName: {
            type: 'string',
            example: 'HEAD OFFICE'
        },
        transferLimit: {
            type: 'integer',
            format: 'int32',
            example: 1000
        }
    }
} as const;

export const $PostSelfBeneficiariesTPTResponse = {
    type: 'object',
    description: 'PostSelfBeneficiariesTPTResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 5
        }
    }
} as const;

export const $PostSelfLoansData = {
    type: 'object',
    properties: {
        Activation_Date: {
            type: 'string',
            example: '01 December 2016 00:00'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy HH:mm'
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PostSelfLoansDatatables = {
    type: 'object',
    properties: {
        data: {
            '$ref': '#/components/schemas/PostSelfLoansData'
        },
        registeredTableName: {
            type: 'string',
            example: 'Date Loan Field'
        }
    }
} as const;

export const $PostSelfLoansDisbursementData = {
    type: 'object',
    properties: {
        approvedPrincipal: {
            type: 'integer',
            format: 'int64',
            example: 22000
        },
        expectedDisbursementDate: {
            type: 'string',
            example: '01 November 2013'
        },
        principal: {
            type: 'integer',
            format: 'int64',
            example: 22000
        }
    }
} as const;

export const $PostSelfLoansLoanIdChanges = {
    type: 'object',
    properties: {
        closedOnDate: {
            type: 'string',
            example: '20 September 2011'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        status: {
            '$ref': '#/components/schemas/PostSelfLoansLoanIdStatus'
        },
        withdrawnOnDate: {
            type: 'string',
            example: '20 September 2011'
        }
    }
} as const;

export const $PostSelfLoansLoanIdRequest = {
    type: 'object',
    description: 'PostSelfLoansLoanIdRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        note: {
            type: 'string',
            example: 'Reason loan applicant withdrew from application.'
        },
        withdrawnOnDate: {
            type: 'string',
            example: '20 September 2011'
        }
    }
} as const;

export const $PostSelfLoansLoanIdResponse = {
    type: 'object',
    description: 'PostSelfLoansLoanIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PostSelfLoansLoanIdChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $PostSelfLoansLoanIdStatus = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        closed: {
            type: 'boolean',
            example: false
        },
        closedObligationsMet: {
            type: 'boolean',
            example: false
        },
        closedRescheduled: {
            type: 'boolean',
            example: false
        },
        closedWrittenOff: {
            type: 'boolean',
            example: false
        },
        code: {
            type: 'string',
            example: 'loanStatusType.withdrawn.by.client'
        },
        description: {
            type: 'string',
            example: 'Withdrawn by applicant'
        },
        id: {
            type: 'integer',
            format: 'int32',
            example: 400
        },
        overpaid: {
            type: 'boolean',
            example: false
        },
        pendingApproval: {
            type: 'boolean',
            example: false
        },
        waitingForDisbursal: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $PostSelfLoansRequest = {
    type: 'object',
    description: 'PostSelfLoansRequest',
    properties: {
        amortizationType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        datatables: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostSelfLoansDatatables'
            },
            uniqueItems: true
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        disbursementData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostSelfLoansDisbursementData'
            },
            uniqueItems: true
        },
        expectedDisbursementDate: {
            type: 'string',
            example: '10 Jun 2013'
        },
        fixedEmiAmount: {
            type: 'integer',
            format: 'int32',
            example: 1100
        },
        interestCalculationPeriodType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestRatePerPeriod: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        interestType: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        linkAccountId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanTermFrequency: {
            type: 'integer',
            format: 'int32',
            example: 12
        },
        loanTermFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        loanType: {
            type: 'string',
            example: 'individual'
        },
        locale: {
            type: 'string',
            example: 'en_GB'
        },
        maxOutstandingLoanBalance: {
            type: 'integer',
            format: 'int64',
            example: 35000
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        principal: {
            type: 'number',
            format: 'double'
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        repaymentEvery: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        repaymentFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        submittedOnDate: {
            type: 'string',
            example: '10 Jun 2013'
        },
        transactionProcessingStrategyCode: {
            type: 'string',
            example: 'mifos-standard-strategy'
        }
    }
} as const;

export const $PostSelfLoansResponse = {
    type: 'object',
    description: 'PostSelfLoansResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostStandingInstructionsResponse = {
    type: 'object',
    description: 'PostStandingInstructionsResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int32',
            example: 65
        }
    }
} as const;

export const $PostSurveySurveyNameApptableIdRequest = {
    type: 'object',
    description: 'PostSurveySurveyNameApptableIdRequest',
    properties: {
        date: {
            type: 'string',
            format: 'date-time'
        },
        dateFormat: {
            type: 'string',
            format: 'date-time'
        },
        locale: {
            type: 'string',
            example: 'en_GB'
        },
        ppi_businessoccupation_cd_q3_businessoccupation: {
            type: 'integer',
            format: 'int64',
            example: 180
        },
        ppi_floortype_cd_q5_floortype: {
            type: 'integer',
            format: 'int64',
            example: 188
        },
        ppi_fryingpans_cd_q10_fryingpans: {
            type: 'integer',
            format: 'int64',
            example: 201
        },
        ppi_habitablerooms_cd_q4_habitablerooms: {
            type: 'integer',
            format: 'int64',
            example: 184
        },
        ppi_highestschool_cd_q2_highestschool: {
            type: 'integer',
            format: 'int64',
            example: 174
        },
        ppi_household_members_cd_q1_householdmembers: {
            type: 'integer',
            format: 'int64',
            example: 167
        },
        ppi_irons_cd_q7_irons: {
            type: 'integer',
            format: 'int64',
            example: 193
        },
        ppi_lightingsource_cd_q6_lightingsource: {
            type: 'integer',
            format: 'int64',
            example: 190
        },
        ppi_mosquitonets_cd_q8_mosquitonets: {
            type: 'integer',
            format: 'int64',
            example: 195
        },
        ppi_towels_cd_q9_towels: {
            type: 'integer',
            format: 'int64',
            example: 198
        }
    }
} as const;

export const $PostSurveySurveyNameApptableIdResponse = {
    type: 'object',
    description: 'PostSurveySurveyNameApptableIdResponse',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 87
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 87
        }
    }
} as const;

export const $PostTaxesComponentsRequest = {
    type: 'object',
    description: 'PostTaxesComponentsRequest',
    properties: {
        creditAccountType: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        creditAcountId: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'tax component 1'
        },
        percentage: {
            type: 'number',
            format: 'float',
            example: 10
        },
        startDate: {
            type: 'string',
            example: '11 April 2016'
        }
    }
} as const;

export const $PostTaxesComponentsResponse = {
    type: 'object',
    description: 'PostTaxesComponentsResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostTaxesGroupRequest = {
    type: 'object',
    description: 'PostTaxesGroupRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'tax group 1'
        },
        taxComponents: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostTaxesGroupTaxComponents'
            },
            uniqueItems: true
        }
    }
} as const;

export const $PostTaxesGroupResponse = {
    type: 'object',
    description: 'PostTaxesGroupResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostTaxesGroupTaxComponents = {
    type: 'object',
    properties: {
        startDate: {
            type: 'string',
            example: '11 April 2016'
        },
        taxComponentId: {
            type: 'integer',
            format: 'int64',
            example: 7
        }
    }
} as const;

export const $PostTellersRequest = {
    type: 'object',
    description: 'PostTellersRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd-MM-yyyy'
        },
        description: {
            type: 'string',
            example: 'cash handling'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'Teller3'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        status: {
            type: 'string',
            enum: ['INVALID', 'PENDING', 'ACTIVE', 'INACTIVE', 'CLOSED'],
            example: 'ACTIVE'
        }
    }
} as const;

export const $PostTellersResponse = {
    type: 'object',
    description: 'PostTellersResponse',
    properties: {
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 5
        }
    }
} as const;

export const $PostTellersTellerIdCashiersCashierIdAllocateRequest = {
    type: 'object',
    description: 'PostTellersTellerIdCashiersCashierIdAllocateRequest',
    properties: {
        currencyCode: {
            type: 'string',
            example: 'USD'
        },
        dateFormat: {
            type: 'string',
            example: 'dd-MM-yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        txnAmount: {
            type: 'number',
            example: 5000
        },
        txnDate: {
            type: 'string',
            format: 'date'
        },
        txnNote: {
            type: 'string',
            example: 'allocating cash'
        }
    }
} as const;

export const $PostTellersTellerIdCashiersCashierIdAllocateResponse = {
    type: 'object',
    description: 'PostTellersTellerIdCashiersCashierIdAllocateResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        subResourceId: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $PostTellersTellerIdCashiersCashierIdSettleRequest = {
    type: 'object',
    description: 'PostTellersTellerIdCashiersCashierIdSettleRequest',
    properties: {
        currencyCode: {
            type: 'string',
            example: 'USD'
        },
        dateFormat: {
            type: 'string',
            example: 'dd-MM-yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        txnAmount: {
            type: 'number',
            example: 2000
        },
        txnDate: {
            type: 'string',
            format: 'date'
        },
        txnNote: {
            type: 'string',
            example: 'cash settlement'
        }
    }
} as const;

export const $PostTellersTellerIdCashiersCashierIdSettleResponse = {
    type: 'object',
    description: 'PostTellersTellerIdCashiersCashierIdSettleResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        subResourceId: {
            type: 'integer',
            format: 'int64',
            example: 5
        }
    }
} as const;

export const $PostTellersTellerIdCashiersRequest = {
    type: 'object',
    description: 'PostTellersTellerIdCashiersRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd-MM-yyyy'
        },
        description: {
            type: 'string',
            example: 'teller cash handling'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        isFullDay: {
            type: 'boolean',
            example: true
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        staffId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        startDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $PostTellersTellerIdCashiersResponse = {
    type: 'object',
    description: 'PostTellersTellerIdCashiersResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        subResourceId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $PostTemplatesRequest = {
    type: 'object',
    description: 'PostTemplatesRequest',
    properties: {
        entity: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        mappers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TemplateMapper'
            }
        },
        name: {
            type: 'string',
            example: 'Text'
        },
        text: {
            type: 'string',
            example: 'This is a loan for {{loan.clientName}}'
        },
        type: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $PostTemplatesResponse = {
    type: 'object',
    description: 'PostTemplatesResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PostUpdateRescheduleLoanChanges = {
    type: 'object',
    properties: {
        approvedByUserId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        approvedOnDate: {
            type: 'string',
            example: '05/02/2022'
        },
        dateFormat: {
            type: 'string',
            example: 'en'
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PostUpdateRescheduleLoansRequest = {
    type: 'object',
    description: 'PostUpdateRescheduleLoansRequest',
    properties: {
        approvedOnDate: {
            type: 'string',
            example: '20 September 2011'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        rejectedOnDate: {
            type: 'string',
            example: '20 September 2011'
        }
    }
} as const;

export const $PostUpdateRescheduleLoansResponse = {
    type: 'object',
    description: 'PostUpdateRescheduleLoansResponse ',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PostUpdateRescheduleLoanChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 12
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 18
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 12
        }
    }
} as const;

export const $PostUsersRequest = {
    type: 'object',
    description: 'PostUsersRequest',
    properties: {
        clients: {
            type: 'array',
            example: [2, 3],
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        email: {
            type: 'string',
            example: 'whatever@mifos.org'
        },
        firstname: {
            type: 'string',
            example: 'Test'
        },
        isSelfServiceUser: {
            type: 'boolean',
            example: true
        },
        lastname: {
            type: 'string',
            example: 'User'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        password: {
            type: 'string',
            example: 'password'
        },
        passwordNeverExpires: {
            type: 'boolean',
            example: true
        },
        repeatPassword: {
            type: 'string',
            example: 'repeatPassword'
        },
        roles: {
            type: 'array',
            example: [2, 3],
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        sendPasswordToEmail: {
            type: 'boolean',
            example: true
        },
        staffId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        username: {
            type: 'string',
            example: 'newuser'
        }
    }
} as const;

export const $PostUsersResponse = {
    type: 'object',
    description: 'PostUsersResponse',
    properties: {
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 11
        }
    }
} as const;

export const $PostalAddress = {
    type: 'object',
    properties: {
        addressLine1: {
            type: 'string'
        },
        addressLine2: {
            type: 'string'
        },
        city: {
            type: 'string'
        },
        country: {
            type: 'string'
        },
        postalCode: {
            type: 'string'
        },
        stateProvince: {
            type: 'string'
        }
    }
} as const;

export const $ProcessingResultLookup = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        processingResult: {
            type: 'string'
        }
    }
} as const;

export const $ProductData = {
    type: 'object'
} as const;

export const $ProductMixRequest = {
    type: 'object',
    properties: {
        restrictedProducts: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        }
    }
} as const;

export const $ProgressiveLoanInterestScheduleModel = {
    type: 'object',
    properties: {
        copy: {
            type: 'boolean'
        },
        emirecalculationEnabled: {
            type: 'boolean'
        },
        empty: {
            type: 'boolean'
        },
        lastRepaymentPeriod: {
            '$ref': '#/components/schemas/RepaymentPeriod'
        },
        loanTermInDays: {
            type: 'integer',
            format: 'int32'
        },
        maturityDate: {
            type: 'string',
            format: 'date'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        totalCreditedPrincipal: {
            '$ref': '#/components/schemas/Money'
        },
        totalDueInterest: {
            '$ref': '#/components/schemas/Money'
        },
        totalDuePrincipal: {
            '$ref': '#/components/schemas/Money'
        },
        totalOutstandingPrincipal: {
            '$ref': '#/components/schemas/Money'
        },
        totalPaidInterest: {
            '$ref': '#/components/schemas/Money'
        },
        totalPaidPrincipal: {
            '$ref': '#/components/schemas/Money'
        }
    },
    required: ['lastRepaymentPeriod']
} as const;

export const $Providers = {
    type: 'object'
} as const;

export const $ProvisionEntryRequest = {
    type: 'object',
    properties: {
        createjournalentries: {
            type: 'boolean'
        },
        date: {
            type: 'string'
        },
        dateFormat: {
            type: 'string'
        },
        locale: {
            type: 'string'
        }
    }
} as const;

export const $ProvisioningCategoryData = {
    type: 'object',
    properties: {
        categoryDescription: {
            type: 'string'
        },
        categoryName: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $ProvisioningCriteriaData = {
    type: 'object',
    properties: {
        createdBy: {
            type: 'string'
        },
        criteriaId: {
            type: 'integer',
            format: 'int64'
        },
        criteriaName: {
            type: 'string'
        },
        definitions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProvisioningCriteriaDefinitionData'
            }
        },
        glAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GLAccountData'
            }
        },
        loanProducts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductData'
            }
        },
        selectedLoanProducts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductData'
            }
        }
    }
} as const;

export const $ProvisioningCriteriaDefinitionData = {
    type: 'object',
    properties: {
        categoryId: {
            type: 'integer',
            format: 'int64'
        },
        categoryName: {
            type: 'string'
        },
        expenseAccount: {
            type: 'integer',
            format: 'int64'
        },
        expenseCode: {
            type: 'string'
        },
        expenseName: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        liabilityAccount: {
            type: 'integer',
            format: 'int64'
        },
        liabilityCode: {
            type: 'string'
        },
        liabilityName: {
            type: 'string'
        },
        maxAge: {
            type: 'integer',
            format: 'int64'
        },
        minAge: {
            type: 'integer',
            format: 'int64'
        },
        provisioningPercentage: {
            type: 'number'
        }
    }
} as const;

export const $ProvisioningEntryData = {
    type: 'object',
    properties: {
        createdById: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date'
        },
        createdUser: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        journalEntry: {
            type: 'boolean'
        },
        modifiedById: {
            type: 'integer',
            format: 'int64'
        },
        modifiedUser: {
            type: 'string'
        },
        provisioningEntries: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductProvisioningEntryData'
            }
        },
        reservedAmount: {
            type: 'number'
        }
    }
} as const;

export const $PutAccountNumberFormatsRequest = {
    type: 'object',
    description: 'PutAccountNumberFormatsRequest',
    properties: {
        prefixType: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutAccountNumberFormatsResponse = {
    type: 'object',
    description: 'PutAccountNumberFormatsResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutAccountNumberFormatschangesSwagger'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $PutAccountNumberFormatschangesSwagger = {
    type: 'object',
    properties: {
        prefixType: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $PutAccountingRulesResponse = {
    type: 'object',
    description: 'PutAccountingRulesResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutAccountingRulesResponsechangesSwagger'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutAccountingRulesResponsechangesSwagger = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'Employee Salary posting rule'
        }
    }
} as const;

export const $PutAccountsChanges = {
    type: 'object',
    properties: {
        applicationDate: {
            type: 'string',
            example: '01 April 2016'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        requestedShares: {
            type: 'integer',
            format: 'int32',
            example: 20
        }
    }
} as const;

export const $PutAccountsTypeAccountIdRequest = {
    type: 'object',
    description: 'PutAccountsTypeAccountIdRequest',
    properties: {
        applicationDate: {
            type: 'string',
            example: '01 April 2016'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        requestedShares: {
            type: 'integer',
            format: 'int32',
            example: 20
        }
    }
} as const;

export const $PutAccountsTypeAccountIdResponse = {
    type: 'object',
    description: 'PutAccountsTypeAccountIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutAccountsChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutCentersCenterIdRequest = {
    type: 'object',
    description: 'PutCentersCenterIdRequest',
    properties: {
        name: {
            type: 'string',
            example: 'First Center (No groups)'
        }
    }
} as const;

export const $PutCentersCenterIdResponse = {
    type: 'object',
    description: 'PutCentersCenterIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutCentersChanges'
        },
        groupId: {
            type: 'integer',
            format: 'int64',
            example: 8
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 8
        }
    }
} as const;

export const $PutCentersChanges = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'First Center (No groups) - modified'
        }
    }
} as const;

export const $PutChargeTransactionChangesRequest = {
    type: 'object',
    description: 'PutChargeTransactionChangesRequest',
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $PutChargeTransactionChangesResponse = {
    type: 'object',
    description: 'PutChargeTransactionChangesResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutChargeTransactionChangesResponseChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 22
        },
        subResourceExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        subResourceId: {
            type: 'integer',
            format: 'int64',
            example: 22
        }
    }
} as const;

export const $PutChargeTransactionChangesResponseChanges = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            format: 'double',
            example: 10
        },
        date: {
            type: 'string',
            format: 'date'
        },
        externalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        feeChargesPortion: {
            type: 'number',
            format: 'double',
            example: 10
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        interestPortion: {
            type: 'number',
            format: 'double',
            example: 10
        },
        outstandingLoanBalance: {
            type: 'number',
            format: 'double',
            example: 10
        },
        penaltyChargesPortion: {
            type: 'number',
            format: 'double',
            example: 10
        },
        principalPortion: {
            type: 'number',
            format: 'double',
            example: 10
        }
    }
} as const;

export const $PutChargesChargeIdRequest = {
    type: 'object',
    description: 'PutChargesChargeIdRequest',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        amount: {
            type: 'number',
            format: 'double',
            example: 230.56
        },
        chargeAppliesTo: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        chargeCalculationType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        chargePaymentMode: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        chargeTimeType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        countFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        currencyCode: {
            type: 'string',
            example: 'USD'
        },
        enableFreeWithdrawalCharge: {
            type: 'boolean',
            example: true
        },
        enablePaymentType: {
            type: 'boolean',
            example: true
        },
        feeFrequency: {
            type: 'string',
            example: '1'
        },
        feeInterval: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        feeOnMonthDay: {
            type: 'string',
            example: '01 March'
        },
        freeWithdrawalFrequency: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        maxCap: {
            type: 'number',
            example: 120
        },
        minCap: {
            type: 'number',
            example: 10
        },
        monthDayFormat: {
            type: 'string',
            example: 'dd MMMM'
        },
        name: {
            type: 'string',
            example: 'Loan service fee(changed)'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        penalty: {
            type: 'boolean',
            example: false
        },
        restartCountFrequency: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        taxGroupId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutChargesChargeIdResponse = {
    type: 'object',
    description: 'PutChargesChargeIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutChargesChargeIdRequest'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutClientClientIdAddressesResponse = {
    type: 'object',
    description: 'PutClientClientIdAddressesResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 67
        }
    }
} as const;

export const $PutClientCollateralResponse = {
    type: 'object',
    description: 'PutClientCollateralResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/UpdateClientCollateralRequest'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 12
        }
    }
} as const;

export const $PutClientsClientIdIdentifiersIdentifierIdResponse = {
    type: 'object',
    description: 'PutClientsClientIdIdentifiersIdentifierIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/ClientIdentifierRequest'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $PutClientsClientIdRequest = {
    type: 'object',
    description: 'PutClientsClientIdRequest',
    properties: {
        externalId: {
            type: 'string',
            example: '786444UUUYYH7'
        },
        resourceExternalId: {
            type: 'string',
            example: '123-456'
        }
    }
} as const;

export const $PutClientsClientIdResponse = {
    type: 'object',
    description: 'PutClientsClientIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutClientsClientIdRequest'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceExternalId: {
            type: 'string',
            example: '123-456'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutCodeValueDataResponse = {
    type: 'object',
    description: 'PutCodeValueDataResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutCodeValuechangesSwagger'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $PutCodeValuechangesSwagger = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            example: 'Passport information'
        },
        name: {
            type: 'string',
            example: 'Passport'
        },
        position: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $PutCodeValuesDataRequest = {
    type: 'object',
    description: 'PutCodeValuesDataRequest',
    properties: {
        description: {
            type: 'string',
            example: 'Passport information'
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Passport'
        },
        position: {
            type: 'integer',
            format: 'int32',
            example: 0
        }
    }
} as const;

export const $PutCodesApichangesSwagger = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'MyNewCode(changed)'
        }
    }
} as const;

export const $PutCodesRequest = {
    type: 'object',
    description: 'PutCodesRequest',
    properties: {
        name: {
            type: 'string',
            example: 'MyNewCode(changed)'
        }
    }
} as const;

export const $PutCodesResponse = {
    type: 'object',
    description: 'PutCodesResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutCodesApichangesSwagger'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $PutCollateralProductResponse = {
    type: 'object',
    description: 'PutCollateralProductResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/CollateralProductRequest'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 12
        }
    }
} as const;

export const $PutDataTablesAppTableIdDatatableIdResponse = {
    type: 'object',
    description: 'PutDataTablesAppTableIdDatatableIdResponse ',
    properties: {
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutDataTablesAppTableIdResponse = {
    type: 'object',
    description: 'PutDataTablesAppTableIdResponse',
    properties: {
        changes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutDataTablesRequest = {
    type: 'object',
    description: 'PutDataTablesRequest',
    properties: {
        addColumns: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PutDataTablesRequestAddColumns'
            }
        },
        apptableName: {
            type: 'string',
            example: 'm_client'
        },
        changeColumns: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PutDataTablesRequestChangeColumns'
            }
        },
        dropColumns: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PutDataTablesRequestDropColumns'
            }
        }
    }
} as const;

export const $PutDataTablesRequestAddColumns = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'Gender'
        },
        indexed: {
            type: 'boolean',
            description: 'Defaults to false',
            example: true
        },
        mandatory: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Question'
        },
        type: {
            type: 'string',
            example: 'Dropdown'
        },
        unique: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $PutDataTablesRequestChangeColumns = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'Gender'
        },
        indexed: {
            type: 'boolean',
            description: 'Defaults to false',
            example: true
        },
        mandatory: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Question'
        },
        newCode: {
            type: 'string',
            example: 'Gender2'
        },
        newName: {
            type: 'string',
            example: 'Question 2'
        },
        unique: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const $PutDataTablesRequestDropColumns = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'Gender_cd_Question'
        }
    }
} as const;

export const $PutDataTablesResponse = {
    type: 'object',
    description: 'PutDataTablesResponse',
    properties: {
        resourceIdentifier: {
            type: 'string',
            example: 'extra_client_details'
        }
    }
} as const;

export const $PutDelinquencyBucketResponse = {
    type: 'object',
    description: 'PutDelinquencyBucketResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutDelinquencyRangeResponse = {
    type: 'object',
    description: 'PutDelinquencyRangeResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/DelinquencyRangeRequest'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutEntityTypeEntityIdDocumentsResponse = {
    type: 'object',
    description: 'PutEntityTypeEntityIdDocumentsResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutEntityTypeEntityIdDocumentsResponseChangesSwagger'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        resourceIdentifier: {
            type: 'string',
            example: '3'
        }
    }
} as const;

export const $PutEntityTypeEntityIdDocumentsResponseChangesSwagger = {
    type: 'object'
} as const;

export const $PutExternalAssetOwnerLoanProductAttributeRequest = {
    type: 'object',
    description: 'PutExternalAssetOwnerLoanProductAttributeRequest',
    properties: {
        attributeKey: {
            type: 'string',
            example: 'SETTLEMENT_MODEL'
        },
        attributeValue: {
            type: 'string',
            example: 'DELAYED_SETTLEMENT_DISABLED'
        }
    }
} as const;

export const $PutExternalServiceRequest = {
    type: 'object',
    description: 'PutExternalServiceRequest',
    properties: {
        password: {
            type: 'string',
            example: 'XXXX'
        },
        username: {
            type: 'string',
            example: 'test@mifos.org'
        }
    }
} as const;

export const $PutFinancialActivityAccountsResponse = {
    type: 'object',
    description: 'PutFinancialActivityAccountsResponse',
    properties: {
        comments: {
            '$ref': '#/components/schemas/PutFinancialActivityAccountscommentsSwagger'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutFinancialActivityAccountscommentsSwagger = {
    type: 'object',
    properties: {
        glAccountId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutFixedDepositAccountsAccountIdRequest = {
    type: 'object',
    description: 'PutFixedDepositAccountsAccountIdRequest',
    properties: {
        depositAmount: {
            type: 'number',
            format: 'float',
            example: 6000
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PutFixedDepositAccountsAccountIdResponse = {
    type: 'object',
    description: 'PutFixedDepositAccountsAccountIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutFixedDepositAccountsChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutFixedDepositAccountsChanges = {
    type: 'object',
    properties: {
        depositAmount: {
            type: 'number',
            format: 'float',
            example: 6000
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PutFixedDepositProductsChanges = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            example: 'Fixed deposit product new offerings'
        },
        minDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 5
        }
    }
} as const;

export const $PutFixedDepositProductsProductIdRequest = {
    type: 'object',
    description: 'PutFixedDepositProductsProductIdRequest',
    properties: {
        description: {
            type: 'string',
            example: 'Fixed deposit product new offerings'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        minDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 5
        },
        minDepositTermTypeId: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $PutFixedDepositProductsProductIdResponse = {
    type: 'object',
    description: 'PutFixedDepositProductsProductIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutFixedDepositProductsChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutFloatingRatesChanges = {
    type: 'object',
    properties: {
        ratePeriods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostFloatingRatesRatePeriods'
            },
            uniqueItems: true
        }
    }
} as const;

export const $PutFloatingRatesFloatingRateIdResponse = {
    type: 'object',
    description: 'PutFloatingRatesFloatingRateIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutFloatingRatesChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutFundsFundIdRequest = {
    type: 'object',
    description: 'PutFundsFundIdRequest',
    properties: {
        name: {
            type: 'string',
            example: 'EU Agri Fund (2010-2020)'
        }
    }
} as const;

export const $PutFundsFundIdResponse = {
    type: 'object',
    description: 'PutFundsFundIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutFundsFundIdRequest'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutGLAccountsRequest = {
    type: 'object',
    description: 'PutGLAccountsRequest',
    properties: {
        description: {
            type: 'string',
            example: 'Desc'
        },
        disabled: {
            type: 'boolean',
            example: false
        },
        glCode: {
            type: 'string',
            example: '100001'
        },
        manualEntriesAllowed: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Cash at Bangalore'
        },
        parentId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        tagId: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        type: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        usage: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $PutGLAccountsResponse = {
    type: 'object',
    description: 'PutGLAccountsResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutGLAccountsResponsechangesSwagger'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutGLAccountsResponsechangesSwagger = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'Cash at Bangalore'
        }
    }
} as const;

export const $PutGlClosuresRequest = {
    type: 'object',
    description: 'PutGlClosuresRequest',
    properties: {
        comments: {
            type: 'string',
            example: 'All transactions verified by Johnny Cash'
        }
    }
} as const;

export const $PutGlClosuresResponse = {
    type: 'object',
    description: 'PutGlClosuresResponse',
    properties: {
        comments: {
            type: 'string',
            example: 'All transactions verified by Johnny Cash'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 9
        }
    }
} as const;

export const $PutGlobalConfigurationsRequest = {
    type: 'object',
    description: 'PutGlobalConfigurationsRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        dateValue: {
            type: 'string',
            example: '20 September 2011'
        },
        enabled: {
            type: 'boolean',
            example: true
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        stringValue: {
            type: 'string',
            example: 'random text'
        },
        value: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $PutGlobalConfigurationsResponse = {
    type: 'object',
    description: 'PutGlobalConfigurationsResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutGlobalConfigurationsResponsechangesSwagger'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $PutGlobalConfigurationsResponsechangesSwagger = {
    type: 'object',
    properties: {
        dateValue: {
            type: 'string',
            example: '20 September 2011'
        },
        enabled: {
            type: 'boolean',
            example: true
        },
        stringValue: {
            type: 'string',
            example: 'random text'
        },
        value: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $PutGroupsGroupIdChanges = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'First Group (changed)'
        }
    }
} as const;

export const $PutGroupsGroupIdRequest = {
    type: 'object',
    description: 'PutGroupsGroupIdRequest',
    properties: {
        name: {
            type: 'string',
            example: 'First Group (changed)'
        }
    }
} as const;

export const $PutGroupsGroupIdResponse = {
    type: 'object',
    description: 'PutGroupsGroupIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutGroupsGroupIdChanges'
        },
        groupId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutHolidaysHolidayIdRequest = {
    type: 'object',
    description: 'PutHolidaysHolidayIdRequest',
    properties: {
        description: {
            type: 'string',
            example: 'Holiday for Independence day celebration'
        },
        name: {
            type: 'string',
            example: 'Independence day'
        }
    }
} as const;

export const $PutHolidaysHolidayIdResponse = {
    type: 'object',
    description: 'PutHolidaysHolidayIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutHolidaysHolidayIdResponseChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutHolidaysHolidayIdResponseChanges = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            example: 'Holiday for Independence day celebration'
        },
        name: {
            type: 'string',
            example: 'Independence day'
        }
    }
} as const;

export const $PutHookRequest = {
    type: 'object',
    description: 'PutHookRequest',
    properties: {
        config: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Field'
            }
        },
        displayName: {
            type: 'string',
            example: 'Kremlin'
        },
        events: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Event'
            }
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'Web'
        },
        templateId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutHookResponse = {
    type: 'object',
    description: 'PutHookResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutHookResponseChangesSwagger'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 4
        }
    }
} as const;

export const $PutHookResponseChangesSwagger = {
    type: 'object',
    properties: {
        config: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Field'
            }
        },
        displayName: {
            type: 'string',
            example: 'Kremlin'
        },
        events: {
            type: 'array',
            example: 1,
            items: {
                '$ref': '#/components/schemas/Event'
            }
        }
    }
} as const;

export const $PutInterestRateChartsChartIdChartSlabsChartSlabIdRequest = {
    type: 'object',
    description: 'PutInterestRateChartsChartIdChartSlabsChartSlabIdRequest',
    properties: {
        annualInterestRate: {
            type: 'number',
            format: 'double',
            example: 6
        },
        description: {
            type: 'string',
            example: 'Interest rate changed to 6%'
        }
    }
} as const;

export const $PutInterestRateChartsChartIdChartSlabsChartSlabIdResponse = {
    type: 'object',
    description: 'PutInterestRateChartsChartIdChartSlabsChartSlabIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutInterestRateChartsChartIdChartSlabsChartSlabIdRequest'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutInterestRateChartsChartIdRequest = {
    type: 'object',
    description: 'PutInterestRateChartsChartIdRequest',
    properties: {
        description: {
            type: 'string',
            example: 'Interest rate chart for 2014'
        },
        name: {
            type: 'string',
            example: 'Interest rate chart for 2014'
        }
    }
} as const;

export const $PutInterestRateChartsChartIdResponse = {
    type: 'object',
    description: 'PutInterestRateChartsChartIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutJobsJobIDRequest = {
    type: 'object',
    description: 'PutJobsJobsIDRequest',
    properties: {
        active: {
            type: 'boolean',
            example: false
        },
        cronExpression: {
            type: 'string',
            example: '0 0 22 1/1 * ? *'
        },
        displayName: {
            type: 'string',
            example: 'Update loan Summary'
        }
    }
} as const;

export const $PutLoanChanges = {
    type: 'object',
    properties: {
        locale: {
            type: 'string',
            example: 'en_GB'
        },
        principal: {
            type: 'number',
            format: 'double'
        }
    }
} as const;

export const $PutLoanProductsProductIdRequest = {
    type: 'object',
    description: 'PutLoanProductsProductIdRequest',
    properties: {
        accountMovesOutOfNPAOnlyOnArrearsCompletion: {
            type: 'boolean',
            example: false
        },
        accountingRule: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        allowApprovedDisbursedAmountsOverApplied: {
            type: 'boolean',
            example: true
        },
        allowAttributeOverrides: {
            '$ref': '#/components/schemas/AllowAttributeOverrides'
        },
        allowCompoundingOnEod: {
            type: 'boolean',
            example: false
        },
        allowPartialPeriodInterestCalcualtion: {
            type: 'boolean',
            example: true
        },
        allowVariableInstallments: {
            type: 'boolean',
            example: false
        },
        amortizationType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        buyDownExpenseAccountId: {
            type: 'integer',
            format: 'int64',
            example: 27
        },
        buyDownFeeCalculationType: {
            type: 'string',
            enum: ['FLAT'],
            example: 'FLAT'
        },
        buyDownFeeIncomeType: {
            type: 'string',
            enum: ['FEE', 'INTEREST'],
            example: 'FEE'
        },
        buyDownFeeStrategy: {
            type: 'string',
            enum: ['EQUAL_AMORTIZATION'],
            example: 'EQUAL_AMORTIZATION'
        },
        canDefineInstallmentAmount: {
            type: 'boolean',
            example: true
        },
        canUseForTopup: {
            type: 'boolean',
            example: false
        },
        capitalizedIncomeCalculationType: {
            type: 'string',
            enum: ['FLAT'],
            example: 'FLAT'
        },
        capitalizedIncomeStrategy: {
            type: 'string',
            enum: ['EQUAL_AMORTIZATION'],
            example: 'EQUAL_AMORTIZATION'
        },
        capitalizedIncomeType: {
            type: 'string',
            enum: ['FEE', 'INTEREST'],
            example: 'FEE'
        },
        chargeOffBehaviour: {
            type: 'string',
            example: 'REGULAR'
        },
        chargeOffExpenseAccountId: {
            type: 'integer',
            format: 'int64',
            example: 12
        },
        chargeOffFraudExpenseAccountId: {
            type: 'integer',
            format: 'int64',
            example: 13
        },
        chargeOffReasonToExpenseAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PostChargeOffReasonToExpenseAccountMappings'
            }
        },
        charges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductChargeData'
            }
        },
        closeDate: {
            type: 'string',
            example: '10 July 2022'
        },
        creditAllocation: {
            type: 'array',
            example: [],
            items: {
                '$ref': '#/components/schemas/CreditAllocationData'
            }
        },
        currencyCode: {
            type: 'string',
            example: 'USD'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        daysInMonthType: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        daysInYearCustomStrategy: {
            type: 'string',
            example: 'FULL_LEAP_YEAR'
        },
        daysInYearType: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        deferredIncomeLiabilityAccountId: {
            type: 'integer',
            format: 'int64',
            example: 25
        },
        delinquencyBucketId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        description: {
            type: 'string',
            example: 'non-interest bearing product'
        },
        digitsAfterDecimal: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        disallowExpectedDisbursements: {
            type: 'boolean',
            example: true
        },
        disallowInterestCalculationOnPastDue: {
            type: 'boolean',
            example: false
        },
        disbursedAmountPercentageForDownPayment: {
            type: 'number',
            example: 5.5
        },
        dueDaysForRepaymentEvent: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        enableAccrualActivityPosting: {
            type: 'boolean',
            example: false
        },
        enableAutoRepaymentForDownPayment: {
            type: 'boolean',
            example: false
        },
        enableBuyDownFee: {
            type: 'boolean',
            example: false
        },
        enableDownPayment: {
            type: 'boolean',
            example: false
        },
        enableIncomeCapitalization: {
            type: 'boolean',
            example: false
        },
        enableInstallmentLevelDelinquency: {
            type: 'boolean',
            example: false
        },
        feeToIncomeAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductChargeToGLAccountMapper'
            }
        },
        fixedLength: {
            type: 'integer',
            format: 'int32'
        },
        fixedPrincipalPercentagePerInstallment: {
            type: 'number',
            example: 5.5
        },
        fundId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        fundSourceAccountId: {
            type: 'integer',
            format: 'int64',
            example: 4
        },
        goodwillCreditAccountId: {
            type: 'integer',
            format: 'int64',
            example: 48
        },
        graceOnArrearsAgeing: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        graceOnInterestPayment: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        graceOnPrincipalPayment: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        holdGuaranteeFunds: {
            type: 'boolean',
            example: false
        },
        inArrearsTolerance: {
            type: 'integer',
            format: 'int32',
            example: 90
        },
        inMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        includeInBorrowerCycle: {
            type: 'boolean',
            example: false
        },
        incomeFromBuyDownAccountId: {
            type: 'integer',
            format: 'int64',
            example: 38
        },
        incomeFromCapitalizationAccountId: {
            type: 'integer',
            format: 'int64',
            example: 37
        },
        incomeFromChargeOffFeesAccountId: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        incomeFromChargeOffInterestAccountId: {
            type: 'integer',
            format: 'int64',
            example: 20
        },
        incomeFromChargeOffPenaltyAccountId: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        incomeFromFeeAccountId: {
            type: 'integer',
            format: 'int64',
            example: 37
        },
        incomeFromGoodwillCreditFeesAccountId: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        incomeFromGoodwillCreditInterestAccountId: {
            type: 'integer',
            format: 'int64',
            example: 20
        },
        incomeFromGoodwillCreditPenaltyAccountId: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        incomeFromPenaltyAccountId: {
            type: 'integer',
            format: 'int64',
            example: 35
        },
        incomeFromRecoveryAccountId: {
            type: 'integer',
            format: 'int64',
            example: 15
        },
        installmentAmountInMultiplesOf: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestCalculationPeriodType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestOnLoanAccountId: {
            type: 'integer',
            format: 'int64',
            example: 34
        },
        interestRateFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        interestRatePerPeriod: {
            type: 'number',
            format: 'double',
            example: 1.75
        },
        interestRateVariationsForBorrowerCycle: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        interestRecalculationCompoundingMethod: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestRecognitionOnDisbursementDate: {
            type: 'boolean',
            example: false
        },
        interestType: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        isArrearsBasedOnOriginalSchedule: {
            type: 'boolean',
            example: false
        },
        isCompoundingToBePostedAsTransaction: {
            type: 'boolean',
            example: false
        },
        isEqualAmortization: {
            type: 'boolean',
            example: false
        },
        isInterestRecalculationEnabled: {
            type: 'boolean',
            example: false
        },
        isLinkedToFloatingInterestRates: {
            type: 'boolean',
            example: false
        },
        loanPortfolioAccountId: {
            type: 'integer',
            format: 'int64',
            example: 8
        },
        loanScheduleProcessingType: {
            type: 'string',
            example: 'HORIZONTAL'
        },
        loanScheduleType: {
            type: 'string',
            example: 'CUMULATIVE'
        },
        locale: {
            type: 'string',
            example: 'en_GB'
        },
        maxInterestRatePerPeriod: {
            type: 'number',
            format: 'double',
            example: 23.4
        },
        maxNumberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        maxPrincipal: {
            type: 'number',
            format: 'double',
            example: 15000
        },
        maxTrancheCount: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        merchantBuyDownFee: {
            type: 'boolean',
            example: false
        },
        minInterestRatePerPeriod: {
            type: 'number',
            format: 'double',
            example: 0
        },
        minNumberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        minPrincipal: {
            type: 'number',
            format: 'double',
            example: 5000
        },
        minimumDaysBetweenDisbursalAndFirstRepayment: {
            type: 'integer',
            format: 'int32',
            example: 30
        },
        multiDisburseLoan: {
            type: 'boolean',
            example: true
        },
        name: {
            type: 'string',
            example: 'LP Accrual Accounting'
        },
        numberOfRepaymentVariationsForBorrowerCycle: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 12
        },
        outstandingLoanBalance: {
            type: 'number',
            format: 'double',
            example: 36000
        },
        overAppliedCalculationType: {
            type: 'string',
            example: 'percentage'
        },
        overAppliedNumber: {
            type: 'integer',
            format: 'int32',
            example: 50
        },
        overDueDaysForRepaymentEvent: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        overdueDaysForNPA: {
            type: 'integer',
            format: 'int32',
            example: 179
        },
        overpaymentLiabilityAccountId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        paymentAllocation: {
            type: 'array',
            example: [],
            items: {
                '$ref': '#/components/schemas/AdvancedPaymentData'
            }
        },
        paymentChannelToFundSourceMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetLoanPaymentChannelToFundSourceMappings'
            }
        },
        penaltyToIncomeAccountMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductChargeToGLAccountMapper'
            }
        },
        preClosureInterestCalculationStrategy: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        principal: {
            type: 'number',
            format: 'double',
            example: 10000
        },
        principalThresholdForLastInstallment: {
            type: 'integer',
            format: 'int32',
            example: 50
        },
        principalVariationsForBorrowerCycle: {
            type: 'array',
            example: [],
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        rates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateData'
            }
        },
        recalculationCompoundingFrequencyInterval: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recalculationCompoundingFrequencyOnDayType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recalculationCompoundingFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recalculationRestFrequencyInterval: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        recalculationRestFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 50
        },
        receivableFeeAccountId: {
            type: 'integer',
            format: 'int64',
            example: 11
        },
        receivableInterestAccountId: {
            type: 'integer',
            format: 'int64',
            example: 9
        },
        receivablePenaltyAccountId: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        repaymentEvery: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        repaymentFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        repaymentStartDateType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        rescheduleStrategyMethod: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        shortName: {
            type: 'string',
            example: 'LPAA'
        },
        startDate: {
            type: 'string',
            example: '10 July 2022'
        },
        supportedInterestRefundTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        transactionProcessingStrategyCode: {
            type: 'string',
            example: 'mifos-standard-strategy'
        },
        transfersInSuspenseAccountId: {
            type: 'integer',
            format: 'int64',
            example: 5
        },
        useBorrowerCycle: {
            type: 'boolean',
            example: false
        },
        writeOffAccountId: {
            type: 'integer',
            format: 'int64',
            example: 41
        }
    }
} as const;

export const $PutLoanProductsProductIdResponse = {
    type: 'object',
    description: 'PutLoanProductsProductIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutLoanChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutLoansApprovedAmountChanges = {
    type: 'object',
    description: 'PutLoansApprovedAmountChanges',
    properties: {
        locale: {
            type: 'string',
            example: 'en_GB'
        },
        newApprovedAmount: {
            type: 'number',
            example: 1000
        },
        oldApprovedAmount: {
            type: 'number',
            example: 1000
        }
    }
} as const;

export const $PutLoansApprovedAmountRequest = {
    type: 'object',
    description: 'PutLoansApprovedAmountRequest',
    properties: {
        amount: {
            type: 'number',
            example: 1000
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PutLoansApprovedAmountResponse = {
    type: 'object',
    description: 'PutLoansApprovedAmountResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutLoansApprovedAmountChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 6
        },
        groupId: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        resourceExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $PutLoansAvailableDisbursementAmountChanges = {
    type: 'object',
    description: 'PutLoansAvailableDisbursementAmountChanges',
    properties: {
        locale: {
            type: 'string',
            example: 'en_GB'
        },
        newApprovedAmount: {
            type: 'number',
            example: 1000
        },
        newAvailableDisbursementAmount: {
            type: 'number',
            example: 1000
        },
        oldApprovedAmount: {
            type: 'number',
            example: 1000
        },
        oldAvailableDisbursementAmount: {
            type: 'number',
            example: 1000
        }
    }
} as const;

export const $PutLoansAvailableDisbursementAmountRequest = {
    type: 'object',
    description: 'PutLoansAvailableDisbursementAmountRequest',
    properties: {
        amount: {
            type: 'number',
            example: 1000
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PutLoansAvailableDisbursementAmountResponse = {
    type: 'object',
    description: 'PutLoansAvailableDisbursementAmountResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutLoansAvailableDisbursementAmountChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 6
        },
        groupId: {
            type: 'integer',
            format: 'int64',
            example: 10
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        resourceExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $PutLoansLoanIdChanges = {
    type: 'object',
    properties: {
        fraud: {
            type: 'boolean',
            example: false
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        principal: {
            type: 'integer',
            format: 'int64',
            example: 5000
        }
    }
} as const;

export const $PutLoansLoanIdChargesChargeIdRequest = {
    type: 'object',
    description: ' PutLoansLoanIdChargesChargeIdRequest',
    properties: {
        amount: {
            type: 'number',
            format: 'double',
            example: 60
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        dueDate: {
            type: 'string',
            example: '27 March 2013'
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PutLoansLoanIdChargesChargeIdResponse = {
    type: 'object',
    description: 'PutLoansLoanIdChargesChargeIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutLoansLoanIdChargesChargeIdRequest'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 6
        }
    }
} as const;

export const $PutLoansLoanIdCollateral = {
    type: 'object',
    properties: {
        clientCollateralId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        quantity: {
            type: 'number',
            example: 1
        }
    }
} as const;

export const $PutLoansLoanIdCollateralsCollateralIdResponse = {
    type: 'object',
    description: 'PutLoansLoanIdCollateralsCollateralIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/LoansLoanIdCollateralsRequest'
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 12
        }
    }
} as const;

export const $PutLoansLoanIdDisbursementData = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        expectedDisbursementDate: {
            type: 'string'
        },
        interestType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        isEqualAmortization: {
            type: 'boolean',
            example: true
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        netDisbursalAmount: {
            type: 'number',
            example: 1
        },
        principal: {
            type: 'number',
            example: 1
        }
    }
} as const;

export const $PutLoansLoanIdRequest = {
    type: 'object',
    description: 'PutLoansLoanIdRequest',
    properties: {
        amortizationType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        charges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PutLoansLoanIdChanges'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        collateral: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PutLoansLoanIdCollateral'
            }
        },
        createStandingInstructionAtDisbursement: {
            type: 'boolean',
            example: true
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        disbursedAmountPercentageForDownPayment: {
            type: 'number',
            example: 0
        },
        disbursementData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PutLoansLoanIdDisbursementData'
            }
        },
        enableAutoRepaymentForDownPayment: {
            type: 'boolean',
            example: false
        },
        enableDownPayment: {
            type: 'boolean',
            example: false
        },
        enableInstallmentLevelDelinquency: {
            type: 'boolean',
            example: false
        },
        expectedDisbursementDate: {
            type: 'string',
            example: '04 March 2014'
        },
        fixedLength: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        fixedPrincipalPercentagePerInstallment: {
            type: 'number',
            example: 5.5
        },
        fraud: {
            type: 'boolean',
            example: true
        },
        graceOnArrearsAgeing: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        interestCalculationPeriodType: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        interestChargedFromDate: {
            type: 'string'
        },
        interestRateFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 3
        },
        interestRatePerPeriod: {
            type: 'number',
            example: 2
        },
        interestRecognitionOnDisbursementDate: {
            type: 'boolean',
            example: false
        },
        interestType: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        isEqualAmortization: {
            type: 'boolean',
            example: true
        },
        isTopup: {
            type: 'boolean',
            example: true
        },
        linkAccountId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanIdToClose: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanScheduleProcessingType: {
            type: 'string',
            example: 'HORIZONTAL'
        },
        loanTermFrequency: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        loanTermFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        loanType: {
            type: 'string',
            example: 'individual'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        maxOutstandingLoanBalance: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        principal: {
            type: 'integer',
            format: 'int64',
            example: 5000
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        repaymentEvery: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        repaymentFrequencyDayOfWeekType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        repaymentFrequencyNthDayType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        repaymentFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        repaymentsStartingFromDate: {
            type: 'string'
        },
        submittedOnDate: {
            type: 'string'
        },
        transactionProcessingStrategyCode: {
            type: 'string',
            example: 'mifos-standard-strategy'
        }
    }
} as const;

export const $PutLoansLoanIdResponse = {
    type: 'object',
    description: 'PutLoansLoanIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutLoansLoanIdChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        resourceExternalId: {
            type: 'string',
            example: '95174ff9-1a75-4d72-a413-6f9b1cb988b7'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutNotesChanges = {
    type: 'object',
    properties: {
        note: {
            type: 'string',
            example: 'a note about the client'
        }
    }
} as const;

export const $PutOfficesOfficeIdRequest = {
    type: 'object',
    description: 'PutOfficesOfficeIdRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        externalId: {
            type: 'string',
            example: 'SYS54-88'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'Name is updated'
        },
        openingDate: {
            type: 'string',
            example: '01 July 2007'
        }
    }
} as const;

export const $PutOfficesOfficeIdResponse = {
    type: 'object',
    description: 'PutOfficesOfficeIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutOfficesOfficeIdResponseChanges'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 3
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 3
        }
    }
} as const;

export const $PutOfficesOfficeIdResponseChanges = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'Name is updated'
        }
    }
} as const;

export const $PutPasswordPreferencesTemplateRequest = {
    type: 'object',
    description: 'PutPasswordPreferencesTemplateRequest',
    properties: {
        validationPolicyId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutPaymentTypesPaymentTypeIdRequest = {
    type: 'object',
    description: 'PutPaymentTypesPaymentTypeIdRequest',
    properties: {
        codeName: {
            type: 'string',
            example: 'REPAYMENT_REFUND'
        },
        description: {
            type: 'string',
            example: 'not a cash payment type'
        },
        isCashPayment: {
            type: 'boolean',
            example: false
        },
        isSystemDefined: {
            type: 'boolean',
            example: false
        },
        name: {
            type: 'string',
            example: 'mPay'
        },
        position: {
            type: 'integer',
            format: 'int32',
            example: 3
        }
    }
} as const;

export const $PutPaymentTypesPaymentTypeIdResponse = {
    type: 'object',
    description: 'PutPaymentTypesPaymentTypeIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 13
        }
    }
} as const;

export const $PutPermissionsRequest = {
    type: 'object',
    description: 'PutPermissionsRequest',
    properties: {
        permissions: {
            type: 'object',
            additionalProperties: {
                type: 'boolean',
                example: false
            },
            example: `"CREATE_GUARANTOR":true,
    "CREATE_CLIENT":true`
        }
    }
} as const;

export const $PutProductsChanges = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            example: 'Share Product Description.'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        unitPrice: {
            type: 'number',
            format: 'double',
            example: 5
        }
    }
} as const;

export const $PutProductsTypeProductIdRequest = {
    type: 'object',
    description: 'PutProductsTypeProductIdRequest',
    properties: {
        description: {
            type: 'string',
            example: 'Share Product Description.'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        unitPrice: {
            type: 'number',
            format: 'double',
            example: 5
        }
    }
} as const;

export const $PutProductsTypeProductIdResponse = {
    type: 'object',
    description: 'PutProductsTypeProductIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutProductsChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutProvisioningCriteriaRequest = {
    type: 'object',
    description: 'PutProvisioningCriteriaRequest',
    properties: {
        criteriaName: {
            type: 'string',
            example: 'High Risk Products Criteria'
        },
        loanProducts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoanProductData'
            }
        },
        provisioningcriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProvisioningCriteriaDefinitionData'
            }
        }
    }
} as const;

export const $PutProvisioningCriteriaResponse = {
    type: 'object',
    description: 'PutProvisioningCriteriaResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutProvisioningCriteriaResponseChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutProvisioningCriteriaResponseChanges = {
    type: 'object',
    properties: {
        criteriaName: {
            type: 'string',
            example: 'High Risk Products Criteria'
        }
    }
} as const;

export const $PutProvisioningEntriesRequest = {
    type: 'object',
    description: 'PutProvisioningEntriesRequest',
    properties: {
        command: {
            type: 'string',
            example: 'recreateprovisioningentry'
        }
    }
} as const;

export const $PutProvisioningEntriesResponse = {
    type: 'object',
    description: 'PutProvisioningEntriesResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutRecurringDepositAccountsAccountIdRequest = {
    type: 'object',
    description: 'PutRecurringDepositAccountsAccountIdRequest',
    properties: {
        depositAmount: {
            type: 'integer',
            format: 'int32',
            example: 6000
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PutRecurringDepositAccountsAccountIdResponse = {
    type: 'object',
    description: 'PutRecurringDepositAccountsAccountIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutRecurringDepositAccountsChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutRecurringDepositAccountsChanges = {
    type: 'object',
    properties: {
        depositAmount: {
            type: 'integer',
            format: 'int32',
            example: 6000
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PutRecurringDepositProductsChanges = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            example: 'Recurring deposit product new offerings'
        },
        minDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 5
        }
    }
} as const;

export const $PutRecurringDepositProductsRequest = {
    type: 'object',
    description: 'PutRecurringDepositProductsRequest',
    properties: {
        description: {
            type: 'string',
            example: 'Recurring deposit product new offerings'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        minDepositTerm: {
            type: 'integer',
            format: 'int32',
            example: 5
        },
        minDepositTermTypeId: {
            type: 'integer',
            format: 'int32',
            example: 1
        }
    }
} as const;

export const $PutRecurringDepositProductsResponse = {
    type: 'object',
    description: 'PutRecurringDepositProductsResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutRecurringDepositProductsChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutReportMailingJobsRequest = {
    type: 'object',
    description: 'PutReportMailingJobsRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd-MM-yyyy HH:mm:ss'
        },
        locale: {
            type: 'string',
            example: 'en_GB'
        },
        startDateTime: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $PutReportMailingJobsResponse = {
    type: 'object',
    description: 'PutReportMailingJobsResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutReportMailingJobsResponseChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutReportMailingJobsResponseChanges = {
    type: 'object',
    properties: {
        startDateTime: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $PutReportRequest = {
    type: 'object',
    description: 'PutReportRequest',
    properties: {
        reportName: {
            type: 'string',
            example: 'Completely New Report'
        },
        reportParameters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReportParameterData'
            }
        }
    }
} as const;

export const $PutReportResponse = {
    type: 'object',
    description: 'PutReportResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutReportResponseChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 132
        }
    }
} as const;

export const $PutReportResponseChanges = {
    type: 'object',
    properties: {
        reportName: {
            type: 'string',
            example: 'Changed New Report'
        },
        reportParameters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReportParameterData'
            }
        }
    }
} as const;

export const $PutResourceTypeResourceIdNotesNoteIdResponse = {
    type: 'object',
    description: 'PutResourceTypeResourceIdNotesNoteIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutNotesChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 76
        }
    }
} as const;

export const $PutRolesRoleIdPermissionsRequest = {
    type: 'object',
    description: 'PutRolesRoleIdPermissionsRequest',
    properties: {
        permissions: {
            type: 'object',
            additionalProperties: {
                type: 'boolean',
                example: false
            },
            example: `"CREATE_GUARANTOR":true,
    "CREATE_CLIENT":true`
        }
    }
} as const;

export const $PutRolesRoleIdPermissionsResponse = {
    type: 'object',
    description: 'PutRolesRoleIdPermissionsResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutRolesRoleIdPermissionsResponsePermissionsChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 8
        }
    }
} as const;

export const $PutRolesRoleIdPermissionsResponsePermissionsChanges = {
    type: 'object',
    properties: {
        permissions: {
            type: 'object',
            additionalProperties: {
                type: 'boolean',
                example: false
            },
            example: `"CREATE_GUARANTOR":true,
    "CREATE_CLIENT":true`
        }
    }
} as const;

export const $PutRolesRoleIdRequest = {
    type: 'object',
    description: 'PutRolesRoleIdRequest',
    properties: {
        description: {
            type: 'string',
            example: 'some description(changed)'
        }
    }
} as const;

export const $PutRolesRoleIdResponse = {
    type: 'object',
    description: 'PutRolesRoleIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutRolesRoleIdResponseChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutRolesRoleIdResponseChanges = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            example: 'some description(changed)'
        }
    }
} as const;

export const $PutSavingsAccountsAccountIdRequest = {
    type: 'object',
    description: 'PutSavingsAccountsAccountIdRequest',
    properties: {
        locale: {
            type: 'string',
            example: 'en'
        },
        nominalAnnualInterestRate: {
            type: 'number',
            format: 'double',
            example: 5.9999999999
        }
    }
} as const;

export const $PutSavingsAccountsAccountIdResponse = {
    type: 'object',
    description: 'PutSavingsAccountsAccountIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutSavingsAccountsChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutSavingsAccountsChanges = {
    type: 'object',
    properties: {
        locale: {
            type: 'string',
            example: 'en'
        },
        nominalAnnualInterestRate: {
            type: 'number',
            format: 'double',
            example: 5.9999999999
        }
    }
} as const;

export const $PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest = {
    type: 'object',
    description: 'PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest',
    properties: {
        amount: {
            type: 'number',
            format: 'float',
            example: 60
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        dueDate: {
            type: 'string',
            example: '27 March 2013'
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse = {
    type: 'object',
    description: 'PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutSavingsChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 6
        },
        savingsId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutSavingsChanges = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            example: 'Passbook Savings Lite.'
        },
        interestRate: {
            type: 'number',
            format: 'double',
            example: 5.73
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PutSavingsProductsProductIdRequest = {
    type: 'object',
    description: 'PutSavingsProductsProductIdRequest',
    properties: {
        description: {
            type: 'string',
            example: 'Passbook Savings Lite.'
        },
        interestRate: {
            type: 'number',
            format: 'double',
            example: 5.73
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PutSavingsProductsProductIdResponse = {
    type: 'object',
    description: 'PutSavingsProductsProductIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutSavingsChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutSelfBeneficiariesChanges = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'Client22'
        },
        transferLimit: {
            type: 'integer',
            format: 'int32',
            example: 1000
        }
    }
} as const;

export const $PutSelfBeneficiariesTPTBeneficiaryIdRequest = {
    type: 'object',
    description: 'PutSelfBeneficiariesTPTBeneficiaryIdRequest',
    properties: {
        name: {
            type: 'string',
            example: 'beneficiary nick name'
        },
        transferLimit: {
            type: 'integer',
            format: 'int32',
            example: 1000
        }
    }
} as const;

export const $PutSelfBeneficiariesTPTBeneficiaryIdResponse = {
    type: 'object',
    description: 'PutSelfBeneficiariesTPTBeneficiaryIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutSelfBeneficiariesChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 5
        }
    }
} as const;

export const $PutSelfLoansChanges = {
    type: 'object',
    properties: {
        locale: {
            type: 'string',
            example: 'en'
        },
        principal: {
            type: 'integer',
            format: 'int64',
            example: 5000
        }
    }
} as const;

export const $PutSelfLoansLoanIdRequest = {
    type: 'object',
    description: 'PutSelfLoansLoanIdRequest',
    properties: {
        amortizationType: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        expectedDisbursementDate: {
            type: 'string',
            example: '04 March 2014'
        },
        interestCalculationPeriodType: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        interestRatePerPeriod: {
            type: 'integer',
            format: 'int32',
            example: 2
        },
        interestType: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        loanTermFrequency: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        loanTermFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        numberOfRepayments: {
            type: 'integer',
            format: 'int32',
            example: 10
        },
        principal: {
            type: 'integer',
            format: 'int64',
            example: 5000
        },
        productId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        repaymentEvery: {
            type: 'integer',
            format: 'int32',
            example: 1
        },
        repaymentFrequencyType: {
            type: 'integer',
            format: 'int32',
            example: 0
        },
        transactionProcessingStrategyCode: {
            type: 'string',
            example: 'mifos-standard-strategy'
        }
    }
} as const;

export const $PutSelfLoansLoanIdResponse = {
    type: 'object',
    description: 'PutSelfLoansLoanIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutSelfLoansChanges'
        },
        clientId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        loanId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutSelfUserChanges = {
    type: 'object',
    properties: {
        passwordEncoded: {
            type: 'string',
            example: '6a72a630795be86fe926ce540fc45b6b922fe5ba130f185fe806a26b5e5efcdd'
        }
    }
} as const;

export const $PutSelfUserRequest = {
    type: 'object',
    description: 'PutSelfUserRequest',
    properties: {
        password: {
            type: 'string',
            example: 'Abcd1234'
        },
        repeatPassword: {
            type: 'string',
            example: 'Abcd1234'
        }
    }
} as const;

export const $PutSelfUserResponse = {
    type: 'object',
    description: 'PutSelfUserResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutSelfUserChanges'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 6
        }
    }
} as const;

export const $PutStaffRequest = {
    type: 'object',
    description: 'PutStaffRequest',
    properties: {
        externalId: {
            type: 'string',
            example: '17Hbb'
        },
        isLoanOfficer: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $PutStandingInstructionsStandingInstructionIdResponse = {
    type: 'object',
    description: 'PutStandingInstructionsStandingInstructionIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutUpdateStandingInstructionChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 20
        }
    }
} as const;

export const $PutTaxesComponentsChanges = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'tax component 2'
        },
        percentage: {
            type: 'number',
            format: 'float',
            example: 15
        },
        startDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $PutTaxesComponentsTaxComponentIdRequest = {
    type: 'object',
    description: 'PutTaxesComponentsTaxComponentIdRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'tax component 2'
        },
        percentage: {
            type: 'number',
            format: 'float',
            example: 15
        },
        startDate: {
            type: 'string',
            example: '15 April 2016'
        }
    }
} as const;

export const $PutTaxesComponentsTaxComponentIdResponse = {
    type: 'object',
    description: 'PutTaxesComponentsTaxComponentIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutTaxesComponentsChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutTaxesGroupChanges = {
    type: 'object',
    properties: {
        addComponents: {
            type: 'array',
            example: [6],
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        modifiedComponents: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PutTaxesGroupModifiedComponents'
            },
            uniqueItems: true
        },
        name: {
            type: 'string',
            example: 'tax group 2'
        }
    }
} as const;

export const $PutTaxesGroupModifiedComponents = {
    type: 'object',
    properties: {
        endDate: {
            type: 'string',
            example: 'Apr 22, 2016 12:00:00 AM'
        },
        taxComponentId: {
            type: 'integer',
            format: 'int64',
            example: 7
        }
    }
} as const;

export const $PutTaxesGroupTaxComponents = {
    type: 'object',
    properties: {
        endDate: {
            type: 'string',
            example: '22 April 2016'
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 7
        },
        taxComponentId: {
            type: 'integer',
            format: 'int64',
            example: 7
        }
    }
} as const;

export const $PutTaxesGroupTaxGroupIdRequest = {
    type: 'object',
    description: 'PutTaxesGroupTaxGroupIdRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'tax group 2'
        },
        taxComponents: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PutTaxesGroupTaxComponents'
            },
            uniqueItems: true
        }
    }
} as const;

export const $PutTaxesGroupTaxGroupIdResponse = {
    type: 'object',
    description: 'PutTaxesGroupTaxGroupIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutTaxesGroupChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 7
        }
    }
} as const;

export const $PutTellersRequest = {
    type: 'object',
    description: 'PutTellersRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd-MM-yyyy'
        },
        description: {
            type: 'string',
            example: 'teller cash handling'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'Teller3'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        status: {
            type: 'string',
            enum: ['INVALID', 'PENDING', 'ACTIVE', 'INACTIVE', 'CLOSED'],
            example: 'ACTIVE'
        }
    }
} as const;

export const $PutTellersResponse = {
    type: 'object',
    description: 'PutTellersResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutTellersResponseChanges'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 5
        }
    }
} as const;

export const $PutTellersResponseChanges = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd-MM-yyyy'
        },
        description: {
            type: 'string',
            example: 'teller cash handling'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        startDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $PutTellersTellerIdCashiersCashierIdRequest = {
    type: 'object',
    description: 'PutTellersTellerIdCashiersCashierIdRequest',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd-MM-yyyy'
        },
        description: {
            type: 'string',
            example: 'Cashier updated.'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        isFullDay: {
            type: 'boolean',
            example: true
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        staffId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        startDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $PutTellersTellerIdCashiersCashierIdResponse = {
    type: 'object',
    description: 'PutTellersTellerIdCashiersCashierIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutTellersTellerIdCashiersCashierIdResponseChanges'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        subResourceId: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $PutTellersTellerIdCashiersCashierIdResponseChanges = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd-MM-yyyy'
        },
        description: {
            type: 'string',
            example: 'Cashier updated.'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        locale: {
            type: 'string',
            example: 'en'
        }
    }
} as const;

export const $PutTemplatesTemplateIdRequest = {
    type: 'object',
    description: 'PutTemplatesTemplateIdRequest',
    properties: {
        entity: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        mappers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TemplateMapper'
            }
        },
        name: {
            type: 'string',
            example: 'Text'
        },
        text: {
            type: 'string',
            example: 'This is a loan for {{loan.clientName}}'
        },
        type: {
            type: 'integer',
            format: 'int64',
            example: 0
        }
    }
} as const;

export const $PutTemplatesTemplateIdResponse = {
    type: 'object',
    description: 'PutTemplatesTemplateIdResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutUpdateStandingInstructionChanges = {
    type: 'object',
    properties: {
        recurrenceInterval: {
            type: 'integer',
            format: 'int32',
            example: 2
        }
    }
} as const;

export const $PutUsersUserIdRequest = {
    type: 'object',
    description: 'PutUsersUserIdRequest',
    properties: {
        clients: {
            type: 'array',
            example: [2, 3],
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        email: {
            type: 'string',
            example: 'whatever@mifos.org'
        },
        firstname: {
            type: 'string',
            example: 'Test'
        },
        isSelfServiceUser: {
            type: 'boolean',
            example: true
        },
        lastname: {
            type: 'string',
            example: 'User'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        password: {
            type: 'string',
            example: 'password'
        },
        repeatPassword: {
            type: 'string',
            example: 'repeatPassword'
        },
        roles: {
            type: 'array',
            example: [2, 3],
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        sendPasswordToEmail: {
            type: 'boolean',
            example: true
        },
        staffId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $PutUsersUserIdResponse = {
    type: 'object',
    description: 'PutUsersUserIdResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/PutUsersUserIdResponseChanges'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 11
        }
    }
} as const;

export const $PutUsersUserIdResponseChanges = {
    type: 'object',
    properties: {
        firstname: {
            type: 'string',
            example: 'Test'
        }
    }
} as const;

export const $PutWorkingDaysRequest = {
    type: 'object',
    description: 'PutWorkingDaysRequest',
    properties: {
        extendTermForDailyRepayments: {
            type: 'boolean',
            example: true
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        recurrence: {
            type: 'string',
            example: 'FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,TU,WE,TH,FR'
        },
        repaymentRescheduleType: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;

export const $PutWorkingDaysResponse = {
    type: 'object',
    description: 'PutWorkingDaysResponse',
    properties: {
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $Question = {
    type: 'object',
    properties: {
        componentKey: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        key: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        responses: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Response'
            }
        },
        sequenceNo: {
            type: 'integer',
            format: 'int32'
        },
        survey: {
            '$ref': '#/components/schemas/Survey'
        },
        text: {
            type: 'string'
        }
    }
} as const;

export const $QuestionData = {
    type: 'object',
    properties: {
        componentKey: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        key: {
            type: 'string'
        },
        responseDatas: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResponseData'
            }
        },
        sequenceNo: {
            type: 'integer',
            format: 'int32'
        },
        text: {
            type: 'string'
        }
    }
} as const;

export const $Rate = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean'
        },
        approveUser: {
            '$ref': '#/components/schemas/AppUser'
        },
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        percentage: {
            type: 'number'
        },
        productApply: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $RateData = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        percentage: {
            type: 'number'
        },
        productApply: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;

export const $RateRequest = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean'
        },
        locale: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        percentage: {
            type: 'number'
        },
        productApply: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $RepaymentPeriod = {
    type: 'object',
    properties: {
        calculatedDueInterest: {
            '$ref': '#/components/schemas/Money'
        },
        calculatedDuePrincipal: {
            '$ref': '#/components/schemas/Money'
        },
        capitalizedIncomePrincipal: {
            '$ref': '#/components/schemas/Money'
        },
        creditedAmounts: {
            '$ref': '#/components/schemas/Money'
        },
        creditedInterest: {
            '$ref': '#/components/schemas/Money'
        },
        creditedPrincipal: {
            '$ref': '#/components/schemas/Money'
        },
        currency: {
            '$ref': '#/components/schemas/MonetaryCurrency'
        },
        dueDate: {
            type: 'string',
            format: 'date'
        },
        dueInterest: {
            '$ref': '#/components/schemas/Money'
        },
        duePrincipal: {
            '$ref': '#/components/schemas/Money'
        },
        emi: {
            '$ref': '#/components/schemas/Money'
        },
        emiPlusCreditedAmountsPlusFutureUnrecognizedInterest: {
            '$ref': '#/components/schemas/Money'
        },
        firstInterestPeriod: {
            '$ref': '#/components/schemas/InterestPeriod'
        },
        firstRepaymentPeriod: {
            type: 'boolean'
        },
        fromDate: {
            type: 'string',
            format: 'date'
        },
        fullyPaid: {
            type: 'boolean'
        },
        futureUnrecognizedInterest: {
            '$ref': '#/components/schemas/Money'
        },
        initialBalanceForEmiRecalculation: {
            '$ref': '#/components/schemas/Money'
        },
        interestMoved: {
            type: 'boolean'
        },
        interestPeriods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InterestPeriod'
            }
        },
        lastInterestPeriod: {
            '$ref': '#/components/schemas/InterestPeriod'
        },
        loanProductRelatedDetail: {
            '$ref': '#/components/schemas/LoanProductMinimumRepaymentScheduleRelatedDetail'
        },
        mc: {
            type: 'object',
            properties: {
                precision: {
                    type: 'integer',
                    format: 'int32'
                },
                roundingMode: {
                    type: 'string',
                    enum: ['UP', 'DOWN', 'CEILING', 'FLOOR', 'HALF_UP', 'HALF_DOWN', 'HALF_EVEN', 'UNNECESSARY']
                }
            }
        },
        originalEmi: {
            '$ref': '#/components/schemas/Money'
        },
        outstandingInterest: {
            '$ref': '#/components/schemas/Money'
        },
        outstandingLoanBalance: {
            '$ref': '#/components/schemas/Money'
        },
        outstandingPrincipal: {
            '$ref': '#/components/schemas/Money'
        },
        paidInterest: {
            '$ref': '#/components/schemas/Money'
        },
        paidPrincipal: {
            '$ref': '#/components/schemas/Money'
        },
        previous: {
            '$ref': '#/components/schemas/RepaymentPeriod'
        },
        rateFactorPlus1: {
            type: 'number'
        },
        totalCapitalizedIncomeAmount: {
            '$ref': '#/components/schemas/Money'
        },
        totalCreditedAmount: {
            '$ref': '#/components/schemas/Money'
        },
        totalDisbursedAmount: {
            '$ref': '#/components/schemas/Money'
        },
        totalPaidAmount: {
            '$ref': '#/components/schemas/Money'
        },
        unrecognizedInterest: {
            '$ref': '#/components/schemas/Money'
        },
        zero: {
            '$ref': '#/components/schemas/Money'
        }
    },
    required: ['calculatedDueInterest']
} as const;

export const $RepaymentTransactionRequest = {
    type: 'object',
    properties: {
        accountNumber: {
            type: 'string'
        },
        bankNumber: {
            type: 'string'
        },
        checkNumber: {
            type: 'string'
        },
        loanId: {
            type: 'integer',
            format: 'int64'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int64'
        },
        receiptNumber: {
            type: 'string'
        },
        routingCode: {
            type: 'string'
        },
        transactionAmount: {
            type: 'number'
        }
    }
} as const;

export const $ReportData = {
    type: 'object'
} as const;

export const $ReportExportType = {
    type: 'object',
    properties: {
        key: {
            type: 'string'
        },
        queryParameter: {
            type: 'string'
        }
    }
} as const;

export const $ReportMailingJobRunHistoryData = {
    type: 'object',
    properties: {
        endDateTime: {
            type: 'string',
            format: 'date-time'
        },
        errorLog: {
            type: 'string'
        },
        errorMessage: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        reportMailingJobId: {
            type: 'integer',
            format: 'int64'
        },
        startDateTime: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            type: 'string'
        }
    }
} as const;

export const $ReportMailingJobTimelineData = {
    type: 'object',
    properties: {
        createdByFirstname: {
            type: 'string'
        },
        createdByLastname: {
            type: 'string'
        },
        createdByUsername: {
            type: 'string'
        },
        createdOnDate: {
            type: 'string',
            format: 'date'
        },
        updatedByFirstname: {
            type: 'string'
        },
        updatedByLastname: {
            type: 'string'
        },
        updatedByUsername: {
            type: 'string'
        },
        updatedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $ReportParameterData = {
    type: 'object'
} as const;

export const $RescheduleReasonsCodeValue = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true
        },
        id: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        mandatory: {
            type: 'boolean',
            example: false
        },
        name: {
            type: 'string',
            example: 'reason'
        }
    }
} as const;

export const $RescheduleReasonsTimeline = {
    type: 'object',
    properties: {
        approvedByFirstname: {
            type: 'string',
            example: 'App'
        },
        approvedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        approvedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        approvedOnDate: {
            type: 'string',
            format: 'date'
        },
        submittedByFirstname: {
            type: 'string',
            example: 'App'
        },
        submittedByLastname: {
            type: 'string',
            example: 'Administrator'
        },
        submittedByUsername: {
            type: 'string',
            example: 'mifos'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $Response = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        new: {
            type: 'boolean'
        },
        question: {
            '$ref': '#/components/schemas/Question'
        },
        sequenceNo: {
            type: 'integer',
            format: 'int32'
        },
        text: {
            type: 'string'
        },
        value: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $ResponseData = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        sequenceNo: {
            type: 'integer',
            format: 'int32'
        },
        text: {
            type: 'string'
        },
        value: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $ResultsetColumnHeaderData = {
    type: 'object',
    properties: {
        booleanDisplayType: {
            type: 'boolean'
        },
        codeLookupDisplayType: {
            type: 'boolean'
        },
        codeValueDisplayType: {
            type: 'boolean'
        },
        columnCode: {
            type: 'string'
        },
        columnDisplayType: {
            type: 'string',
            enum: ['TEXT', 'STRING', 'INTEGER', 'FLOAT', 'DECIMAL', 'DATE', 'TIME', 'DATETIME', 'BOOLEAN', 'BINARY', 'CODELOOKUP', 'CODEVALUE']
        },
        columnLength: {
            type: 'integer',
            format: 'int64'
        },
        columnName: {
            type: 'string'
        },
        columnType: {
            type: 'string',
            enum: ['BIT', 'BOOLEAN', 'SMALLINT', 'TINYINT', 'INTEGER', 'MEDIUMINT', 'BIGINT', 'REAL', 'FLOAT', 'DOUBLE', 'NUMERIC', 'DECIMAL', 'SERIAL', 'SMALLSERIAL', 'BIGSERIAL', 'MONEY', 'CHAR', 'VARCHAR', 'LONGVARCHAR', 'TEXT', 'TINYTEXT', 'MEDIUMTEXT', 'LONGTEXT', 'JSON', 'DATE', 'TIME', 'TIME_WITH_TIMEZONE', 'TIMESTAMP', 'DATETIME', 'TIMESTAMP_WITH_TIMEZONE', 'INTERVAL', 'BINARY', 'VARBINARY', 'LONGVARBINARY', 'BYTEA', 'BLOB', 'TINYBLOB', 'MEDIUMBLOB', 'LONGBLOB']
        },
        columnValues: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResultsetColumnValueData'
            }
        },
        dateDisplayType: {
            type: 'boolean'
        },
        dateTimeDisplayType: {
            type: 'boolean'
        },
        decimalDisplayType: {
            type: 'boolean'
        },
        integerDisplayType: {
            type: 'boolean'
        },
        isColumnIndexed: {
            type: 'boolean'
        },
        isColumnNullable: {
            type: 'boolean'
        },
        isColumnPrimaryKey: {
            type: 'boolean'
        },
        isColumnUnique: {
            type: 'boolean'
        },
        mandatory: {
            type: 'boolean'
        },
        stringDisplayType: {
            type: 'boolean'
        },
        textDisplayType: {
            type: 'boolean'
        },
        timeDisplayType: {
            type: 'boolean'
        }
    }
} as const;

export const $ResultsetColumnValueData = {
    type: 'object'
} as const;

export const $ResultsetRowData = {
    type: 'object',
    properties: {
        row: {
            type: 'array',
            items: {
                type: 'object'
            }
        }
    }
} as const;

export const $RetrieveLoansPointInTimeExternalIdsRequest = {
    type: 'object',
    properties: {
        date: {
            '$ref': '#/components/schemas/DateParam'
        },
        dateFormat: {
            type: 'string'
        },
        externalIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        locale: {
            type: 'string'
        }
    }
} as const;

export const $RetrieveLoansPointInTimeRequest = {
    type: 'object',
    properties: {
        date: {
            '$ref': '#/components/schemas/DateParam'
        },
        dateFormat: {
            type: 'string'
        },
        loanIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        locale: {
            type: 'string'
        }
    }
} as const;

export const $Role = {
    type: 'object',
    properties: {
        disabled: {
            type: 'boolean'
        },
        enabled: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        permissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Permission'
            }
        }
    }
} as const;

export const $RoleData = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $RunReportsResponse = {
    type: 'object',
    properties: {
        columnHeaders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResultsetColumnHeaderData'
            }
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResultsetRowData'
            }
        }
    }
} as const;

export const $SavingDueTransactionRequest = {
    type: 'object',
    properties: {
        accountNumber: {
            type: 'string'
        },
        bankNumber: {
            type: 'string'
        },
        checkNumber: {
            type: 'string'
        },
        depositAccountType: {
            type: 'integer',
            format: 'int64'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int64'
        },
        receiptNumber: {
            type: 'string'
        },
        routingCode: {
            type: 'string'
        },
        savingsId: {
            type: 'integer',
            format: 'int64'
        },
        transactionAmount: {
            type: 'number'
        }
    }
} as const;

export const $SavingsAccountApplicationTimelineData = {
    type: 'object',
    properties: {
        activatedByFirstname: {
            type: 'string'
        },
        activatedByLastname: {
            type: 'string'
        },
        activatedByUsername: {
            type: 'string'
        },
        activatedOnDate: {
            type: 'string',
            format: 'date'
        },
        approvedByFirstname: {
            type: 'string'
        },
        approvedByLastname: {
            type: 'string'
        },
        approvedByUsername: {
            type: 'string'
        },
        approvedOnDate: {
            type: 'string',
            format: 'date'
        },
        closedByFirstname: {
            type: 'string'
        },
        closedByLastname: {
            type: 'string'
        },
        closedByUsername: {
            type: 'string'
        },
        closedOnDate: {
            type: 'string',
            format: 'date'
        },
        rejectedByFirstname: {
            type: 'string'
        },
        rejectedByLastname: {
            type: 'string'
        },
        rejectedByUsername: {
            type: 'string'
        },
        rejectedOnDate: {
            type: 'string',
            format: 'date'
        },
        submittedByFirstname: {
            type: 'string'
        },
        submittedByLastname: {
            type: 'string'
        },
        submittedByUsername: {
            type: 'string'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        withdrawnByFirstname: {
            type: 'string'
        },
        withdrawnByLastname: {
            type: 'string'
        },
        withdrawnByUsername: {
            type: 'string'
        },
        withdrawnOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $SavingsAccountChargeData = {
    type: 'object',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64'
        },
        amount: {
            type: 'number'
        },
        amountOrPercentage: {
            type: 'number'
        },
        amountOutstanding: {
            type: 'number'
        },
        amountPaid: {
            type: 'number'
        },
        amountPercentageAppliedTo: {
            type: 'number'
        },
        amountWaived: {
            type: 'number'
        },
        amountWrittenOff: {
            type: 'number'
        },
        annualFee: {
            type: 'boolean'
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        chargeData: {
            '$ref': '#/components/schemas/ChargeData'
        },
        chargeId: {
            type: 'integer',
            format: 'int64'
        },
        chargeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChargeData'
            }
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        dueDate: {
            type: 'string',
            format: 'date'
        },
        feeCharge: {
            type: 'boolean'
        },
        feeInterval: {
            type: 'integer',
            format: 'int32'
        },
        feeOnMonthDay: {
            type: 'object',
            properties: {
                dayOfMonth: {
                    type: 'integer',
                    format: 'int32'
                },
                month: {
                    type: 'string',
                    enum: ['JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE', 'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER']
                },
                monthValue: {
                    type: 'integer',
                    format: 'int32'
                }
            }
        },
        freeWithdrawalChargeFrequency: {
            type: 'integer',
            format: 'int32'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        inactivationDate: {
            type: 'string',
            format: 'date'
        },
        isActive: {
            type: 'boolean'
        },
        isFreeWithdrawal: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        penalty: {
            type: 'boolean'
        },
        percentage: {
            type: 'number'
        },
        restartFrequency: {
            type: 'integer',
            format: 'int32'
        },
        restartFrequencyEnum: {
            type: 'integer',
            format: 'int32'
        },
        savingsActivation: {
            type: 'boolean'
        },
        withdrawalFee: {
            type: 'boolean'
        }
    }
} as const;

export const $SavingsAccountChargesPaidByData = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        chargeId: {
            type: 'integer',
            format: 'int64'
        },
        feeCharge: {
            type: 'boolean'
        },
        penaltyCharge: {
            type: 'boolean'
        },
        savingsAccountChargeData: {
            '$ref': '#/components/schemas/SavingsAccountChargeData'
        }
    }
} as const;

export const $SavingsAccountData = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'string'
        },
        accrualBasedAccountingEnabledOnSavingsProduct: {
            type: 'boolean'
        },
        activatedOnDate: {
            type: 'string',
            format: 'date'
        },
        activationLocalDate: {
            type: 'string',
            format: 'date'
        },
        allowOverdraft: {
            type: 'boolean'
        },
        annualFee: {
            '$ref': '#/components/schemas/SavingsAccountChargeData'
        },
        cashBasedAccountingEnabledOnSavingsProduct: {
            type: 'boolean'
        },
        chargeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChargeData'
            }
        },
        charges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SavingsAccountChargeData'
            }
        },
        clientData: {
            '$ref': '#/components/schemas/ClientData'
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        clientName: {
            type: 'string'
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        datatables: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DatatableData'
            }
        },
        dateFormat: {
            type: 'string'
        },
        daysToDormancy: {
            type: 'integer',
            format: 'int32'
        },
        daysToEscheat: {
            type: 'integer',
            format: 'int32'
        },
        daysToInactive: {
            type: 'integer',
            format: 'int32'
        },
        depositType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        depositTypeId: {
            type: 'integer',
            format: 'int32'
        },
        enforceMinRequiredBalance: {
            type: 'boolean'
        },
        existingReversedTransactionIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            },
            uniqueItems: true
        },
        existingTransactionIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            },
            uniqueItems: true
        },
        externalId: {
            type: 'string'
        },
        fieldOfficerId: {
            type: 'integer',
            format: 'int64'
        },
        fieldOfficerName: {
            type: 'string'
        },
        fieldOfficerOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StaffData'
            }
        },
        glAccountIdForInterestOnSavings: {
            type: 'integer',
            format: 'int64'
        },
        glAccountIdForSavingsControl: {
            type: 'integer',
            format: 'int64'
        },
        groupGeneralData: {
            '$ref': '#/components/schemas/GroupGeneralData'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        groupName: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        interestCalculationDaysInYearTypeId: {
            type: 'integer',
            format: 'int32'
        },
        interestCalculationDaysInYearTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        interestCalculationTypeId: {
            type: 'integer',
            format: 'int32'
        },
        interestCalculationTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        interestCompoundingPeriodTypeId: {
            type: 'integer',
            format: 'int32'
        },
        interestCompoundingPeriodTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        interestPostingPeriodTypeId: {
            type: 'integer',
            format: 'int32'
        },
        interestPostingPeriodTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        isDormancyTrackingActive: {
            type: 'boolean'
        },
        lastActiveTransactionDate: {
            type: 'string',
            format: 'date'
        },
        lastSavingsAccountTransaction: {
            '$ref': '#/components/schemas/SavingsAccountTransactionData'
        },
        lienAllowed: {
            type: 'boolean'
        },
        locale: {
            type: 'string'
        },
        lockedInUntilDate: {
            type: 'string',
            format: 'date'
        },
        lockinPeriodFrequency: {
            type: 'integer',
            format: 'int32'
        },
        lockinPeriodFrequencyType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        lockinPeriodFrequencyTypeId: {
            type: 'integer',
            format: 'int32'
        },
        lockinPeriodFrequencyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        maxAllowedLienLimit: {
            type: 'number'
        },
        minBalanceForInterestCalculation: {
            type: 'number'
        },
        minOverdraftForInterestCalculation: {
            type: 'number'
        },
        minRequiredBalance: {
            type: 'number'
        },
        minRequiredOpeningBalance: {
            type: 'number'
        },
        newSavingsAccountTransactionData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SavingsAccountTransactionData'
            }
        },
        nominalAnnualInterestRate: {
            type: 'number'
        },
        nominalAnnualInterestRateOverdraft: {
            type: 'number'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        onHoldFunds: {
            type: 'number'
        },
        overdraftLimit: {
            type: 'number'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        productOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SavingsProductData'
            }
        },
        reasonForBlock: {
            type: 'string'
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        },
        savingsAccountSummaryData: {
            '$ref': '#/components/schemas/SavingsAccountSummaryData'
        },
        savingsAccountTransactionData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SavingsAccountTransactionData'
            }
        },
        savingsAccountTransactionSummaryWrapper: {
            '$ref': '#/components/schemas/SavingsAccountTransactionDataSummaryWrapper'
        },
        savingsAccountTransactionsWithPivotConfig: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SavingsAccountTransactionData'
            }
        },
        savingsAmountOnHold: {
            type: 'number'
        },
        savingsHelper: {
            '$ref': '#/components/schemas/SavingsHelper'
        },
        savingsProduct: {
            '$ref': '#/components/schemas/SavingsProductData'
        },
        savingsProductData: {
            '$ref': '#/components/schemas/SavingsProductData'
        },
        savingsProductId: {
            type: 'integer',
            format: 'int64'
        },
        savingsProductName: {
            type: 'string'
        },
        startInterestCalculationDate: {
            type: 'string',
            format: 'date'
        },
        status: {
            '$ref': '#/components/schemas/SavingsAccountStatusEnumData'
        },
        subStatus: {
            '$ref': '#/components/schemas/SavingsAccountSubStatusEnumData'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        summary: {
            '$ref': '#/components/schemas/SavingsAccountSummaryData'
        },
        taxGroup: {
            '$ref': '#/components/schemas/TaxGroupData'
        },
        timeline: {
            '$ref': '#/components/schemas/SavingsAccountApplicationTimelineData'
        },
        transactions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SavingsAccountTransactionData'
            }
        },
        updatedTransactions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SavingsAccountTransactionData'
            },
            writeOnly: true
        },
        withHoldTax: {
            type: 'boolean'
        },
        withdrawalFee: {
            '$ref': '#/components/schemas/SavingsAccountChargeData'
        },
        withdrawalFeeForTransfers: {
            type: 'boolean'
        },
        withdrawalFeeTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        }
    }
} as const;

export const $SavingsAccountStatusEnumData = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean'
        },
        approved: {
            type: 'boolean'
        },
        closed: {
            type: 'boolean'
        },
        code: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        matured: {
            type: 'boolean'
        },
        prematureClosed: {
            type: 'boolean'
        },
        rejected: {
            type: 'boolean'
        },
        submittedAndPendingApproval: {
            type: 'boolean'
        },
        transferInProgress: {
            type: 'boolean'
        },
        transferOnHold: {
            type: 'boolean'
        },
        value: {
            type: 'string'
        },
        withdrawnByApplicant: {
            type: 'boolean'
        }
    }
} as const;

export const $SavingsAccountSubStatusEnumData = {
    type: 'object',
    properties: {
        block: {
            type: 'boolean'
        },
        blockCredit: {
            type: 'boolean'
        },
        blockDebit: {
            type: 'boolean'
        },
        code: {
            type: 'string'
        },
        dormant: {
            type: 'boolean'
        },
        escheat: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        inactive: {
            type: 'boolean'
        },
        none: {
            type: 'boolean'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $SavingsAccountSummaryData = {
    type: 'object',
    properties: {
        accountBalance: {
            type: 'number'
        },
        availableBalance: {
            type: 'number'
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        interestNotPosted: {
            type: 'number'
        },
        interestPostedTillDate: {
            type: 'string',
            format: 'date'
        },
        lastInterestCalculationDate: {
            type: 'string',
            format: 'date'
        },
        prevInterestPostedTillDate: {
            type: 'string',
            format: 'date'
        },
        runningBalanceOnInterestPostingTillDate: {
            type: 'number'
        },
        runningBalanceOnPivotDate: {
            type: 'number'
        },
        totalAnnualFees: {
            type: 'number'
        },
        totalDeposits: {
            type: 'number'
        },
        totalFeeCharge: {
            type: 'number'
        },
        totalInterestEarned: {
            type: 'number'
        },
        totalInterestPosted: {
            type: 'number'
        },
        totalOverdraftInterestDerived: {
            type: 'number'
        },
        totalPenaltyCharge: {
            type: 'number'
        },
        totalWithdrawalFees: {
            type: 'number'
        },
        totalWithdrawals: {
            type: 'number'
        },
        totalWithholdTax: {
            type: 'number'
        }
    }
} as const;

export const $SavingsAccountTransactionData = {
    type: 'object',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64'
        },
        accountNo: {
            type: 'string'
        },
        accountNumber: {
            type: 'string'
        },
        amount: {
            type: 'number'
        },
        amountOnHold: {
            type: 'boolean'
        },
        amountRelease: {
            type: 'boolean'
        },
        annualFee: {
            type: 'boolean'
        },
        annualFeeAndNotReversed: {
            type: 'boolean'
        },
        balanceEndDate: {
            type: 'string',
            format: 'date'
        },
        balanceNumberOfDays: {
            type: 'integer',
            format: 'int32'
        },
        bankNumber: {
            type: 'string'
        },
        chargeTransaction: {
            type: 'boolean'
        },
        chargeTransactionAndNotReversed: {
            type: 'boolean'
        },
        chargesPaidByData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SavingsAccountChargesPaidByData'
            },
            uniqueItems: true
        },
        checkNumber: {
            type: 'string'
        },
        credit: {
            type: 'boolean'
        },
        cumulativeBalance: {
            type: 'number'
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        dateFormat: {
            type: 'string'
        },
        debit: {
            type: 'boolean'
        },
        deposit: {
            type: 'boolean'
        },
        depositAndNotReversed: {
            type: 'boolean'
        },
        dividendPayoutAndNotReversed: {
            type: 'boolean'
        },
        endOfBalanceLocalDate: {
            type: 'string',
            format: 'date'
        },
        entryType: {
            type: 'string',
            enum: ['CREDIT', 'DEBIT']
        },
        feeCharge: {
            type: 'boolean'
        },
        feeChargeAndNotReversed: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        interestPosting: {
            type: 'boolean'
        },
        interestPostingAndNotReversed: {
            type: 'boolean'
        },
        interestedPostedAsOn: {
            type: 'boolean'
        },
        isManualTransaction: {
            type: 'boolean'
        },
        isReversal: {
            type: 'boolean'
        },
        lienTransaction: {
            type: 'boolean'
        },
        locale: {
            type: 'string'
        },
        manualTransaction: {
            type: 'boolean'
        },
        modifiedId: {
            type: 'integer',
            format: 'int64'
        },
        notReversed: {
            type: 'boolean'
        },
        note: {
            type: 'string'
        },
        originalTransactionId: {
            type: 'integer',
            format: 'int64'
        },
        outstandingChargeAmount: {
            type: 'number'
        },
        overdraftAmount: {
            type: 'number'
        },
        overdraftInterestAndNotReversed: {
            type: 'boolean'
        },
        payCharge: {
            type: 'boolean'
        },
        paymentDetailData: {
            '$ref': '#/components/schemas/PaymentDetailData'
        },
        paymentTypeId: {
            type: 'integer',
            format: 'int64'
        },
        paymentTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaymentTypeData'
            }
        },
        penaltyCharge: {
            type: 'boolean'
        },
        penaltyChargeAndNotReversed: {
            type: 'boolean'
        },
        reasonForBlock: {
            type: 'string'
        },
        receiptNumber: {
            type: 'string'
        },
        refNo: {
            type: 'string'
        },
        releaseTransactionId: {
            type: 'integer',
            format: 'int64'
        },
        reversalTransaction: {
            type: 'boolean'
        },
        reversed: {
            type: 'boolean'
        },
        routingCode: {
            type: 'string'
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        },
        runningBalance: {
            type: 'number'
        },
        savingsAccountChargesPaid: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SavingsAccountChargesPaidByData'
            },
            uniqueItems: true
        },
        savingsAccountId: {
            type: 'integer',
            format: 'int64'
        },
        submittedByUsername: {
            type: 'string'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        },
        taxDetails: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaxDetailsData'
            }
        },
        transactionAmount: {
            type: 'number'
        },
        transactionDate: {
            type: 'string',
            format: 'date'
        },
        transactionType: {
            '$ref': '#/components/schemas/SavingsAccountTransactionEnumData'
        },
        transfer: {
            '$ref': '#/components/schemas/AccountTransferData'
        },
        waiveCharge: {
            type: 'boolean'
        },
        waiveFeeCharge: {
            type: 'boolean'
        },
        waiveFeeChargeAndNotReversed: {
            type: 'boolean'
        },
        waivePenaltyCharge: {
            type: 'boolean'
        },
        waivePenaltyChargeAndNotReversed: {
            type: 'boolean'
        },
        withHoldTaxAndNotReversed: {
            type: 'boolean'
        },
        withdrawal: {
            type: 'boolean'
        },
        withdrawalFeeAndNotReversed: {
            type: 'boolean'
        }
    }
} as const;

export const $SavingsAccountTransactionDataSummaryWrapper = {
    type: 'object'
} as const;

export const $SavingsAccountTransactionEnumData = {
    type: 'object',
    properties: {
        accrual: {
            type: 'boolean'
        },
        amountHold: {
            type: 'boolean'
        },
        amountRelease: {
            type: 'boolean'
        },
        annualFee: {
            type: 'boolean'
        },
        approveTransfer: {
            type: 'boolean'
        },
        chargeTransaction: {
            type: 'boolean'
        },
        code: {
            type: 'string'
        },
        credit: {
            type: 'boolean'
        },
        debit: {
            type: 'boolean'
        },
        deposit: {
            type: 'boolean'
        },
        depositOrWithdrawal: {
            type: 'boolean'
        },
        dividendPayout: {
            type: 'boolean'
        },
        entryType: {
            type: 'string',
            enum: ['CREDIT', 'DEBIT']
        },
        escheat: {
            type: 'boolean'
        },
        feeDeduction: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        incomeFromInterest: {
            type: 'boolean'
        },
        initiateTransfer: {
            type: 'boolean'
        },
        interestPosting: {
            type: 'boolean'
        },
        overDraftInterestPosting: {
            type: 'boolean'
        },
        overdraftFee: {
            type: 'boolean'
        },
        overdraftInterest: {
            type: 'boolean'
        },
        payCharge: {
            type: 'boolean'
        },
        rejectTransfer: {
            type: 'boolean'
        },
        transactionTypeEnum: {
            type: 'string',
            enum: ['INVALID', 'DEPOSIT', 'WITHDRAWAL', 'INTEREST_POSTING', 'WITHDRAWAL_FEE', 'ANNUAL_FEE', 'WAIVE_CHARGES', 'PAY_CHARGE', 'DIVIDEND_PAYOUT', 'ACCRUAL', 'INITIATE_TRANSFER', 'APPROVE_TRANSFER', 'WITHDRAW_TRANSFER', 'REJECT_TRANSFER', 'WRITTEN_OFF', 'OVERDRAFT_INTEREST', 'WITHHOLD_TAX', 'ESCHEAT', 'AMOUNT_HOLD', 'AMOUNT_RELEASE']
        },
        value: {
            type: 'string'
        },
        withdrawTransfer: {
            type: 'boolean'
        },
        withdrawal: {
            type: 'boolean'
        },
        withdrawalFee: {
            type: 'boolean'
        },
        withholdTax: {
            type: 'boolean'
        },
        writtenoff: {
            type: 'boolean'
        }
    }
} as const;

export const $SavingsAccountTransactionsSearchResponse = {
    type: 'object',
    description: 'SavingsAccountTransactionsSearchResponse',
    properties: {
        content: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetSavingsAccountTransactionsPageItem'
            },
            uniqueItems: true
        },
        total: {
            type: 'integer',
            format: 'int64',
            example: 2
        }
    }
} as const;

export const $SavingsHelper = {
    type: 'object'
} as const;

export const $SavingsProductData = {
    type: 'object',
    properties: {
        accrualBasedAccountingEnabled: {
            type: 'boolean'
        },
        allowOverdraft: {
            type: 'boolean'
        },
        cashBasedAccountingEnabled: {
            type: 'boolean'
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        depositAccountType: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        interestCalculationDaysInYearType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        interestCalculationType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        interestCompoundingPeriodType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        interestPostingPeriodType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        lockinPeriodFrequency: {
            type: 'integer',
            format: 'int32'
        },
        lockinPeriodFrequencyType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        maxAllowedLienLimit: {
            type: 'number'
        },
        minRequiredBalance: {
            type: 'number'
        },
        minRequiredOpeningBalance: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        nominalAnnualInterestRate: {
            type: 'number'
        },
        overdraftLimit: {
            type: 'number'
        },
        periodicAccrualAccounting: {
            type: 'boolean'
        },
        upfrontAccrualAccounting: {
            type: 'boolean'
        },
        withdrawalFeeForTransfers: {
            type: 'boolean'
        }
    }
} as const;

export const $Scorecard = {
    type: 'object',
    properties: {
        appUser: {
            '$ref': '#/components/schemas/AppUser'
        },
        client: {
            '$ref': '#/components/schemas/Client'
        },
        createdOn: {
            type: 'string',
            format: 'date-time'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        new: {
            type: 'boolean'
        },
        question: {
            '$ref': '#/components/schemas/Question'
        },
        response: {
            '$ref': '#/components/schemas/Response'
        },
        survey: {
            '$ref': '#/components/schemas/Survey'
        },
        value: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $ScorecardData = {
    type: 'object',
    properties: {
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        scorecardValues: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ScorecardValue'
            }
        },
        surveyId: {
            type: 'integer',
            format: 'int64'
        },
        surveyName: {
            type: 'string'
        },
        userId: {
            type: 'integer',
            format: 'int64'
        },
        username: {
            type: 'string'
        }
    }
} as const;

export const $ScorecardValue = {
    type: 'object',
    properties: {
        createdOn: {
            type: 'string',
            format: 'date-time'
        },
        questionId: {
            type: 'integer',
            format: 'int64'
        },
        responseId: {
            type: 'integer',
            format: 'int64'
        },
        value: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $SearchData = {
    type: 'object',
    properties: {
        entityAccountNo: {
            type: 'string'
        },
        entityExternalId: {
            type: 'string'
        },
        entityId: {
            type: 'integer',
            format: 'int64'
        },
        entityMobileNo: {
            type: 'string'
        },
        entityName: {
            type: 'string'
        },
        entityStatus: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        entityType: {
            type: 'string'
        },
        parentId: {
            type: 'integer',
            format: 'int64'
        },
        parentName: {
            type: 'string'
        },
        parentType: {
            type: 'string'
        },
        subEntityType: {
            type: 'string'
        }
    }
} as const;

export const $ShareAccountApplicationTimelineData = {
    type: 'object',
    properties: {
        activatedByFirstname: {
            type: 'string'
        },
        activatedByLastname: {
            type: 'string'
        },
        activatedByUsername: {
            type: 'string'
        },
        activatedDate: {
            type: 'string',
            format: 'date'
        },
        approvedByFirstname: {
            type: 'string'
        },
        approvedByLastname: {
            type: 'string'
        },
        approvedByUsername: {
            type: 'string'
        },
        approvedDate: {
            type: 'string',
            format: 'date'
        },
        closedByFirstname: {
            type: 'string'
        },
        closedByLastname: {
            type: 'string'
        },
        closedByUsername: {
            type: 'string'
        },
        closedDate: {
            type: 'string',
            format: 'date'
        },
        rejectedByFirstname: {
            type: 'string'
        },
        rejectedByLastname: {
            type: 'string'
        },
        rejectedByUsername: {
            type: 'string'
        },
        rejectedDate: {
            type: 'string',
            format: 'date'
        },
        submittedByFirstname: {
            type: 'string'
        },
        submittedByLastname: {
            type: 'string'
        },
        submittedByUsername: {
            type: 'string'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $ShareAccountChargeData = {
    type: 'object',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64'
        },
        amount: {
            type: 'number'
        },
        amountOrPercentage: {
            type: 'number'
        },
        amountOutstanding: {
            type: 'number'
        },
        amountPaid: {
            type: 'number'
        },
        amountPercentageAppliedTo: {
            type: 'number'
        },
        amountWaived: {
            type: 'number'
        },
        amountWrittenOff: {
            type: 'number'
        },
        chargeCalculationType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        chargeId: {
            type: 'integer',
            format: 'int64'
        },
        chargeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChargeData'
            }
        },
        chargeTimeType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        isActive: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        percentage: {
            type: 'number'
        }
    }
} as const;

export const $ShareAccountData = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'string'
        },
        allowDividendCalculationForInactiveClients: {
            type: 'boolean'
        },
        applicationDate: {
            type: 'string',
            format: 'date'
        },
        chargeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChargeData'
            }
        },
        charges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ShareAccountChargeData'
            }
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        clientName: {
            type: 'string'
        },
        clientSavingsAccounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SavingsAccountData'
            }
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        currentMarketPrice: {
            type: 'number'
        },
        dateFormat: {
            type: 'string'
        },
        defaultShares: {
            type: 'integer',
            format: 'int64'
        },
        dividends: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ShareAccountDividendData'
            }
        },
        externalId: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        locale: {
            type: 'string'
        },
        lockPeriodTypeEnum: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        lockinPeriod: {
            type: 'integer',
            format: 'int32'
        },
        lockinPeriodFrequency: {
            type: 'integer',
            format: 'int32'
        },
        lockinPeriodFrequencyType: {
            type: 'integer',
            format: 'int32'
        },
        lockinPeriodFrequencyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        minimumActivePeriod: {
            type: 'integer',
            format: 'int32'
        },
        minimumActivePeriodFrequencyType: {
            type: 'integer',
            format: 'int32'
        },
        minimumActivePeriodFrequencyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        minimumActivePeriodTypeEnum: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        productName: {
            type: 'string'
        },
        productOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductData'
            }
        },
        purchasedShares: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ShareAccountTransactionData'
            }
        },
        requestedShares: {
            type: 'integer',
            format: 'int32'
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        },
        savingsAccountId: {
            type: 'integer',
            format: 'int64'
        },
        savingsAccountNumber: {
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/ShareAccountStatusEnumData'
        },
        submittedDate: {
            type: 'string',
            format: 'date'
        },
        summary: {
            '$ref': '#/components/schemas/ShareAccountSummaryData'
        },
        timeline: {
            '$ref': '#/components/schemas/ShareAccountApplicationTimelineData'
        }
    }
} as const;

export const $ShareAccountDividendData = {
    type: 'object',
    properties: {
        accountData: {
            '$ref': '#/components/schemas/ShareAccountData'
        },
        amount: {
            type: 'number'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        postedDate: {
            type: 'string',
            format: 'date'
        },
        savingsTransactionId: {
            type: 'integer',
            format: 'int64'
        },
        status: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;

export const $ShareAccountStatusEnumData = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean'
        },
        approved: {
            type: 'boolean'
        },
        closed: {
            type: 'boolean'
        },
        code: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        rejected: {
            type: 'boolean'
        },
        submittedAndPendingApproval: {
            type: 'boolean'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $ShareAccountSummaryData = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'string'
        },
        currency: {
            '$ref': '#/components/schemas/CurrencyData'
        },
        externalId: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        productId: {
            type: 'integer',
            format: 'int64'
        },
        productName: {
            type: 'string'
        },
        shortProductName: {
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/ShareAccountStatusEnumData'
        },
        timeline: {
            '$ref': '#/components/schemas/ShareAccountApplicationTimelineData'
        },
        totalApprovedShares: {
            type: 'integer',
            format: 'int64'
        },
        totalPendingForApprovalShares: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $ShareAccountTransactionData = {
    type: 'object',
    properties: {
        accountId: {
            type: 'integer',
            format: 'int64'
        },
        amount: {
            type: 'number'
        },
        amountPaid: {
            type: 'number'
        },
        chargeAmount: {
            type: 'number'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        numberOfShares: {
            type: 'integer',
            format: 'int64'
        },
        purchasedDate: {
            type: 'string',
            format: 'date'
        },
        purchasedPrice: {
            type: 'number'
        },
        status: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        type: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;

export const $SingleDebitOrCreditEntryCommand = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        comments: {
            type: 'string'
        },
        commentsChanged: {
            type: 'boolean'
        },
        glAccountId: {
            type: 'integer',
            format: 'int64'
        },
        glAccountIdChanged: {
            type: 'boolean'
        },
        glAmountChanged: {
            type: 'boolean'
        },
        parametersPassedInRequest: {
            type: 'array',
            items: {
                type: 'string'
            },
            uniqueItems: true
        }
    }
} as const;

export const $SmsBusinessRulesData = {
    type: 'object',
    properties: {
        reportDescription: {
            type: 'string'
        },
        reportId: {
            type: 'integer',
            format: 'int64'
        },
        reportName: {
            type: 'string'
        },
        reportParamName: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        reportSubType: {
            type: 'string'
        },
        reportType: {
            type: 'string'
        }
    }
} as const;

export const $SmsCampaignData = {
    type: 'object',
    properties: {
        businessRulesOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SmsBusinessRulesData'
            }
        },
        campaignMessage: {
            type: 'string'
        },
        campaignName: {
            type: 'string'
        },
        campaignStatus: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        campaignType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        campaignTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        frequencyTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastTriggerDate: {
            type: 'string',
            format: 'date'
        },
        months: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        nextTriggerDate: {
            type: 'string',
            format: 'date-time'
        },
        notification: {
            type: 'boolean'
        },
        paramValue: {
            type: 'string'
        },
        periodFrequencyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        providerId: {
            type: 'integer',
            format: 'int64'
        },
        recurrence: {
            type: 'string'
        },
        recurrenceStartDate: {
            type: 'string',
            format: 'date-time'
        },
        reportName: {
            type: 'string'
        },
        runReportId: {
            type: 'integer',
            format: 'int64'
        },
        smsCampaignTimeLine: {
            '$ref': '#/components/schemas/SmsCampaignTimeLine'
        },
        smsProviderOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SmsProviderData'
            }
        },
        triggerType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        triggerTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        weekDays: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        }
    }
} as const;

export const $SmsCampaignParamReq = {
    type: 'object',
    properties: {
        loanOfficerId: {
            type: 'integer',
            format: 'int32'
        },
        officeId: {
            type: 'integer',
            format: 'int32'
        },
        reportName: {
            type: 'string'
        },
        transactionId: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $SmsCampaignPreviewDto = {
    type: 'object',
    properties: {
        message: {
            type: 'string'
        },
        paramValue: {
            '$ref': '#/components/schemas/SmsCampaignParamReq'
        }
    }
} as const;

export const $SmsCampaignTimeLine = {
    type: 'object',
    properties: {
        activatedByUsername: {
            type: 'string'
        },
        activatedOnDate: {
            type: 'string',
            format: 'date'
        },
        closedByUsername: {
            type: 'string'
        },
        closedOnDate: {
            type: 'string',
            format: 'date'
        },
        submittedByUsername: {
            type: 'string'
        },
        submittedOnDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $SmsCreationRequest = {
    type: 'object',
    properties: {
        campaignId: {
            type: 'integer',
            format: 'int64'
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        message: {
            type: 'string'
        },
        staffId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $SmsData = {
    type: 'object',
    properties: {
        campaignName: {
            type: 'string'
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        groupId: {
            type: 'integer',
            format: 'int64'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        message: {
            type: 'string'
        },
        mobileNo: {
            type: 'string'
        },
        providerId: {
            type: 'integer',
            format: 'int64'
        },
        staffId: {
            type: 'integer',
            format: 'int64'
        },
        status: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;

export const $SmsProviderData = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        phoneNo: {
            type: 'string'
        },
        providerAppKey: {
            type: 'string'
        },
        providerDescription: {
            type: 'string'
        },
        providerName: {
            type: 'string'
        },
        tenantId: {
            type: 'string'
        }
    }
} as const;

export const $SmsUpdateRequest = {
    type: 'object',
    properties: {
        message: {
            type: 'string'
        }
    }
} as const;

export const $Sort = {
    type: 'object',
    properties: {
        empty: {
            type: 'boolean'
        },
        sorted: {
            type: 'boolean'
        },
        unsorted: {
            type: 'boolean'
        }
    }
} as const;

export const $SortOrder = {
    type: 'object',
    properties: {
        direction: {
            type: 'string',
            enum: ['ASC', 'DESC']
        },
        property: {
            type: 'string'
        }
    }
} as const;

export const $Staff = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean'
        },
        displayName: {
            type: 'string'
        },
        emailAddress: {
            type: 'string'
        },
        externalId: {
            type: 'string'
        },
        firstname: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        image: {
            '$ref': '#/components/schemas/Image'
        },
        joiningDate: {
            type: 'string',
            format: 'date'
        },
        lastname: {
            type: 'string'
        },
        loanOfficer: {
            type: 'boolean'
        },
        mobileNo: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        notActive: {
            type: 'boolean'
        },
        notLoanOfficer: {
            type: 'boolean'
        },
        office: {
            '$ref': '#/components/schemas/Office'
        },
        organisationalRoleParentStaff: {
            '$ref': '#/components/schemas/Staff'
        },
        organisationalRoleType: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $StaffAssignmentHistory = {
    type: 'object',
    properties: {
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        currentRecord: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        },
        new: {
            type: 'boolean'
        },
        startDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $StaffData = {
    type: 'object',
    properties: {
        allowedOffices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OfficeData'
            }
        },
        dateFormat: {
            type: 'string'
        },
        displayName: {
            type: 'string'
        },
        externalId: {
            type: 'string'
        },
        firstname: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        isActive: {
            type: 'boolean'
        },
        isLoanOfficer: {
            type: 'boolean'
        },
        joiningDate: {
            type: 'string',
            format: 'date'
        },
        lastname: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        mobileNo: {
            type: 'string'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        officeName: {
            type: 'string'
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $StaffRequest = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string',
            example: 'dd MMMM yyyy'
        },
        externalId: {
            type: 'string',
            example: '17H'
        },
        firstname: {
            type: 'string',
            example: 'John'
        },
        forceStatus: {
            type: 'boolean',
            example: true
        },
        isActive: {
            type: 'boolean',
            example: true
        },
        isLoanOfficer: {
            type: 'boolean',
            example: true
        },
        joiningDate: {
            type: 'string',
            example: '01 January 2009'
        },
        lastname: {
            type: 'string',
            example: 'Doe'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        mobileNo: {
            type: 'string',
            example: '+353851239876'
        },
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $StandingInstructionCreationRequest = {
    type: 'object',
    properties: {
        amount: {
            type: 'string'
        },
        dateFormat: {
            type: 'string'
        },
        fromAccountId: {
            type: 'string'
        },
        fromAccountType: {
            type: 'string'
        },
        fromClientId: {
            type: 'string'
        },
        fromOfficeId: {
            type: 'string'
        },
        instructionType: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        monthDayFormat: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        priority: {
            type: 'string'
        },
        recurrenceFrequency: {
            type: 'string'
        },
        recurrenceInterval: {
            type: 'string'
        },
        recurrenceOnMonthDay: {
            type: 'string'
        },
        recurrenceType: {
            type: 'string'
        },
        status: {
            type: 'string'
        },
        toAccountId: {
            type: 'string'
        },
        toAccountType: {
            type: 'string'
        },
        toClientId: {
            type: 'string'
        },
        toOfficeId: {
            type: 'string'
        },
        transferType: {
            type: 'string'
        },
        validFrom: {
            type: 'string'
        },
        validTill: {
            type: 'string'
        }
    }
} as const;

export const $StandingInstructionData = {
    type: 'object',
    properties: {
        accountDetailId: {
            type: 'integer',
            format: 'int64'
        },
        amount: {
            type: 'number'
        },
        fromAccount: {
            '$ref': '#/components/schemas/PortfolioAccountData'
        },
        fromAccountType: {
            type: 'string',
            enum: ['INVALID', 'LOAN', 'SAVINGS']
        },
        fromClient: {
            '$ref': '#/components/schemas/ClientData'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        instructionType: {
            type: 'string',
            enum: ['INVALID', 'FIXED', 'DUES']
        },
        name: {
            type: 'string'
        },
        recurrenceFrequency: {
            type: 'string',
            enum: ['DAYS', 'WEEKS', 'MONTHS', 'YEARS', 'WHOLE_TERM', 'INVALID']
        },
        recurrenceInterval: {
            type: 'integer',
            format: 'int32'
        },
        recurrenceOnDay: {
            type: 'integer',
            format: 'int32'
        },
        recurrenceOnMonth: {
            type: 'integer',
            format: 'int32'
        },
        recurrenceType: {
            type: 'string',
            enum: ['INVALID', 'PERIODIC', 'AS_PER_DUES']
        },
        toAccount: {
            '$ref': '#/components/schemas/PortfolioAccountData'
        },
        toAccountType: {
            type: 'string',
            enum: ['INVALID', 'LOAN', 'SAVINGS']
        },
        toClient: {
            '$ref': '#/components/schemas/ClientData'
        },
        transferType: {
            type: 'string',
            enum: ['INVALID', 'ACCOUNT_TRANSFER', 'LOAN_REPAYMENT', 'CHARGE_PAYMENT', 'INTEREST_TRANSFER', 'LOAN_DOWN_PAYMENT']
        },
        validFrom: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $StandingInstructionHistoryData = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        errorLog: {
            type: 'string'
        },
        executionTime: {
            type: 'string',
            format: 'date'
        },
        fromAccount: {
            '$ref': '#/components/schemas/PortfolioAccountData'
        },
        fromAccountType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        fromClient: {
            '$ref': '#/components/schemas/ClientData'
        },
        fromOffice: {
            '$ref': '#/components/schemas/OfficeData'
        },
        name: {
            type: 'string'
        },
        standingInstructionId: {
            type: 'integer',
            format: 'int64'
        },
        status: {
            type: 'string'
        },
        toAccount: {
            '$ref': '#/components/schemas/PortfolioAccountData'
        },
        toAccountType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        toClient: {
            '$ref': '#/components/schemas/ClientData'
        },
        toOffice: {
            '$ref': '#/components/schemas/OfficeData'
        }
    }
} as const;

export const $StandingInstructionUpdatesRequest = {
    type: 'object',
    properties: {
        amount: {
            type: 'string'
        },
        dateFormat: {
            type: 'string'
        },
        instructionType: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        monthDayFormat: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        priority: {
            type: 'string'
        },
        recurrenceFrequency: {
            type: 'string'
        },
        recurrenceInterval: {
            type: 'string'
        },
        recurrenceOnMonthDay: {
            type: 'string'
        },
        recurrenceType: {
            type: 'string'
        },
        status: {
            type: 'string'
        },
        validFrom: {
            type: 'string'
        },
        validTill: {
            type: 'string'
        }
    }
} as const;

export const $StringEnumOptionData = {
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $SubjectName = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        middleName: {
            type: 'string'
        }
    }
} as const;

export const $Survey = {
    type: 'object',
    properties: {
        components: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Component'
            }
        },
        countryCode: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        key: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        questions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Question'
            }
        },
        validFrom: {
            type: 'string',
            format: 'date'
        },
        validTo: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $SurveyData = {
    type: 'object',
    properties: {
        componentDatas: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ComponentData'
            }
        },
        countryCode: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        key: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        questionDatas: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/QuestionData'
            }
        },
        validFrom: {
            type: 'string',
            format: 'date'
        },
        validTo: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $TableQueryData = {
    type: 'object',
    properties: {
        query: {
            '$ref': '#/components/schemas/AdvancedQueryData'
        },
        table: {
            type: 'string'
        }
    }
} as const;

export const $TaxComponent = {
    type: 'object',
    properties: {
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        creditAccountType: {
            type: 'integer',
            format: 'int32'
        },
        creditAcount: {
            '$ref': '#/components/schemas/GLAccount'
        },
        debitAccountType: {
            type: 'integer',
            format: 'int32'
        },
        debitAcount: {
            '$ref': '#/components/schemas/GLAccount'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        },
        new: {
            type: 'boolean'
        },
        percentage: {
            type: 'number'
        },
        taxComponentHistories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaxComponentHistory'
            },
            uniqueItems: true
        },
        taxGroupMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaxGroupMappings'
            },
            uniqueItems: true
        }
    }
} as const;

export const $TaxComponentData = {
    type: 'object',
    properties: {
        creditAccount: {
            '$ref': '#/components/schemas/GLAccountData'
        },
        creditAccountType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        debitAccount: {
            '$ref': '#/components/schemas/GLAccountData'
        },
        debitAccountType: {
            '$ref': '#/components/schemas/EnumOptionData'
        },
        glAccountOptions: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/GLAccountData'
                }
            }
        },
        glAccountTypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        percentage: {
            type: 'number'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        taxComponentHistories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaxComponentHistoryData'
            }
        }
    }
} as const;

export const $TaxComponentHistory = {
    type: 'object',
    properties: {
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        },
        new: {
            type: 'boolean'
        },
        percentage: {
            type: 'number'
        }
    }
} as const;

export const $TaxComponentHistoryData = {
    type: 'object',
    properties: {
        endDate: {
            type: 'string',
            format: 'date'
        },
        percentage: {
            type: 'number'
        },
        startDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $TaxDetailsData = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        taxComponent: {
            '$ref': '#/components/schemas/TaxComponentData'
        }
    }
} as const;

export const $TaxGroup = {
    type: 'object',
    properties: {
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        },
        taxGroupMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaxGroupMappings'
            },
            uniqueItems: true
        }
    }
} as const;

export const $TaxGroupData = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        taxAssociations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaxGroupMappingsData'
            }
        },
        taxComponents: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaxComponentData'
            }
        }
    }
} as const;

export const $TaxGroupMappings = {
    type: 'object',
    properties: {
        createdBy: {
            type: 'integer',
            format: 'int64'
        },
        createdDate: {
            type: 'string',
            format: 'date-time'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedBy: {
            type: 'integer',
            format: 'int64'
        },
        lastModifiedDate: {
            type: 'string',
            format: 'date-time'
        },
        new: {
            type: 'boolean'
        },
        taxComponent: {
            '$ref': '#/components/schemas/TaxComponent'
        },
        taxGroup: {
            '$ref': '#/components/schemas/TaxGroup'
        }
    }
} as const;

export const $TaxGroupMappingsData = {
    type: 'object',
    properties: {
        endDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        taxComponent: {
            '$ref': '#/components/schemas/TaxComponentData'
        }
    }
} as const;

export const $TellerData = {
    type: 'object',
    properties: {
        creditAccountId: {
            type: 'integer',
            format: 'int64'
        },
        debitAccountId: {
            type: 'integer',
            format: 'int64'
        },
        description: {
            type: 'string'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        hasMappedCashiers: {
            type: 'boolean'
        },
        hasTransactions: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        officeName: {
            type: 'string'
        },
        officeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OfficeData'
            }
        },
        staffOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StaffData'
            }
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        status: {
            type: 'string',
            enum: ['INVALID', 'PENDING', 'ACTIVE', 'INACTIVE', 'CLOSED']
        }
    }
} as const;

export const $TellerJournalData = {
    type: 'object',
    properties: {
        closingBalance: {
            type: 'number',
            format: 'double'
        },
        day: {
            type: 'string',
            format: 'date'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        openingBalance: {
            type: 'number',
            format: 'double'
        },
        settledBalance: {
            type: 'number',
            format: 'double'
        },
        sumPayments: {
            type: 'number',
            format: 'double'
        },
        sumReceipts: {
            type: 'number',
            format: 'double'
        },
        tellerId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $TellerTransactionData = {
    type: 'object',
    properties: {
        amount: {
            type: 'number',
            format: 'double'
        },
        cashierId: {
            type: 'integer',
            format: 'int64'
        },
        clientId: {
            type: 'integer',
            format: 'int64'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        officeId: {
            type: 'integer',
            format: 'int64'
        },
        postingDate: {
            type: 'string',
            format: 'date'
        },
        tellerId: {
            type: 'integer',
            format: 'int64'
        },
        type: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;

export const $TemplateMapper = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        mapperkey: {
            type: 'string'
        },
        mapperorder: {
            type: 'integer',
            format: 'int32'
        },
        mappervalue: {
            type: 'string'
        },
        new: {
            type: 'boolean'
        }
    }
} as const;

export const $TransactionDetailData = {
    type: 'object',
    properties: {
        noteData: {
            '$ref': '#/components/schemas/NoteData'
        },
        paymentDetails: {
            '$ref': '#/components/schemas/PaymentDetailData'
        },
        transactionId: {
            type: 'integer',
            format: 'int64'
        },
        transactionType: {
            '$ref': '#/components/schemas/TransactionTypeEnumData'
        }
    }
} as const;

export const $TransactionDetails = {
    type: 'object',
    properties: {
        noteData: {
            '$ref': '#/components/schemas/NoteData'
        },
        paymentDetails: {
            '$ref': '#/components/schemas/PaymentDetailData'
        },
        transactionId: {
            type: 'integer',
            format: 'int64',
            example: 2
        },
        transactionType: {
            '$ref': '#/components/schemas/EnumOptionType'
        }
    }
} as const;

export const $TransactionProcessingStrategyData = {
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $TransactionType = {
    type: 'string',
    enum: ['disbursement', 'repayment', 'waiver', 'repaymentAtDisbursement', 'writeOff', 'markedForRescheduling', 'recoveryRepayment', 'waiveCharges', 'accrual', 'initiateTransfer', 'approveTransfer', 'withdrawTransfer', 'rejectTransfer', 'refund', 'chargePayment', 'incomePosting', 'creditBalanceRefund', 'merchantIssuedRefund', 'payoutRefund', 'goodwillCredit', 'chargeRefund', 'chargeback', 'chargeAdjustment', 'chargeOff', 'downPayment', 'reAge', 'reAmortize', 'interestPaymentWaiver', 'accrualActivity', 'interestRefund', 'accrualAdjustment', 'capitalizedIncome', 'capitalizedIncomeAmortization', 'capitalizedIncomeAdjustment', 'contractTermination', 'capitalizedIncomeAmortizationAdjustment', 'buyDownFeeAmortization', 'buyDownFeeAmortizationAdjustment']
} as const;

export const $TransactionTypeEnumData = {
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $UpdateChangesResponse = {
    type: 'object',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 900800500600
        },
        amount: {
            type: 'number',
            example: 10000
        },
        bankName: {
            type: 'string',
            example: 'AMANA'
        },
        date: {
            type: 'string',
            format: 'date',
            example: '2021-08-10'
        }
    }
} as const;

export const $UpdateClientCollateralRequest = {
    type: 'object',
    properties: {
        locale: {
            type: 'string'
        },
        quantity: {
            type: 'number'
        }
    }
} as const;

export const $UpdatePostDatedCheckRequest = {
    type: 'object',
    description: 'UpdatePostDatedCheckRequest',
    properties: {
        accountNo: {
            type: 'integer',
            format: 'int64',
            example: 900800300400
        },
        amount: {
            type: 'number',
            example: 10000
        },
        date: {
            type: 'string',
            format: 'date',
            example: '2021-08-10'
        },
        dateFormat: {
            type: 'string',
            example: 'dd MM YYYY'
        },
        locale: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'AMANA'
        },
        repaymentDate: {
            type: 'string',
            format: 'date',
            example: '2021-07-19'
        }
    }
} as const;

export const $UpdatePostDatedCheckResponse = {
    type: 'object',
    description: 'UpdatePostDatedCheckResponse',
    properties: {
        changes: {
            '$ref': '#/components/schemas/UpdateChangesResponse'
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 12
        }
    }
} as const;

export const $UpdateStaffResponse = {
    type: 'object',
    description: 'PutStaffResponse',
    properties: {
        officeId: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        resourceId: {
            type: 'integer',
            format: 'int64',
            example: 1
        }
    }
} as const;

export const $UploadRequest = {
    type: 'object',
    properties: {
        dateFormat: {
            type: 'string'
        },
        locale: {
            type: 'string'
        },
        uploadedInputStream: {
            type: 'string',
            format: 'binary'
        }
    }
} as const;

export const $WorkingDaysData = {
    type: 'object',
    properties: {
        extendTermForDailyRepayments: {
            type: 'boolean'
        },
        extendTermForRepaymentsOnHolidays: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        recurrence: {
            type: 'string'
        },
        repaymentRescheduleOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOptionData'
            }
        },
        repaymentRescheduleType: {
            '$ref': '#/components/schemas/EnumOptionData'
        }
    }
} as const;