name: Publish Frontend Docker Images

on:
  push:
    branches:
      - develop
      - main
      - feature/frontend-ci-cd-pipeline
    paths:
      - 'frontend/**'
      - 'packages/**'
      - 'Dockerfile.*'
      - '.github/workflows/publish-frontend-images.yml'
  workflow_dispatch:
    inputs:
      apps:
        description: 'Apps to build (comma-separated: admin,account-manager,branch-manager,cashier or "all")'
        required: false
        default: 'all'

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  determine-apps:
    name: Determine Apps to Build
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.set-apps.outputs.apps }}

    steps:
      - name: Set apps matrix
        id: set-apps
        run: |
          if [ "${{ github.event.inputs.apps }}" == "all" ] || [ "${{ github.event.inputs.apps }}" == "" ]; then
            echo 'apps=["admin","account-manager","branch-manager","cashier"]' >> $GITHUB_OUTPUT
          else
            APPS=$(echo "${{ github.event.inputs.apps }}" | jq -R 'split(",") | map(. | gsub(" "; ""))')
            echo "apps=$APPS" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: Build and Push ${{ matrix.app }}
    runs-on: ubuntu-latest
    needs: determine-apps

    strategy:
      matrix:
        app: ${{ fromJson(needs.determine-apps.outputs.apps) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          # Extract branch name
          BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

          # Extract git hashes
          SHORT_SHA=$(git rev-parse --short HEAD)
          LONG_SHA=$(git rev-parse HEAD)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "long_sha=$LONG_SHA" >> $GITHUB_OUTPUT

          # Determine image tags
          if [ "$BRANCH" == "develop" ]; then
            TAGS="develop,$SHORT_SHA,$LONG_SHA"
          elif [ "$BRANCH" == "main" ]; then
            TAGS="main,$SHORT_SHA,$LONG_SHA"
          else
            SAFE_BRANCH=$(echo "$BRANCH" | sed 's/[^a-zA-Z0-9._-]/-/g')
            TAGS="$SAFE_BRANCH,$SHORT_SHA"
          fi

          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "Image tags: $TAGS"

      - name: Build and push ${{ matrix.app }} image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.app }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/adorsys-gis/fineract-${{ matrix.app }}-app:${{ steps.meta.outputs.short_sha }}
            ${{ env.REGISTRY }}/adorsys-gis/fineract-${{ matrix.app }}-app:${{ steps.meta.outputs.branch }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ steps.meta.outputs.long_sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate build summary
        run: |
          echo "### ${{ matrix.app }} Image Built Successfully! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry**: \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: \`adorsys-gis/fineract-${{ matrix.app }}-app\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tags**: \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Command**:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/adorsys-gis/fineract-${{ matrix.app }}-app:${{ steps.meta.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  trigger-gitops-update:
    name: Trigger GitOps Update
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Trigger GitOps repo update
        run: |
          echo "ðŸ”„ GitOps update workflow would be triggered here"
          echo "This requires implementing update-gitops-repo workflow"
          echo "For now, update GitOps repo manually or implement automation"

          echo "### GitOps Update Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Frontend images have been published. To deploy:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Update image tags in \`fineract-gitops\` repository" >> $GITHUB_STEP_SUMMARY
          echo "2. Commit changes to trigger ArgoCD sync" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor deployment in ArgoCD UI" >> $GITHUB_STEP_SUMMARY
